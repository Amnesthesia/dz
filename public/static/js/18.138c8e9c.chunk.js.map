{"version":3,"sources":["ListAccordionGroup.tsx","ListAccordion.tsx","ListIcon.tsx","ListItem.tsx","ListSubheader.tsx","ListSection.tsx","components/Themed.tsx","components/ScrollableScreen.tsx","node_modules/react-native-web/dist/exports/useWindowDimensions/index.js","HelperText.tsx","Divider.tsx","components/notifications/index.ts","components/LicenseSelect.tsx","components/FederationSelect.tsx","components/forms/user/UserForm.tsx","screens/authenticated/profile/UpdateUserScreen.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","children","value","expandedIdProp","onAccordionPress","newExpandedId","setExpandedId","currentExpandedId","ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expandedProp","expanded","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","isExpanded","handlePress","id","onPress","setExpanded","style","styles","onLongPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","testID","borderless","pointerEvents","left","selectable","numberOfLines","description","right","name","size","direction","I18nManager","child","StyleSheet","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme","ListIcon","source","iconColor","width","ListItem","rest","marginVerticalNone","ellipsizeMode","renderDescription","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","ListSubheader","font","fonts","textColor","colors","paddingHorizontal","paddingVertical","ListSection","titleStyle","useThemeColor","props","colorName","useColorScheme","colorFromProps","Colors","Text","lightColor","darkColor","otherProps","light","dark","View","backgroundColor","ScrollableScreen","useWindowDimensions","useAppSelector","state","global","surface","contentContainerStyle","create","flexGrow","paddingBottom","_useState","useState","Dimensions","get","dims","setDims","useEffect","handleChange","_ref","window","addEventListener","removeEventListener","text","type","visible","shown","Animated","current","textHeight","scale","toValue","duration","useNativeDriver","onLayout","e","opacity","transform","translateY","inputRange","outputRange","hairlineWidth","inset","isDarkTheme","actions","slice","Notifications","QUERY_LICENSES","gql","LicenseSelect","isMenuOpen","setMenuOpen","useQuery","variables","federationId","data","loading","refetch","Subheader","Menu","onDismiss","anchor","Item","required","licenses","map","license","onSelect","QUERY_FEDERATIONS","FederationSelect","federations","length","JSON","stringify","federation","SlotForm","userForm","dispatch","useAppDispatch","globalState","original","fields","exitWeight","setField","rigs","currentUser","TextInput","field","mode","label","error","toString","onChangeText","newValue","HelperText","email","phone","keyboardType","Affix","Divider","setFederation","Number","paddingTop","marginBottom","ticketAddons","MUTATION_CREATE_USER","globalSlice","UpdateUserScreen","navigation","useNavigation","user","useRoute","params","setOriginal","useMutation","mutationUpdateUser","validate","hasError","emailRegex","RegExp","setFieldError","test","onSave","a","async","licenseId","parseFloat","result","updateUser","fieldErrors","errors","message","snackbar","showSnackbar","variant","goBack","reset","Button","disabled","fontWeight","separator"],"mappings":"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","file":"static/js/18.138c8e9c.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n        borderless\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            {right ? (\n              right({\n                isExpanded: isExpanded,\n              })\n            ) : (\n              <MaterialCommunityIcon\n                name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                color={titleColor}\n                size={24}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            )}\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n","import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst ICON_SIZE = 24;\n\n/**\n * A component to show an icon in a list item.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/list-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <List.Icon color={Colors.blue500} icon=\"folder\" />\n *     <List.Icon color={Colors.blue500} icon=\"equal\" />\n *     <List.Icon color={Colors.blue500} icon=\"calendar\" />\n *   </>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListIcon = ({ icon, color: iconColor, style }: Props) => (\n  <View style={[styles.item, style]} pointerEvents=\"box-none\">\n    <Icon source={icon} size={ICON_SIZE} color={iconColor} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nListIcon.displayName = 'List.Icon';\n\nexport default ListIcon;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          <Text\n            selectable={false}\n            ellipsizeMode={titleEllipsizeMode}\n            numberOfLines={titleNumberOfLines}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const font = fonts.medium;\n  const textColor = color(colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <Text\n      numberOfLines={1}\n      {...rest}\n      style={[styles.container, { color: textColor, ...font }, style]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default withTheme(ListSubheader);\n","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport ListSubheader from './ListSubheader';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title text for the section.\n   */\n  title?: string;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to group list items.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/list-section.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Section>\n *     <List.Subheader>Some title</List.Subheader>\n *     <List.Item title=\"First Item\" left={() => <List.Icon icon=\"folder\" />} />\n *     <List.Item\n *       title=\"Second Item\"\n *       left={() => <List.Icon color=\"#000\" icon=\"folder\" />}\n *     />\n *   </List.Section>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListSection = ({\n  children,\n  title,\n  titleStyle,\n  style,\n  ...rest\n}: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {title ? <ListSubheader style={titleStyle}>{title}</ListSubheader> : null}\n    {children}\n  </View>\n);\n\nListSection.displayName = 'List.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n});\n\nexport default withTheme(ListSection);\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      // $FlowFixMe\n      setDims(window);\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({ inset, style, theme, ...rest }: Props) => {\n  const { dark: isDarkTheme } = theme;\n  return (\n    <View\n      {...rest}\n      style={[\n        isDarkTheme ? styles.dark : styles.light,\n        inset && styles.inset,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { License, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseSelect(props: ILicenseSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      License\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select a license\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.licenses?.map((license) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(license);\n            }}\n            title={\n              license.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Federation, Query } from \"../graphql/schema\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select federation\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.federations?.map((federation) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport LicenseSelect from '../../LicenseSelect';\nimport FederationSelect from '../../FederationSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.userForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.original?.id === globalState.currentUser?.id;  \n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      \n      <FederationSelect\n        value={state?.fields?.license?.value?.federation || state.federation.value}\n        onSelect={(value) => dispatch(actions.setFederation(value))}\n        required\n      />\n\n      <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n        { state.federation.error || \"\" }\n      </HelperText>\n\n      { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n        <>\n          <LicenseSelect\n            value={state.fields.license.value}\n            federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n            onSelect={(value) => dispatch(actions.setField([\"license\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n            { state.fields.license.error || \"\" }\n          </HelperText>\n        </>\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, userForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/user/slice\";\nimport { Mutation, User } from '../../../graphql/schema';\nimport UserForm from '../../../components/forms/user/UserForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        phone: $phone,\n        email: $email,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateUserScreen() {\n  const { userForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { user: User }}>();\n  const user = route.params!.user;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(user));\n  }, [user?.id]);\n\n  const [mutationUpdateUser, data] = useMutation<Mutation>(MUTATION_CREATE_USER);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            licenseId: !license.value?.id ? null : Number(license.value!.id),\n            phone: phone.value,\n            exitWeight: parseFloat(exitWeight.value!),\n            email: email.value,\n          }\n        });\n        \n        if (result.data?.updateUser?.user) {\n          const { fieldErrors, errors } = result.data.updateUser;\n\n          if (fieldErrors) {\n            fieldErrors?.map(({ field, message }) => {\n              switch (field) {\n                case \"name\":\n                  return dispatch(userForm.setFieldError([\"name\", message]));\n                case \"exit_weight\":\n                  return dispatch(userForm.setFieldError([\"exitWeight\", message]));\n                case \"license_id\":\n                  return dispatch(userForm.setFieldError([\"license\", message]));\n                case \"phone\":\n                  return dispatch(userForm.setFieldError([\"phone\", message]));\n                case \"email\":\n                  return dispatch(userForm.setFieldError([\"email\", message]));\n              }\n            });\n          } else if (errors?.length) {\n            errors.map((message) =>\n              dispatch(\n                snackbar.showSnackbar({ message: message, variant: \"error\" })\n              )\n            );\n          } else {\n            dispatch(\n              snackbar.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n            );\n            navigation.goBack();\n            dispatch(userForm.reset());\n          }\n\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <UserForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}