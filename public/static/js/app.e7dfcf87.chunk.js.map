{"version":3,"sources":["redux/global.ts","components/notifications/slice.ts","screens/unauthenticated/login/slice.ts","screens/unauthenticated/signup/slice.ts","screens/authenticated/users/slice.ts","components/forms/dropzone/slice.tsx","components/forms/plane/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","components/forms/slot/slice.tsx","components/forms/user/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/rig/slice.tsx","components/forms/rig_inspection/slice.tsx","redux/store.ts","graphql/Apollo.tsx","constants/Colors.ts","hooks/usePalette.ts","components/notifications/Notifications.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","components/JumpTypeSelect.tsx","components/TicketTypeSelect.tsx","hooks/useRestriction.ts","components/RigSelect.tsx","components/forms/slot/SlotForm.tsx","components/dialogs/ManifestUserDialog.tsx","components/Themed.tsx","components/NoResults.tsx","screens/authenticated/manifest/GetStarted.tsx","components/GcaChip.tsx","components/LoadMasterChip.tsx","components/PilotChip.tsx","components/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","screens/authenticated/manifest/ManifestScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/authenticated/load/LoadScreen.tsx","components/notifications/index.ts","components/PlaneSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","graphql/createQuery.tsx","components/DropzoneUserSelect.tsx","components/forms/load/LoadForm.tsx","components/ScrollableScreen.tsx","screens/authenticated/load/CreateLoadScreen.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","screens/authenticated/packing/PackingScreen.tsx","navigation/tabs/packing.tsx","components/DatePicker.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/RigDialog.tsx","components/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","screens/authenticated/profile/ProfileScreen.tsx","screens/authenticated/rig/RigScreen.tsx","components/LicenseSelect.tsx","components/FederationSelect.tsx","components/forms/user/UserForm.tsx","screens/authenticated/profile/UpdateUserScreen.tsx","navigation/tabs/profile.tsx","screens/authenticated/settings/SettingsScreen.tsx","screens/authenticated/settings/DropzoneSettingsScreen.tsx","screens/authenticated/ticket_types/TicketTypesScreen.tsx","components/forms/plane/PlaneForm.tsx","screens/authenticated/planes/CreatePlaneScreen.tsx","screens/authenticated/planes/UpdatePlaneScreen.tsx","components/forms/dropzone/DropzoneForm.tsx","screens/authenticated/dropzones/UpdateDropzoneScreen.tsx","screens/authenticated/planes/PlanesScreen.tsx","components/forms/ticket_type/TicketTypeForm.tsx","screens/authenticated/ticket_types/CreateTicketTypeScreen.tsx","screens/authenticated/ticket_types/UpdateTicketTypeScreen.tsx","components/forms/extra/ExtraForm.tsx","screens/authenticated/extras/CreateExtraScreen.tsx","screens/authenticated/extras/UpdateExtraScreen.tsx","screens/authenticated/extras/ExtrasScreen.tsx","navigation/tabs/settings.tsx","screens/authenticated/users/UsersScreen.tsx","screens/authenticated/users/AppBar.tsx","components/forms/rig_inspection/RigInspectionItem.tsx","components/forms/rig_inspection/RigInspectionForm.tsx","screens/authenticated/rig/RigInspectionScreen.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/createMutation.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","colors","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","initialState","currentUser","currentDropzone","permissions","credentials","theme","isDarkMode","createSlice","name","reducers","setCredentials","state","action","payload","setUser","setPermissions","setPrimaryColor","primary","setAccentColor","accent","setDropzone","primaryColor","secondaryColor","toggleDarkMode","logout","key","typedKey","queue","hideSnackbar","slice","showSnackbar","push","fields","email","value","error","password","setEmail","setPassword","setEmailError","setPasswordError","reset","federation","passwordConfirmation","exitWeight","phone","license","setFederation","setField","field","setFieldError","isSearchVisible","searchText","setSearchText","setSearchVisible","original","banner","isCreditSystemEnabled","isPublic","setOriginal","registration","minSlots","maxSlots","hours","nextMaintenanceHours","cost","altitude","allowManifestingSelf","isTandem","extras","ticketTypeIds","ticketTypes","map","id","Number","gca","dispatchAt","isOpen","loadMaster","pilot","plane","jumpType","load","rig","ticketType","user","rigs","role","credits","expiresAt","make","model","serial","repackExpiresAt","canopySize","setItem","filter","item","checklistItem","checklistValues","globalActions","loginSlice","actions","signUpSlice","globalSlice","usersActions","usersSlice","snackbarActions","notificationSlice","slotForm","planeFormSlice","dropzoneFormSlice","ticketTypeFormSlice","extraFormSlice","loadFormSlice","slotFormSlice","userForm","userFormSlice","dropzoneUserForm","dropzoneUserFormSlice","rigForm","rigFormSlice","rigInspectionForm","rigInspectionFormSlice","persistConfig","storage","Platform","OS","require","default","AsyncStorage","whitelist","reducer","persistCombineReducers","global","notifications","login","signup","dropzoneForm","planeForm","ticketTypeForm","extraForm","loadForm","usersScreen","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","httpLink","createHttpLink","uri","Constants","manifest","extra","url","Apollo","children","dispatch","errorLink","useMemo","onError","graphQLErrors","networkError","some","err","extensions","code","message","variant","locations","path","authLink","setContext","_","headers","accessToken","tokenType","JSON","stringify","client","ApolloClient","link","concat","cache","InMemoryCache","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","usePalette","MyComponent","StyleSheet","create","container","flex","justifyContent","palette","notification","length","variantStyle","backgroundColor","Snackbar","visible","onDismiss","duration","style","prefixes","Linking","config","screens","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","View","styles","Text","title","TouchableOpacity","onPress","replace","linkText","alignItems","padding","fontSize","fontWeight","marginTop","paddingVertical","color","QUERY_JUMP_TYPES","gql","JumpTypeSelect","props","useState","isMenuOpen","setMenuOpen","useQuery","variables","allowedForUserId","userId","data","loading","refetch","Subheader","Menu","anchor","Item","description","required","jumpTypes","onSelect","QUERY_TICKET_TYPES","TicketTypeSelect","globalState","dropzoneId","QUERY_PERMISSIONS","useRestriction","permission","fetchPolicy","dropzone","includes","QUERY_RIGS","RigSelect","left","Icon","icon","SlotForm","React","isEdit","allowedToManifestOthers","console","log","HelperText","type","ScrollView","horizontal","ticketAddons","Chip","selected","Divider","TextInput","mode","label","toString","keyboardType","right","Affix","onChangeText","newValue","marginBottom","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","useCallback","hasErrors","onManifest","a","async","jumpTypeId","extraIds","loadId","rigId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","open","ProgressBar","indeterminate","Title","Content","Actions","Button","onClose","useThemeColor","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","NoResults","subtitle","empty","Paragraph","textAlign","display","fab","position","margin","bottom","width","height","GetStarted","hasPlanes","hasTicketTypes","separator","marginVertical","QUERY_DROPZONE_USERS","GCAChip","marginHorizontal","dropzoneUsers","edges","edge","node","LoadMasterChip","allowed","slots","slot","PilotChip","QUERY_PLANES","PlaneChip","planes","QUERY_LOAD","MUTATION_UPDATE_LOAD","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","useNavigation","loadNumber","canManifest","mutationUpdateLoad","mutation","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","Math","ceil","onLanded","hasLanded","canUpdateLoad","canEditSelf","canEditOthers","getSlotPressAction","onSlotPress","Card","elevation","undefined","overflow","flexDirection","DataTable","Header","numeric","Row","pointerEvents","Cell","Array","from","v","i","differenceInMinutes","flexGrow","marginLeft","disabled","Boolean","QUERY_DROPZONE","ManifestScreen","isDialogOpen","setDialogOpen","earliestTimestamp","startOfDay","isFocused","useIsFocused","isSetupComplete","canCreateLoad","Dimensions","get","loads","contentContainerStyle","numColumns","refreshing","onRefresh","renderItem","index","isFull","FAB","small","navigate","MonoText","fontFamily","EditScreenInfo","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","lineHeight","contentContainer","paddingTop","welcomeContainer","welcomeImage","resizeMode","codeHighlightText","borderRadius","paddingHorizontal","PlaneSelect","createQuery","query","options","getPayload","opts","previousData","transformedData","useEffect","showSnackbarErrors","DropzoneUserSelect","useQueryDropzoneUsers","requiredPermissions","LoadForm","placeholder","Checkbox","status","dzUser","ScrollableScreen","useWindowDimensions","surface","content","paddingBottom","MUTATION_CREATE_LOAD","CreateLoadScreen","mutationCreateLoad","hasError","onSave","createLoad","snackbar","goBack","MaterialCommunityIcons","size","alignSelf","button","QUERY_DROPZONES","AppBar","previous","scene","dropzoneMenuOpen","setDropzoneMenuOpen","hasRig","hasExitWeight","showSetupWarning","Appbar","BackAction","descriptor","marginRight","dropzones","Manifest","createStackNavigator","ManifestTab","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","DatePicker","setOpen","date","onChange","timestamp","format","selectedDays","onDayClick","RigForm","time","MUTATION_CREATE_RIG","MUTATION_UPDATE_RIG","RigDialog","mutationCreateRig","createData","mutationUpdateRig","updateData","response","updateRig","createRig","QUERY_ROLES","RoleSelect","paddingLeft","roles","DropzoneUserForm","canUpdateRole","newRole","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","dropzoneUserId","QUERY_DROPZONE_USER","rigDialogOpen","setRigDialogOpen","dropzoneUserDialogOpen","setDropzoneUserDialogOpen","route","useRoute","isSelf","params","canInspectRigs","getRigPressAction","card","dropzoneUser","join","spacer","RigScreen","QUERY_LICENSES","LicenseSelect","federationId","licenses","QUERY_FEDERATIONS","FederationSelect","federations","MUTATION_CREATE_USER","UpdateUserScreen","mutationUpdateUser","emailRegex","RegExp","test","licenseId","parseFloat","updateUser","Profile","ProfileTab","initialParams","SettingsScreen","Section","DropzoneSettingsScreen","QUERY_TICKET_TYPE","MUTATION_UPDATE_TICKET_TYPE","TicketTypesScreen","mutationUpdateTicketType","refreshControl","RefreshControl","Switch","onValueChange","DropzoneForm","MUTATION_CREATE_PLANE","CreatePlaneScreen","mutationCreatePlane","createPlane","UpdatePlaneScreen","mutationUpdatePlane","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","onPickImage","getDocumentAsync","multiple","onColorSelected","sliderComponent","SliderComponent","defaultColor","hideSliders","current","next","maxHeight","Cover","source","subheader","QUERY_DROPZONE_DETAILS","MUTATION_UPDATE_DROPZONE","UpdateDropzoneScreen","mutationUpdateDropzone","updateDropzone","PlanesScreen","QUERY_EXTRAS","TicketTypeForm","altitudeMenuOpen","setAltitudeMenuOpen","MUTATION_CREATE_TICKET_TYPE","CreateTicketTypeScreen","mutationCreateTicketType","createTicketType","UpdateTicketTypeScreen","updateTicketType","ExtraForm","ticket","xor","MUTATION_CREATE_EXTRA","CreateExtraScreen","mutationCreateExtra","createExtra","MUTATION_UPDATE_EXTRA","UpdateExtraScreen","mutationUpdateExtra","updateExtra","ExtrasScreen","Settings","SettingsTab","TicketTypeSettingsScreen","UsersScreen","search","inputContainer","input","onSearch","searchVisible","MaterialIcons","RigInspectionItem","canInspect","valueType","QUERY_RIG_INSPECTION","rigInspectionChecklist","checklistItems","currentValue","find","QUERY_RIG_INSPECTIONS","MUTATION_CREATE_RIG_INSPECTION","MUTATION_SET_VALUE","RigInspectionScreen","mutationCreateRigInspection","mutationSetValue","rigInspections","inspection","createRigInspection","rigInspectionId","rigInspection","Promise","all","checklistItemId","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","canManageDropzone","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","unmountOnBlur","UsersTab","FlatList","ListEmptyComponent","isRequired","pattern","validates","callback","createMutation","fieldErrorMap","onFieldError","mutate","Object","keys","forEach","x","variable","validator","fieldName","createDropzone","SignupScreen","useMutationCreateDropzone","e","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","userLogin","authenticatable","secureTextEntry","userSignUp","useMutationSignUp","onSignUp","textContentType","passwordRules","maxWidth","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","NavigationContainer","linking","LinkingConfiguration","StatusBar","Notifications","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","useCachedResources","ActivityIndicator","module","exports"],"mappings":"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","file":"static/js/app.e7dfcf87.chunk.js","sourcesContent":["import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n\ninterface IGlobalState {\n  currentUser: User | null;\n  credentials: Credential | null;\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nconst initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  permissions: [],\n  credentials: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone>) => {\n      state.currentDropzone = action.payload;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport default createSlice({\n  name: 'notifications',\n  initialState: {\n    queue: []\n  } as INotificationState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nconst initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'usersScreen',\n  initialState,\n  reducers: {\n    \n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<Dropzone>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nconst initialState: IPlaneEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IPlaneEditState, action: PayloadAction<Plane>) => {\n      state.original = action.payload;\n      state.fields.hours.value = action.payload.hours!;\n      state.fields.minSlots.value = action.payload.minSlots!;\n      state.fields.maxSlots.value = action.payload.maxSlots!;\n      state.fields.name.value = action.payload.name!;\n      state.fields.registration.value = action.payload.registration!;\n      state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nconst initialState: ITicketTypeEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'ticketTypeForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ITicketTypeEditState, action: PayloadAction<TicketType>) => {\n      state.original = action.payload;\n      state.fields.altitude.value = action.payload.altitude!;\n      state.fields.cost.value = action.payload.cost!;\n      state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nconst initialState: IExtraEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'ExtraForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IExtraEditState, action: PayloadAction<Extra>) => {\n      state.original = action.payload;\n      state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n      state.fields.cost.value = action.payload.cost;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ILoadEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'loadForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ILoadEditState, action: PayloadAction<Load>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"user\"\n  | \"exitWeight\"\n  | \"extras\"\n>;\n\ninterface ISlotEditState {\n  original: Slot | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Slot[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    user: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<Slot>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IUserEditState = {\n  original: null,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'userForm',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IUserEditState, action: PayloadAction<User>) => {\n      state.original = action.payload;\n      state.federation.value = action.payload.license?.federation!;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"credits\"\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneUserEditState = {\n  original: null,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    credits: {\n      value: 0,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'dropzoneUserForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IDropzoneUserEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IRigEditState = {\n  original: null,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'rigForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IRigEditState, action: PayloadAction<Rig>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, ChecklistValue } from \"../../../graphql/schema\";\n\ntype FieldItem = Pick<ChecklistValue, \"checklistItem\" | \"value\"> & { id?: string | null}\n\n\ninterface IRigInspectionEditState {\n  original: RigInspection | null;\n  fields: FieldItem[],\n}\n\nconst initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'rigInspectionForm',\n  initialState,\n  reducers: {\n    setItem: (state: IRigInspectionEditState, action: PayloadAction<FieldItem>) => {\n      state.fields = [\n        ...state.fields.filter((item) => item.checklistItem.id !== action.payload.checklistItem.id),\n        action.payload\n      ]\n    },\n\n    setOriginal: (state: IRigInspectionEditState, action: PayloadAction<RigInspection>) => {\n      state.original = action.payload;\n      state.fields = action.payload.checklistValues;\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport AsyncStorage from '@react-native-community/async-storage';\n\nimport { persistStore, persistCombineReducers } from \"redux-persist\";\n\n\nimport globalSlice from \"./global\";\nimport notificationSlice from \"../components/notifications/slice\";\n\nimport loginSlice from \"../screens/unauthenticated/login/slice\";\nimport signUpSlice from \"../screens/unauthenticated/signup/slice\";\nimport usersSlice from \"../screens/authenticated/users/slice\";\nimport dropzoneFormSlice from \"../components/forms/dropzone/slice\";\nimport planeFormSlice from \"../components/forms/plane/slice\";\nimport ticketTypeFormSlice from \"../components/forms/ticket_type/slice\";\nimport extraFormSlice from \"../components/forms/extra/slice\";\nimport loadFormSlice from \"../components/forms/load/slice\";\nimport slotFormSlice from \"../components/forms/slot/slice\";\nimport userFormSlice from \"../components/forms/user/slice\";\nimport dropzoneUserFormSlice from \"../components/forms/dropzone_user/slice\";\nimport rigFormSlice from \"../components/forms/rig/slice\";\nimport rigInspectionFormSlice from \"../components/forms/rig_inspection/slice\";\n\n// Re-export actions:\nexport const { actions: loginActions } = loginSlice;\nexport const { actions: signUpActions } = signUpSlice;\nexport const { actions: globalActions } = globalSlice;\nexport const { actions: usersActions } = usersSlice;\nexport const { actions: snackbarActions } = notificationSlice;\nexport const { actions: planeForm } = planeFormSlice;\nexport const { actions: dropzoneForm } = dropzoneFormSlice;\nexport const { actions: ticketTypeForm } = ticketTypeFormSlice;\nexport const { actions: extraForm } = extraFormSlice;\nexport const { actions: loadForm } = loadFormSlice;\nexport const { actions: slotForm } = slotFormSlice;\nexport const { actions: userForm } = userFormSlice;\nexport const { actions: dropzoneUserForm } = dropzoneUserFormSlice;\nexport const { actions: rigForm } = rigFormSlice;\nexport const { actions: rigInspectionForm } = rigInspectionFormSlice;\n\nconst persistConfig = {\n  key: 'root',\n  storage: Platform.OS === \"web\" ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\n\nconst reducer = persistCombineReducers(persistConfig, {\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    login: loginSlice.reducer,\n    signup: signUpSlice.reducer,\n    dropzoneForm: dropzoneFormSlice.reducer,\n    planeForm: planeFormSlice.reducer,\n    ticketTypeForm: ticketTypeFormSlice.reducer,\n    extraForm: extraFormSlice.reducer,\n    loadForm: loadFormSlice.reducer,\n    slotForm: slotFormSlice.reducer,\n    userForm: userFormSlice.reducer,\n    dropzoneUserForm: dropzoneUserFormSlice.reducer,\n    rigForm: rigFormSlice.reducer,\n    rigInspectionForm: rigInspectionFormSlice.reducer,\n    usersScreen: usersSlice.reducer,\n  });\n\nexport const store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport React, { useCallback, useMemo } from 'react';\nimport Constants from \"expo-constants\";\nimport { globalActions, snackbarActions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `Session expires`, variant: \"error\" })\n        )\n        dispatch(\n          globalActions.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          dispatch(\n            snackbarActions.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n          )\n        );\n      if (networkError) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\nconst successColor = \"#00C851\";\nconst errorColor = \"#ff4444\";\nconst warningColor = \"#FF8800\";\nconst infoColor = \"#0099CC\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default MyComponent;","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"dz://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { JumpType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nconst QUERY_JUMP_TYPES = gql`\n  query JumpTypes($allowedForUserId: Int) {\n    jumpTypes(allowedForUserId: $allowedForUserId) {\n      id\n      name\n    }\n  }\n`;\n\nexport default function JumpTypeSelect(props: IJumpTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_JUMP_TYPES, {\n    variables: {\n      allowedForUserId: props.userId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      Jump type\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select jump type\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.jumpTypes?.map((jumpType) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(jumpType);\n            }}\n            title={\n              jumpType.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { TicketType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  allowManifestingSelf?: boolean | null;\n  onSelect(jt: TicketType): void;\n}\n\nconst QUERY_TICKET_TYPES = gql`\n  query TicketTypes($allowManifestingSelf: Boolean, $dropzoneId: Int!) {\n    ticketTypes(allowManifestingSelf: $allowManifestingSelf, dropzoneId: $dropzoneId) {\n      id\n      name\n\n      extras {\n        id\n        name\n        cost\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeSelect(props: ITicketTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      allowManifestingSelf: props.allowManifestingSelf,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.name || \"Please select ticket type\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.ticketTypes?.map((ticketType) => \n            <List.Item\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(ticketType);\n              }}\n              title={\n                ticketType.name || \"-\"\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useAppSelector } from \"../redux\";\n\nconst QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: string): boolean {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  return data?.dropzone?.currentUser?.permissions?.includes(permission as any) || false;\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Rig, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryRigs(\n    $dropzoneId: Int\n    $userId: Int\n  ) {\n    rigs(dropzoneId: $dropzoneId, userId: $userId) {\n      id\n      make\n      model\n      canopySize\n      serial\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_RIGS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.rigs?.map((rig) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            title={\n              `${props.value?.make} ${props.value?.model}`\n            }\n            description={\n              `${props.value?.canopySize} sqft`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport JumpTypeSelect from '../../JumpTypeSelect';\nimport TicketTypeSelect from '../../TicketTypeSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../RigSelect';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.slotForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.fields.user?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", Number(state.fields.user.value.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.user.value.rigs?.length) {\n        dispatch(\n          actions.setField([\"rig\", state.fields.user.value.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.user?.value?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.fields?.user?.value?.id === globalState.currentUser?.id;\n\n  \n  const allowedToManifestSelf = useRestriction(\n    isEdit ? \"updateSlot\" : \"createSlot\"\n  );\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? \"updateUserSlot\" : \"createUserSlot\"\n  )\n  console.log(\"Fields\", state.fields);\n\n  return ( \n    <> \n      <JumpTypeSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.user?.value?.id) || null}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeSelect\n        value={state.fields.ticketType.value}\n        required\n        allowManifestingSelf={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        state?.fields?.ticketType?.value?.extras?.length && (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      <RigSelect\n        value={state.fields.rig.value}\n        userId={Number(state.fields.user?.value?.id)}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { slotForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport SlotForm from \"../forms/slot/SlotForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $userId: Int\n    $exitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          userId: $userId\n          exitWeight: $exitWeight\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            ticketType {\n              id\n              name\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.slotForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          userId: Number(state.fields.user?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(slotForm.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(slotForm.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(slotForm.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(slotForm.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(slotForm.setFieldError([\"rig\", message]));\n          case \"user\":\n            return dispatch(slotForm.setFieldError([\"user\", message]));\n          case \"exit_weight\":\n            return dispatch(slotForm.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.user?.value?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <SlotForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(slotForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { Slot, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  slots: Slot[];\n  onSelect(user: User): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"parachute\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.user as User);\n            }}\n            title={\n              slot?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane-takeoff\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneChipSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport { useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Badge, Button, Card, DataTable, List, Menu, Paragraph, ProgressBar } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport GCAChip from '../../../components/GcaChip';\nimport LoadMasterChip from '../../../components/LoadMasterChip';\nimport PilotChip from '../../../components/PilotChip';\nimport PlaneChip from '../../../components/PlaneChip';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Plane, Slot } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { useAppSelector } from '../../../redux';\n\ninterface ILoadCard {\n  load: Load;\n  loadNumber: number;\n  canManifest: boolean;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nconst QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        user {\n          id\n          name\n        }\n        ticketType {\n          id\n          name\n          altitude\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const navigation = useNavigation();\n  const { load, loadNumber, onManifest, canManifest } = props;\n  const { data, loading } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const updatePilot = React.useCallback(async (pilot: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const canUpdateLoad = useRestriction(\"updateLoad\");\n  const canEditSelf = useRestriction(\"updateSlot\");\n  const canEditOthers = useRestriction(\"updateUserSlot\");\n\n  const getSlotPressAction = React.useCallback((slot: Slot) => {\n\n    if (slot?.user?.id !== state.currentUser?.id && !canEditOthers) {\n      return;\n    }\n    return () => {\n      if (slot.user?.id === state.currentUser?.id) {\n        if (canEditSelf) {\n          props.onSlotPress(slot);\n        }\n      } else if (canEditOthers) {\n        props.onSlotPress(slot);\n      }\n    }\n  }, [JSON.stringify(load), canEditOthers, props.onSlotPress]);\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  \n\n  return (\n  <Card style={{ margin: 16 }} elevation={3}>\n    <Card.Title\n      title={`Load ${data?.load?.loadNumber}`}\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal>\n          <PlaneChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.plane}\n            onSelect={updatePlane}\n          />\n          <GCAChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.gca?.user}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.pilot?.user}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.loadMaster?.user}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Exit weight</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              \n              return (\n                <DataTable.Row onPress={getSlotPressAction(slot)} pointerEvents=\"none\">\n                  <DataTable.Cell>{slot?.user?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.exitWeight}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.jumpType?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.ticketType?.altitude}</DataTable.Cell>\n                </DataTable.Row>\n              )\n            })\n          }\n          {\n            Array.from({length: (load?.maxSlots || 0) - (load?.slots?.length || 0)}, (v, i) => i).map(() =>\n              <DataTable.Row>\n                <DataTable.Cell>- Available -</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"#FF8800\", padding: 8 }}>\n          <Paragraph>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)}>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)}>\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button mode=\"outlined\" onPress={() => setDispatchOpen(true)}>\n                    Dispatch\n                  </Button>\n                }\n              >\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button style={{ marginLeft: 8 }} mode=\"contained\" onPress={() => onLanded()}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => onManifest()}\n                disabled={!canManifest || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport { startOfDay } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserDialog from '../../../components/dialogs/ManifestUserDialog';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { globalActions, slotForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\n\nconst QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"no-cache\"\n  });\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!data?.dropzone?.planes?.length;\n  const hasTicketTypes = !!data?.dropzone?.ticketTypes?.length;\n  const isPublic = !!data?.dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(globalActions.setDropzone(data.dropzone));\n    \n      dispatch(\n        globalActions.setUser({\n          ...state?.currentUser,\n          ...(data?.dropzone?.currentUser.user || {})\n        })\n      );\n    }\n  }, [JSON.stringify(data?.dropzone)]);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.primaryColor && data?.dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.primaryColor));\n    }\n\n    if (data?.dropzone?.secondaryColor && data?.dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.secondaryColor));\n    }\n  }, [\n    data?.dropzone?.primaryColor,\n    data?.dropzone?.secondaryColor\n  ])\n\n  const allowed = useRestriction(\"createSlot\");\n  const canCreateLoad = useRestriction(\"createLoad\");\n\n  return (\n    <>\n    \n    <ManifestUserDialog\n      open={isDialogOpen}\n      onClose={() => setDialogOpen(false)}\n      onSuccess={() => setDialogOpen(false)}\n    />\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (data?.dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={1}\n                        data={data?.dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              canManifest={allowed && edge?.node?.isOpen && !edge?.node?.isFull}\n                              loadNumber={(data?.dropzone?.loads?.edges?.length || 0) - index}\n                              onSlotPress={(slot) => {\n                                dispatch(slotForm.setOriginal(slot));\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                              onManifest={() => {\n                                dispatch(\n                                  slotForm.setField([\"user\", state.currentUser])\n                                );\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => navigation.navigate(\"CreateLoadScreen\")}\n            label=\"New load\"\n          />\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function LoadScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/LoadScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Plane, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  required?: boolean;\n  onSelect(plane: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneSelect(props: IPlaneSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"No plane selected\"\n          }\n          description={!props.required ? \"Optional\" : null}\n          right={() => <List.Icon icon=\"airplane\" />}\n        />\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane);\n            }}\n            title={\n              plane.name || \"-\"\n            }\n            description={\n              plane.registration\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { FieldError, Query } from \"../graphql/schema\";\nimport { snackbarActions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends {}, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            snackbarActions.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        onError!(error.message);\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import React, { useState } from \"react\";\nimport { List, Menu, Title } from \"react-native-paper\";\nimport useQueryDropzoneUsers from \"../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IDropzoneUserSelect {\n  dropzoneId: number;\n  requiredPermissions: string[];\n  value: DropzoneUser | null;\n  required?: boolean;\n  label: string;\n  onSelect(dzUser: DropzoneUser): void;\n}\n\n\n\n\nexport default function DropzoneUserSelect(props: IDropzoneUserSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: props.requiredPermissions\n    }\n  });\n\n  return (\n    <>\n      <Title>{props.label}</Title>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.user?.id ? props.value?.user.name : \"No user selected\"\n            }\n            style={{ width: \"100%\" }}\n            right={() => <List.Icon icon=\"account\" />}\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.edges?.map((edge) => \n            <List.Item\n              style={{ width: \"100%\" }}\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(edge?.node as DropzoneUser);\n              }}\n              title={\n                edge?.node?.user?.name || \"-\"\n              }\n              description={\n                edge?.node?.role?.name || null\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport PlaneSelect from '../../PlaneSelect';\nimport DropzoneUserSelect from '../../DropzoneUserSelect';\n\nconst { actions } = slice;\n\n\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.loadForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.setField([\"plane\", value]));\n            dispatch(actions.setField([\"maxSlots\", value.maxSlots]));\n          }}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <DropzoneUserSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.setField([\"gca\", dzUser]))}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.setField([\"pilot\", dzUser]))}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\nimport { useNavigation } from '@react-navigation/core';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/load/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport LoadForm from '../../../components/forms/load/LoadForm';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function CreateLoadScreen() {\n  const { loadForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateLoad, data] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(plane.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane-takeoff\" size={100} color=\"#999999\" style={{ alignSelf: \"center\", marginTop: 32 }} />\n        <LoadForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" style={styles.button} disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  button: {\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useState } from \"react\";\nimport { Appbar, Menu, Paragraph, Text, Button } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Dropzone, Query } from \"../graphql/schema\";\nimport { globalActions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { View, StyleSheet } from \"react-native\";\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzonesCompact {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\ninterface IAppBar extends StackHeaderProps {\n  searchEnabled: boolean;\n  searchVisible: boolean;\n  setSearchVisible(visible: boolean): void;\n}\n\n\nfunction AppBar({ navigation, previous, scene }: StackHeaderProps) {\n  const [dropzoneMenuOpen, setDropzoneMenuOpen] = useState(false);\n  const { data } = useQuery<Query>(QUERY_DROPZONES);\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  const hasRig = !!currentDropzone?.currentUser?.user?.rigs?.length;\n  const hasExitWeight = !!currentDropzone?.currentUser?.user?.exitWeight;\n\n  const showSetupWarning = !hasRig || !hasExitWeight;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} />\n      <Menu\n        onDismiss={() => setDropzoneMenuOpen(false)}\n        visible={dropzoneMenuOpen}\n        anchor={\n          <Text\n            onPress={() => setDropzoneMenuOpen(true)}\n            style={{ color: \"white\", marginRight: 8 }}\n          >\n            {currentDropzone?.name}\n          </Text>\n      }>\n        {\n          data?.dropzones?.edges?.map((edge) =>\n            <Menu.Item\n              title={edge?.node?.name}\n              onPress={() => {\n                dispatch(globalActions.setDropzone(edge?.node as Dropzone));\n                setDropzoneMenuOpen(false);\n              }}\n            />\n          )\n        }\n      </Menu>\n    </Appbar.Header>\n    { showSetupWarning && (\n      <View style={styles.warning}>\n        <Paragraph>\n          You need to complete your profile\n        </Paragraph>\n        <Button color=\"black\" mode=\"outlined\" onPress={() => navigation.navigate(\"Profile\")}>\n          Take me there\n        </Button>\n      </View>\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { useAppSelector } from '../../redux';\n\nimport ManifestScreen from '../../screens/authenticated/manifest/ManifestScreen';\nimport LoadScreen from '../../screens/authenticated/load/LoadScreen';\nimport CreateLoadScreen from '../../screens/authenticated/load/CreateLoadScreen';\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  LoadScreen: undefined;\n  CreateLoadScreen: undefined;\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Loads\" }}/>\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function PackingScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/PackingScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport PackingScreen from '../../screens/authenticated/packing/PackingScreen';\n\nexport type IPackingTabParams = {\n  PackingScreen: undefined;\n}\n\nconst Packing = createStackNavigator<IPackingTabParams>();\n\nexport default function PackingTab() {\n  return (\n    <Packing.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Packing.Screen name=\"PackingScreen\" component={PackingScreen} />\n    </Packing.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function RigForm() {\n  const state = useAppSelector(state => state.rigForm);\n  const dispatch = useAppDispatch();\n  const [isDatePickerOpen, setDatePickerOpen] = React.useState(false);\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport { result } from \"lodash\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { rigForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.rigForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"repackExpiresAt\", \"Required\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(rigForm.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(rigForm.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(rigForm.setFieldError([\"serial\", message]));\n          case \"canopySize\":\n            return dispatch(rigForm.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(rigForm.setFieldError([\"repackExpiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading || updateData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <RigForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(rigForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Query, UserRole } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport RoleSelect from '../../RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function DropzoneUserForm() {\n  const { dropzoneUserForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermission\");\n\n  return ( \n    <>\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Credits\"\n        error={!!state.fields.credits.error}\n        value={state.fields.credits.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"credits\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.credits.error ? \"error\" : \"info\"}>\n        { state.fields.credits.error || `Current balance: $${state.original?.credits || 0}` }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { dropzoneUserForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $credits: Float,\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          credits: $credits,\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.dropzoneUserForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.credits.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"credits\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          credits: state.fields.credits.value,\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(dropzoneUserForm.setFieldError([\"role\", message]));\n          case \"credits\":\n            return dispatch(dropzoneUserForm.setFieldError([\"credits\", message]));\n          case \"expires_at\":\n            return dispatch(dropzoneUserForm.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} dropzone user`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(dropzoneUserForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, FAB, List, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport RigDialog from '../../../components/dialogs/RigDialog';\nimport { dropzoneUserForm, globalActions, rigForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Query } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\nimport useRestriction from '../../../hooks/useRestriction';\n\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const [rigDialogOpen, setRigDialogOpen] = React.useState(false);\n  const [dropzoneUserDialogOpen, setDropzoneUserDialogOpen] = React.useState(false);\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = state.currentDropzone?.currentUser?.id === route.params.userId;\n\n  const canInspectRigs = useRestriction(\"actAsRigInspector\");\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      dropzoneUserId: Number(route.params.userId)\n    }\n  });\n\n  const getRigPressAction = React.useCallback((rig) => {\n    return () => {\n      if (!isSelf) {\n        dispatch(rigForm.setOriginal(rig));\n        setRigDialogOpen(true);\n      } else if (canInspectRigs) {\n        navigation.navigate(\"RigInspectionScreen\", {\n          dropzoneUserId: Number(route.params.userId),\n          rig\n        });\n      }\n    }\n  }, [dispatch, setRigDialogOpen]);\n\n  return (\n    <>\n    <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      \n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Basic information\" />\n          <Card.Content>\n            <List.Item\n              title=\"Name\"\n              left={() => <List.Icon icon=\"account-outline\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.name  || \"-\"}\n            />\n            <List.Item\n              title=\"Email\"\n              left={() => <List.Icon icon=\"at\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.email  || \"-\"}\n            />\n\n            <List.Item\n              title=\"Phone\"\n              left={() => <List.Icon icon=\"phone\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.phone  || \"-\"}\n            />\n\n            <List.Item\n              title=\"License\"\n              left={() => <List.Icon icon=\"ticket-account\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.license?.name || \"-\"}\n            />\n\n            <List.Item\n              title=\"Exit weight\"\n              left={() => <List.Icon icon=\"scale\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.exitWeight  || \"-\"}\n            />\n          </Card.Content>\n          {\n            isSelf && (\n              <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n                <Button\n                  icon=\"pencil\"\n                  onPress={() =>\n                    navigation.navigate(\"UpdateUserScreen\", { user: state.currentDropzone?.currentUser?.user })\n                  }\n                >\n                  Edit\n                </Button>\n              </Card.Actions>\n            )}\n        </Card>\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title={state.currentDropzone?.name} />\n          <Card.Content>\n            <List.Item\n              title=\"Role\"\n              description={data?.dropzone?.dropzoneUser?.role?.name}\n              left={() => <List.Icon icon=\"lock\" />}\n            />\n            <List.Item\n              title=\"Credits\"\n              description={data?.dropzone?.dropzoneUser?.credits}\n              left={() => <List.Icon icon=\"cash-multiple\" />}\n            />\n            <List.Item\n              title=\"Membership\"\n              description={\n                !data?.dropzone?.dropzoneUser?.expiresAt ?\n                  <span>Not a member</span>\n                : format((data?.dropzone?.dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")\n              }\n              left={() =>\n                <List.Icon\n                  icon=\"card-account-details\"\n                  color={\n                    data?.dropzone?.dropzoneUser?.expiresAt && (\n                      data?.dropzone?.dropzoneUser?.expiresAt * 1000 > new Date().getTime()\n                    ) ? undefined : \"#B00020\"}\n                />\n              }\n\n            />\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n            <Button\n              icon=\"pencil\"\n              onPress={() => {\n                dispatch(dropzoneUserForm.setOriginal(data?.dropzone?.dropzoneUser!));\n                setDropzoneUserDialogOpen(true);\n              }}\n            >\n              Edit\n            </Button>\n          </Card.Actions>\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Rigs\" />\n          <Card.Content>\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>\n                  Container\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Repack due\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Canopy size\n                </DataTable.Title>\n              </DataTable.Header>\n\n              {\n                data?.dropzone?.dropzoneUser?.user?.rigs?.map((rig) =>\n                  <DataTable.Row onPress={getRigPressAction(rig)} pointerEvents=\"none\">\n                    <DataTable.Cell>\n                      {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {`${rig?.canopySize}`}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                )\n              }\n            </DataTable>\n          </Card.Content>\n          {\n            isSelf && (\n            <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n              <Button onPress={() => setRigDialogOpen(true)}>\n                Add rig\n              </Button>\n            </Card.Actions>\n          )}\n        </Card>\n\n        { data?.dropzone?.dropzoneUser?.id === state.currentUser?.id && (\n          <Button color=\"#B00020\" onPress={() => dispatch(globalActions.logout())}>\n            Log out\n          </Button>\n        )}\n      \n      </ScrollableScreen>\n      \n      <RigDialog\n        onClose={() => setRigDialogOpen(false)}\n        onSuccess={() => setRigDialogOpen(false)}\n        userId={Number(data?.dropzone?.dropzoneUser?.user?.id)}\n        open={rigDialogOpen}\n      />\n      \n      <DropzoneUserDialog\n        onClose={() => setDropzoneUserDialogOpen(false)}\n        onSuccess={() => setDropzoneUserDialogOpen(false)}\n        open={dropzoneUserDialogOpen}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    alignItems: 'center',\n    flexGrow: 1,\n    paddingBottom: 56\n  },\n  card: {\n    margin: 8,\n    width: \"100%\",\n  },\n  fields: {\n    width: \"80%\",\n    display: \"flex\",\n  },\n  spacer: {\n    width: \"100%\",\n    height: 32,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function RigScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/RigScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { License, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseSelect(props: ILicenseSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      License\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select a license\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.licenses?.map((license) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(license);\n            }}\n            title={\n              license.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Federation, Query } from \"../graphql/schema\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select federation\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.federations?.map((federation) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport LicenseSelect from '../../LicenseSelect';\nimport FederationSelect from '../../FederationSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.userForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.original?.id === globalState.currentUser?.id;  \n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      \n      <FederationSelect\n        value={state?.fields?.license?.value?.federation || state.federation.value}\n        onSelect={(value) => dispatch(actions.setFederation(value))}\n        required\n      />\n\n      <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n        { state.federation.error || \"\" }\n      </HelperText>\n\n      { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n        <>\n          <LicenseSelect\n            value={state.fields.license.value}\n            federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n            onSelect={(value) => dispatch(actions.setField([\"license\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n            { state.fields.license.error || \"\" }\n          </HelperText>\n        </>\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, userForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/user/slice\";\nimport { Mutation, User } from '../../../graphql/schema';\nimport UserForm from '../../../components/forms/user/UserForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        phone: $phone,\n        email: $email,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateUserScreen() {\n  const { userForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { user: User }}>();\n  const user = route.params!.user;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(user));\n  }, [user?.id]);\n\n  const [mutationUpdateUser, data] = useMutation<Mutation>(MUTATION_CREATE_USER);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            licenseId: !license.value?.id ? null : Number(license.value!.id),\n            phone: phone.value,\n            exitWeight: parseFloat(exitWeight.value!),\n            email: email.value,\n          }\n        });\n        \n        if (result.data?.updateUser?.user) {\n          const { fieldErrors, errors } = result.data.updateUser;\n\n          if (fieldErrors) {\n            fieldErrors?.map(({ field, message }) => {\n              switch (field) {\n                case \"name\":\n                  return dispatch(userForm.setFieldError([\"name\", message]));\n                case \"exit_weight\":\n                  return dispatch(userForm.setFieldError([\"exitWeight\", message]));\n                case \"license_id\":\n                  return dispatch(userForm.setFieldError([\"license\", message]));\n                case \"phone\":\n                  return dispatch(userForm.setFieldError([\"phone\", message]));\n                case \"email\":\n                  return dispatch(userForm.setFieldError([\"email\", message]));\n              }\n            });\n          } else if (errors?.length) {\n            errors.map((message) =>\n              dispatch(\n                snackbar.showSnackbar({ message: message, variant: \"error\" })\n              )\n            );\n          } else {\n            dispatch(\n              snackbar.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n            );\n            navigation.goBack();\n            dispatch(userForm.reset());\n          }\n\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <UserForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport ProfileScreen from '../../screens/authenticated/profile/ProfileScreen';\nimport RigScreen from '../../screens/authenticated/rig/RigScreen';\nimport UpdateUserScreen from '../../screens/authenticated/profile/UpdateUserScreen';\nimport AppBar from '../AppBar';\nimport { useAppSelector } from '../../redux';\n\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  RigScreen: undefined;\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentDropzone?.currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n      <Profile.Screen name=\"RigScreen\" component={RigScreen} options={{ title: \"Rig\" }} />\n    </Profile.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { View } from '../../../components/Themed';\nimport { useAppSelector } from '../../../redux';\n\n\n\n\nexport default function SettingsScreen() {\n  \n  const navigation = useNavigation();\n  const state = useAppSelector(state => state.global);\n \n\n  return (\n    <View style={styles.container}>\n      <List.Section title=\"Dropzone\">\n        <List.Item\n          title=\"Configuration\"\n          onPress={() => navigation.navigate(\"UpdateDropzoneScreen\", { dropzone: state.currentDropzone })}\n          left={() => <List.Icon color=\"#000\" icon=\"information-outline\" />}\n        />\n        <List.Item\n          title=\"Planes\"\n          onPress={() => navigation.navigate(\"PlanesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"airplane\" />}\n        />\n        <List.Item\n          title=\"Rigs\"\n          left={() => <List.Icon color=\"#000\" icon=\"parachute\" />}\n          description=\"Coming soon\"\n        />\n      </List.Section>\n\n      <List.Section title=\"Tickets\">\n        <List.Item\n          title=\"Ticket types\"\n          onPress={() => navigation.navigate(\"TicketTypesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"ticket\" />}\n          />\n        <List.Item\n          title=\"Ticket add-ons\"\n          onPress={() => navigation.navigate(\"ExtrasScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"plus\" />}\n        />\n      </List.Section>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function DropzoneSettingsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/DropzoneSettingsScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, RefreshControl } from 'react-native';\nimport { FAB, DataTable, ProgressBar, Switch } from 'react-native-paper';\nimport { Mutation, Query } from \"../../../graphql/schema\";\n\nimport { useAppSelector } from '../../../redux';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      altitude\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketTypePublic(\n    $id: Int!,\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function TicketTypesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n  const [mutationUpdateTicketType, mutation] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n  \n  React.useEffect(() => {\n    if (route.name === \"TicketTypesScreen\") {\n      refetch();\n    }\n  }, [route.name])\n  return (\n      <ScrollableScreen style={styles.container} contentContainerStyle={[styles.content, {  backgroundColor: \"white\" }]} refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Name</DataTable.Title>\n            <DataTable.Title numeric>Cost</DataTable.Title>\n            <DataTable.Title numeric>Altitude</DataTable.Title>\n            <DataTable.Title numeric>Public</DataTable.Title>\n          </DataTable.Header>\n\n          { data?.ticketTypes?.map((ticketType) =>\n            <DataTable.Row onPress={() => navigation.navigate(\"UpdateTicketTypeScreen\", { ticketType })} pointerEvents=\"none\">\n              <DataTable.Cell>{ticketType.name}</DataTable.Cell>\n              <DataTable.Cell numeric>${ticketType.cost}</DataTable.Cell>\n              <DataTable.Cell numeric>\n                {ticketType.altitude}\n              </DataTable.Cell>\n              <DataTable.Cell numeric>\n                <Switch\n                  onValueChange={() => {\n                    mutationUpdateTicketType({\n                      variables: {\n                        id: Number(ticketType.id),\n                        allowManifestingSelf: !ticketType.allowManifestingSelf\n                      }\n                    })\n                  }}\n                  value={!!ticketType.allowManifestingSelf}\n                />\n              </DataTable.Cell>\n            </DataTable.Row>\n            )}\n        </DataTable>\n        \n        <FAB\n          style={styles.fab}\n          small\n          icon=\"plus\"\n          onPress={() => navigation.navigate(\"CreateTicketTypeScreen\")}\n          label=\"New ticket type\"\n        />\n      </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport ScrollableScreen from '../../ScrollableScreen';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.planeForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreatePlane({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.createPlane?.plane) {\n          const { plane } = result.data.createPlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreatePlane]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <PlaneForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation, Plane } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { plane: Plane }}>();\n  const plane = route.params!.plane;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(plane));\n  }, [plane?.id]);\n\n  const [mutationUpdatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdatePlane({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.updatePlane?.plane) {\n          const { plane } = result.data.updatePlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdatePlane]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <PlaneForm />\n        <View style={styles.actions}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  actions: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={{ width: \"100%\", marginVertical: 16, paddingHorizontal: 16 }}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, ProgressBar } from 'react-native-paper';\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Dropzone, Mutation, Query } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\nconst QUERY_DROPZONE_DETAILS = gql`\n  query QueryDropzoneDetails($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateDropzoneScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const route = useRoute<{ key: string, name: string, params: { dropzone: Dropzone }}>();\n  const dropzone = route.params!.dropzone;\n  const navigation = useNavigation();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_DETAILS, {\n    variables: { dropzoneId: Number(dropzone.id)}\n  });\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(actions.setOriginal(data.dropzone));\n    }\n  }, [data?.dropzone?.id]);\n\n  const [mutationUpdateDropzone, mutation] = useMutation<Mutation>(MUTATION_UPDATE_DROPZONE);\n\n  const onSave = React.useCallback(async () => {\n    let hasError = false;\n    const { name, banner, federation, primaryColor, secondaryColor, isCreditSystemEnabled, isPublic } = state.fields;\n\n    if (!name.value?.length || name.value?.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (!hasError) {\n      try {\n        const result = await mutationUpdateDropzone({\n          variables: {\n            id: Number(dropzone?.id),\n            name: name.value,\n            banner: banner.value || null,\n            primaryColor: primaryColor.value,\n            secondaryColor: secondaryColor.value,\n            federationId: Number(federation?.value?.id),\n            isCreditSystemEnabled: !!isCreditSystemEnabled,\n            isPublic: !!isPublic\n          }\n        });\n\n        result?.data?.updateDropzone?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"federation\":\n            case \"federation_id\":\n              return dispatch(actions.setFieldError([\"federation\", message]));\n            case \"banner\":\n              return dispatch(actions.setFieldError([\"banner\", message]));\n            case \"primary_color\":\n              return dispatch(actions.setFieldError([\"primaryColor\", message]));\n            case \"secondary_color\":\n              return dispatch(actions.setFieldError([\"secondaryColor\", message]));\n            case \"is_credit_system_enabled\":\n              return dispatch(actions.setFieldError([\"isCreditSystemEnabled\", message]));\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"is_public\":\n              return dispatch(actions.setFieldError([\"isPublic\", message]));\n          }\n        });\n        if (result?.data?.updateDropzone?.errors?.length) {\n          return dispatch(snackbarActions.showSnackbar({\n            message: result?.data?.updateDropzone?.errors[0],\n            variant: \"error\"\n          }));\n        } else if (!result?.data?.updateDropzone?.fieldErrors?.length) {\n          // No errors:\n          if (result.data?.updateDropzone?.dropzone) {\n            dispatch(\n              globalActions.setDropzone({\n                ...(globalState.currentDropzone || {}),\n                ...result?.data?.updateDropzone?.dropzone,\n              })\n            );\n            dispatch(\n              snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n            );\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateDropzone]);\n\n  return (\n    <>\n    <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      <DropzoneForm />\n      <View style={styles.fields}>\n        <Button mode=\"contained\" disabled={mutation.loading} onPress={onSave} loading={mutation.loading}>\n          Save\n        </Button>\n      </View>\n    </ScrollableScreen>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n    display: \"flex\",\n  },\n  content: {\n    display: \"flex\",\n    flexGrow: 1,\n    alignItems: 'center',\n    padding: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, RefreshControl } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlanesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n \n\n  return (\n    <ScrollableScreen refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        \n\n          {\n            !data?.planes?.length && (\n              <NoResults\n                title=\"No planes?\"\n                subtitle=\"You need to have at least one plane to manifest loads\"\n              />\n            )\n          }\n\n          { data?.planes?.length && (\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>Name</DataTable.Title>\n                <DataTable.Title numeric>Registration</DataTable.Title>\n                <DataTable.Title numeric>Slots</DataTable.Title>\n              </DataTable.Header>\n              {\n                data?.planes?.map((plane) =>\n                  <DataTable.Row\n                    pointerEvents=\"none\"\n                    onPress={() => navigation.navigate(\"UpdatePlaneScreen\", { plane })}\n                  >\n                    <DataTable.Cell>{plane.name}</DataTable.Cell>\n                    <DataTable.Cell numeric>{plane.registration}</DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {plane.maxSlots}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n              )}\n            </DataTable>\n          )}\n          \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreatePlaneScreen\")}\n        label=\"New plane\"\n      />\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_EXTRAS = gql`\n  query QueryExtras(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeForm() {\n  const state = useAppSelector(state => state.ticketTypeForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_EXTRAS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"Name of the ticket users will see\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"Base cost without extra ticket addons\" }\n      </HelperText>\n      <View style={{ width: \"100%\" }}>\n\n      <Menu\n        onDismiss={() => setAltitudeMenuOpen(false)}\n        visible={altitudeMenuOpen}\n\n        style={{position:'absolute',right:'10%',left:'10%', flex: 1 }}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setAltitudeMenuOpen(true);\n            }}\n            title={\n              state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"Height\",\n                  \"4000\": \"Hop n Pop\",\n                }[state.fields.altitude.value.toString()] :\n                \"Custom\"\n            }\n            style={{ width: \"100%\", flex: 1 }}\n            right={ () =>\n              <List.Icon icon={state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"airplane\",\n                  \"4000\": \"parachute\",\n                }[state.fields.altitude.value.toString()] as string :\n                \"pencil-plus\" \n              } />\n            }\n          />\n        }>\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 4000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Hop n Pop\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 14000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Height\"\n            right={() => <List.Icon icon=\"airplane-takeoff\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 7000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Other\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n      </Menu>\n\n      {\n        (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Custom altitude\"\n            error={!!state.fields.altitude.error}\n            value={state.fields.altitude?.value?.toString()}\n            onChangeText={(newValue) => dispatch(actions.setField([\"altitude\", Number(newValue)]))}\n          />\n        )\n      }\n\n      <Checkbox.Item\n        label=\"Tandem\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.isTandem.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"isTandem\", !state.fields.isTandem.value]))\n        }\n      />\n      <HelperText type={!!state.fields.isTandem.error ? \"error\" : \"info\"}>\n        { state.fields.isTandem.error || \"Allow also manifesting a passenger when using this ticket type\" }\n      </HelperText>\n\n      <Checkbox.Item\n        label=\"Public manifesting\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.allowManifestingSelf.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"allowManifestingSelf\", !state.fields.allowManifestingSelf.value]))\n        }\n      />\n      \n      <HelperText type={!!state.fields.allowManifestingSelf.error ? \"error\" : \"info\"}>\n        { state.fields.allowManifestingSelf.error || \"Allow users to manifest themselves with this ticket\" }\n      </HelperText>\n\n      <Divider />\n      <List.Subheader>Enabled ticket add-ons</List.Subheader>\n      {\n        data?.extras.map((extra) =>\n          <Checkbox.Item\n            label={extra.name!}\n            status={state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(\n                actions.setField([\n                  \"extras\",\n                  state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n                  ? state.fields.extras.value?.filter(({ id }) => id !== extra.id)\n                  : [...state.fields.extras.value!, extra]\n                ])\n              )\n            }\n          />\n        )\n      }\n\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateTicketType, data] = useMutation<Mutation>(MUTATION_CREATE_TICKET_TYPE);\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateTicketType({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n        \n        result?.data?.createTicketType?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"altitude\":\n              return dispatch(actions.setFieldError([\"altitude\", message]));\n            case \"cost\":\n              return dispatch(actions.setFieldError([\"cost\", message]));\n            case \"allow_manifesting_self\":\n              return dispatch(actions.setFieldError([\"allowManifestingSelf\", message]));\n            case \"extras\":\n              return dispatch(actions.setFieldError([\"extras\", message]));\n          }\n        });\n\n        if (result?.data?.createTicketType?.errors?.length) {\n          return dispatch(\n            snackbarActions.showSnackbar({\n              message: result?.data?.createTicketType?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (result.data?.createTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateTicketType]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <TicketTypeForm />\n        <View style={styles.actions}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  actions: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation, TicketType } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { ticketType: TicketType }}>();\n  const ticketType = route.params!.ticketType;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(ticketType));\n  }, [ticketType?.id]);\n\n  const [mutationUpdateTicketType, data] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateTicketType({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n\n\n        result?.data?.updateTicketType?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"altitude\":\n              return dispatch(actions.setFieldError([\"altitude\", message]));\n            case \"cost\":\n              return dispatch(actions.setFieldError([\"cost\", message]));\n            case \"allow_manifesting_self\":\n              return dispatch(actions.setFieldError([\"allowManifestingSelf\", message]));\n            case \"extras\":\n              return dispatch(actions.setFieldError([\"extras\", message]));\n          }\n        });\n\n        if (result?.data?.updateTicketType?.errors?.length) {\n          return dispatch(\n            snackbarActions.showSnackbar({\n              message: result?.data?.updateTicketType?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (result.data?.updateTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateTicketType]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginVertical: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.extraForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <View style={{ width: \"100%\"}}>\n        <List.Subheader>\n          Compatible tickets\n        </List.Subheader>\n        {\n          data?.ticketTypes.map((ticket) =>\n            <Checkbox.Item\n              label={ticket.name!}\n              status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n                ? \"checked\"\n                : \"unchecked\"\n              }\n              onPress={\n                () => dispatch(actions.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n              }\n            />\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_EXTRA = gql`\n  mutation CreateExtra(\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    createExtra(input: {\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const [mutationCreateExtra, data] = useMutation<Mutation>(MUTATION_CREATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateExtra({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.createExtra?.extra) {\n          const { extra } = result.data.createExtra;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added extra ${extra.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateExtra]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket-percent\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation, Extra } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_EXTRA = gql`\n  mutation UpdateExtra(\n    $id: Int!,\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    updateExtra(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { extra: Extra }}>();\n  const extra = route.params!.extra;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(extra));\n  }, [extra?.id]);\n\n  const [mutationUpdateExtra, data] = useMutation<Mutation>(MUTATION_UPDATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateExtra({\n          variables: {\n            id: Number(state.original!.id!),\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.updateExtra?.extra) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateExtra]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket-percent\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport usePalette from '../../../hooks/usePalette';\nimport global from '../../../redux/global';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryExtra(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        altitude\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtrasScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // React.useEffect(() => {\n  //   if (route.name === \"PlanesScreen\") {\n  //     refetch();\n  //   }\n  // }, [route.name])\n \n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n    <View style={styles.container}>\n      <DataTable>\n        <DataTable.Header>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Cost</DataTable.Title>\n        </DataTable.Header>\n\n        { data?.extras?.map((extra) =>\n          <DataTable.Row>\n            <DataTable.Cell onPress={() => navigation.navigate(\"UpdateExtraScreen\", { extra })}>{extra.name}</DataTable.Cell>\n            <DataTable.Cell numeric>{extra.cost}</DataTable.Cell>\n          </DataTable.Row>\n        )}\n      </DataTable>\n      { !loading && !data?.extras?.length && (\n          <NoResults\n            title=\"No ticket addons\"\n            subtitle=\"You can add multiple addons to assign to tickets, e.g outside camera, or coach\"\n          />\n      )}\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateExtraScreen\")}\n        label=\"New ticket addon\"\n      />\n    </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport SettingsScreen from '../../screens/authenticated/settings/SettingsScreen';\nimport DropzoneSettingsScreen from '../../screens/authenticated/settings/DropzoneSettingsScreen';\nimport TicketTypeSettingsScreen from '../../screens/authenticated/ticket_types/TicketTypesScreen';\nimport CreatePlaneScreen from '../../screens/authenticated/planes/CreatePlaneScreen';\nimport UpdatePlaneScreen from '../../screens/authenticated/planes/UpdatePlaneScreen';\nimport UpdateDropzoneScreen from '../../screens/authenticated/dropzones/UpdateDropzoneScreen';\nimport PlanesScreen from '../../screens/authenticated/planes/PlanesScreen';\n\nimport CreateTicketTypeScreen from '../../screens/authenticated/ticket_types/CreateTicketTypeScreen';\nimport UpdateTicketTypeScreen from '../../screens/authenticated/ticket_types/UpdateTicketTypeScreen';\n\nimport CreateExtraScreen from '../../screens/authenticated/extras/CreateExtraScreen';\nimport UpdateExtraScreen from '../../screens/authenticated/extras/UpdateExtraScreen';\nimport ExtrasScreen from '../../screens/authenticated/extras/ExtrasScreen';\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  DropzoneSettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  CreateTicketTypeScreen: undefined;\n  UpdateTicketTypeScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"DropzoneSettingsScreen\" component={DropzoneSettingsScreen} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateTicketTypeScreen\" component={CreateTicketTypeScreen} options={{ title: \"New ticket type\" }} />\n      <Settings.Screen name=\"UpdateTicketTypeScreen\" component={UpdateTicketTypeScreen} options={{ title: \"Edit ticket type\" }}/>\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useNavigationState, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, ProgressBar } from 'react-native-paper';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport NoResults from '../../../components/NoResults';\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport { useAppDispatch, useAppSelector, usersActions } from '../../../redux';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function UsersScreen() {\n  const {global, usersScreen } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzone?.id),\n      search: usersScreen.searchText,\n    }\n  });\n\n  const navigation = useNavigation();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (usersScreen.isSearchVisible) {\n      dispatch(usersActions.setSearchVisible(false));\n    }\n  }, [isFocused]);\n\n  return (\n    <View style={styles.container}>\n      <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n      \n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n        <List.Item\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() => <List.Icon icon=\"account\" />}\n          onPress={() => navigation.navigate(\"UserProfileScreen\", { userId: edge?.node?.id })}\n        />\n      )}\n    </View>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import React from \"react\";\nimport { Appbar, List, TextInput } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql } from \"@apollo/client\";\nimport { useAppDispatch, useAppSelector } from \"../../../redux\";\nimport { StyleSheet, View } from \"react-native\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\n\n\n\ninterface ISearchableAppBar extends StackHeaderProps {\n  searchVisible: boolean;\n  searchText: string;\n  setSearchVisible(visible: boolean): void;\n  onSearch(text: string): void;\n}\n\n\nfunction AppBar({ navigation, previous, scene, onSearch, searchText, searchVisible, setSearchVisible }: ISearchableAppBar) {\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  return (\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      {searchVisible ? <Appbar.BackAction onPress={() => setSearchVisible(false)} /> : null}\n      {searchVisible\n        ? <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              value={searchText}\n              onChangeText={(text) => onSearch(text)}\n            />\n          </View>\n        : <Appbar.Content title={scene.descriptor.options.title} />\n      }\n      <MaterialIcons\n        name=\"search\"\n        onPress={() => setSearchVisible(!searchVisible)}\n        color=\"#FFFFFF\"\n        size={24}\n        style={styles.icon}\n      />\n    </Appbar.Header>\n  );\n}\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    flexGrow: 1\n  },\n  input: {\n    backgroundColor: \"transparent\",\n    height: \"100%\",\n    color: \"white\"\n  },\n  icon: {\n    marginHorizontal: 8\n  },\n})\n\nexport default AppBar;","import React from \"react\";\nimport { Checkbox, TextInput } from \"react-native-paper\";\nimport { ChecklistItem } from \"../../../graphql/schema\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport DatePicker from '../../DatePicker';\n\ninterface IChecklistItem {\n  value: string;\n  onChange(value: string): void;\n  config: ChecklistItem;\n}\n\nexport default function RigInspectionItem(props: IChecklistItem) {\n\n  const canInspect = useRestriction(\"actAsRigInspector\");\n\n  if (props.config?.valueType && props.config?.valueType === \"string\") {\n    return (\n      <TextInput\n        mode=\"outlined\"\n        disabled={!canInspect}\n        style={{ marginVertical: 8 }}\n        value={props.value}\n        onChangeText={(text) => props.onChange(text)}\n        label={props.config.name || \"\"}\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"boolean\") {\n    return (\n      <Checkbox.Item\n        label={props.config.name || \"\"}\n        disabled={!canInspect}\n        style={{ marginVertical: 8 }}\n        status={props.value === \"true\"\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => props.onChange(props.value === \"true\" ? \"false\" : \"true\")\n        }\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"integer\") {\n    return (\n      <TextInput\n        disabled={!canInspect}\n        value={props.value}\n        mode=\"outlined\"\n        onChangeText={(text) => props.onChange(text)}\n        label={props.config.name || \"\"}\n        keyboardType=\"number-pad\"\n        style={{ marginVertical: 8 }}\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"date\") {\n    return (\n      <DatePicker\n        disabled={!canInspect}\n        timestamp={Number(props.value)}\n        onChange={(time) => props.onChange(time.toString())}\n        label={props.config.name || \"\"}\n        \n      />\n    )\n  }\n  return null;\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport { useAppSelector, useAppDispatch, rigInspectionForm } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport RigInspectionItem from './RigInspectionItem';\n\n\nconst QUERY_RIG_INSPECTION = gql`\n  query RigInspection($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      rigInspectionChecklist {\n        checklistItems {\n          id\n          isRequired\n          name\n          valueType\n          description\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigForm() {\n  const { global: globalState, rigInspectionForm: state } = useAppSelector(state => state);\n\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTION, {\n    variables: {\n      dropzoneId: Number(globalState?.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      {\n        data?.dropzone?.rigInspectionChecklist?.checklistItems?.map((item) => {\n          const currentValue = state.fields.find((value) => value?.checklistItem.id === item.id);\n\n          return (\n            <RigInspectionItem\n              config={item}\n              value={currentValue?.value || \"\"}\n              onChange={(value) =>\n                dispatch(\n                  rigInspectionForm.setItem({ checklistItem: item, value, id: currentValue?.id || null })\n                )\n              }\n            />\n          )\n        })\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useRoute } from '@react-navigation/core';\nimport { format } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Button, Card, List } from 'react-native-paper';\nimport RigInspectionForm from \"../../../components/forms/rig_inspection/RigInspectionForm\";\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { DropzoneUser, Mutation, Query, Rig } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { rigInspectionForm, snackbarActions, useAppDispatch, useAppSelector } from '../../../redux';\n\nconst QUERY_RIG_INSPECTIONS = gql`\n  query RigInspections($dropzoneUserId: Int!, $dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        rigInspections {\n          id\n          rig {\n            id\n          }\n          inspectedBy {\n            id\n            name\n          }\n          checklistValues {\n            id\n            value\n            checklistItem {\n              id\n              name\n              valueType\n              isRequired\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_CREATE_RIG_INSPECTION = gql`\n  mutation CreateRigInspection(\n    $dropzoneId: Int,\n    $rigId: Int,\n  ) {\n    createRigInspection(input: {\n      attributes: {\n        dropzoneId: $dropzoneId,\n        rigId: $rigId,\n      }\n    }) {\n      rigInspection {\n        id\n        inspectedBy {\n          id\n          name\n        }\n        rig {\n          id\n        }\n        checklistValues {\n          id\n          value\n          checklistItem {\n            id\n            name\n            valueType\n            isRequired\n            description\n          }\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\n\n\nconst MUTATION_SET_VALUE = gql`\n  mutation SetValue(\n    $checklistItemId: Int,\n    $rigInspectionId: Int,\n    $value: String,\n  ) {\n    updateChecklistValue(input: {\n      attributes: {\n        checklistItemId: $checklistItemId,\n        rigInspectionId: $rigInspectionId,\n        value: $value\n      }\n    }) {\n      checklistValue {\n        id,\n        value,\n        checklistItem {\n          id\n          name\n          valueType,\n          description\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function RigInspectionScreen() {\n  const { global: globalState, rigInspectionForm: state } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const route = useRoute<{ key: string, name: string, params: { rig: Rig, dropzoneUserId: number }}>();\n  const { rig, dropzoneUserId } = route.params;\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTIONS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone!.id),\n      dropzoneUserId: dropzoneUserId,\n    }\n  });\n\n  const canInspect = useRestriction(\"actAsRigInspector\");\n  const [mutationCreateRigInspection] = useMutation<Mutation>(MUTATION_CREATE_RIG_INSPECTION);\n  const [mutationSetValue] = useMutation<Mutation>(MUTATION_SET_VALUE);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.dropzoneUser?.rigInspections?.some((inspection) => inspection.rig?.id.toString() === rig.id.toString())) {\n      const inspection = data?.dropzone?.dropzoneUser?.rigInspections?.find((inspection) => inspection.rig?.id === rig.id);\n      console.log({ inspection });\n      dispatch(\n        rigInspectionForm.setOriginal(\n          inspection!\n        )\n      )\n    }\n  }, [JSON.stringify(data?.dropzone?.dropzoneUser?.rigInspections)]);\n\n  const createRigInspection = React.useCallback(async () => {\n    try {\n      let rigInspectionId = state.original?.id;\n      if (!rigInspectionId) {\n        const result = await mutationCreateRigInspection({\n          variables: { dropzoneId: Number(globalState.currentDropzone!.id), rigId: Number(rig.id) }\n        });\n\n        rigInspectionId = result?.data?.createRigInspection?.rigInspection!.id;\n      }\n\n      await Promise.all(\n        state.fields.map((field) =>\n          mutationSetValue({\n            variables: {\n              rigInspectionId: Number(rigInspectionId),\n              checklistItemId: Number(field.checklistItem.id),\n              value: field.value\n          }})\n        )\n      );\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    }\n  }, [JSON.stringify(state.fields), state?.original?.id, globalState?.currentDropzone?.id]);\n\n  return (\n    <ScrollableScreen>\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Rig\" />\n        <Card.Content>\n          <List.Item\n            title=\"Make\"\n            description={rig.make}\n          />\n          <List.Item\n            title=\"Model\"\n            description={rig.model}\n          />\n          <List.Item\n            title=\"Serial\"\n            description={rig.serial}\n          />\n          <List.Item\n            title=\"Repack due\"\n            description={\n              rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"\n            }\n          />\n        </Card.Content>\n      </Card>\n\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Inspection\" />\n\n        <Card.Content>\n          <RigInspectionForm />\n        </Card.Content>\n\n        <Card.Actions>\n          <Button disabled={!canInspect} mode=\"contained\" onPress={() => createRigInspection()} style={{ width: \"100%\"}}>\n            Mark as inspected\n          </Button>\n        </Card.Actions>\n      </Card>\n    </ScrollableScreen>\n  );\n}\n\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport UsersScreen from '../../screens/authenticated/users/UsersScreen';\nimport SearchableAppBar from '../../screens/authenticated/users/AppBar';\nimport RigInspectionScreen from '../../screens/authenticated/rig/RigInspectionScreen';\nimport { useAppDispatch, useAppSelector, usersActions } from '../../redux';\nimport ProfileScreen from '../../screens/authenticated/profile/ProfileScreen';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: undefined;\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.usersScreen);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(usersActions.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(usersActions.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { BottomNavigation, useTheme } from 'react-native-paper';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport * as React from 'react';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport PackingTab from \"./tabs/packing\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useColorScheme from '../hooks/useColorScheme';\nimport useRestriction from '../hooks/useRestriction';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(\"readUser\");\n  const canCreatePacks = useRestriction(\"createPackjob\");\n  const canManageDropzone = useRestriction(\"updateDropzone\");\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n      { false && canCreatePacks && (\n        <BottomTab.Screen\n          name=\"Packing\"\n          component={PackingTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"parachute\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { canManageDropzone && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { globalActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation } from '@react-navigation/core';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) =>\n          <Card\n            style={{\n              width: (Dimensions.get(\"window\").width / 2) - 32,\n              margin: 8\n            }}\n            onPress={async ()=> {\n              if (item?.node) {\n                dispatch(\n                  globalActions.setDropzone(item.node)\n                );\n              }\n            }}\n          >\n            <Card.Cover source={{ uri: item?.node?.banner as string }} />\n            <Card.Content>\n              <Title>{item?.node?.name}</Title>\n            </Card.Content>\n          </Card>\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(snackbarActions.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(globalActions.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from '../../../components/notifications';\nimport { useAppSelector, useAppDispatch, globalActions, snackbarActions } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Mutation } from '../../../graphql/schema';\n\nconst { actions } = slice;\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              globalActions.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              globalActions.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(snackbarActions.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign in</Text>\n\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button style={styles.button} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 10,\n  },\n  button: {\n    marginTop: 10,\n    width: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"./slice\";\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.signup);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          globalActions.setCredentials(payload.credentials)\n        );\n        dispatch(\n          globalActions.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen contentContainerStyle={{ padding: 48, alignItems: \"center\" }}>\n      <Text style={styles.title}>Sign up</Text>\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", parseFloat(newValue)]))}\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          onPress={() =>\n            onSignUp({\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Notifications from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\n\n\n\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  return (\n    <Apollo>\n      <MaterialProvider theme={state.theme}>\n        <SafeAreaProvider>\n          <NavigationContainer\n            linking={LinkingConfiguration}\n            theme={state.theme}>\n            <RootNavigator />\n          </NavigationContainer>\n\n          <StatusBar />\n          <Notifications />\n        </SafeAreaProvider>\n    </MaterialProvider>\n    </Apollo>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}