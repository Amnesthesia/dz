{"version":3,"sources":["node_modules/@babel/runtime/helpers/taggedTemplateLiteralLoose.js","IconButton.tsx","PortalConsumer.tsx","Portal.tsx","getContrastingColor.tsx","FAB.tsx","FABGroup.tsx","index.ts","StyledText.tsx","Menu.tsx","Paragraph.tsx","CrossFadeIcon.tsx","constants.tsx","MenuItem.tsx"],"names":["module","exports","strings","raw","slice","__esModule","styles","container","alignItems","justifyContent","overflow","margin","disabled","opacity","withTheme","color","size","animated","rest","iconColor","customColor","theme","rippleColor","IconComponent","buttonSize","borderless","centered","onPress","style","width","height","borderRadius","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","top","left","bottom","right","source","a","async","this","Promise","key","props","manager","mount","componentDidUpdate","checkManager","update","componentWillUnmount","unmount","render","React","settings","value","Portal","PortalHost","getContrastingColor","input","light","FAB","visible","uppercase","visibility","Animated","current","scale","toValue","duration","useNativeDriver","disabledColor","StyleSheet","backgroundColor","accent","foregroundColor","transform","pointerEvents","onLongPress","testID","label","small","icon","loading","selectable","medium","elevation","touchable","standard","extended","paddingHorizontal","content","flexDirection","marginHorizontal","uppercaseLabel","textTransform","FABGroup","colorProp","backdrop","animations","actions","open","animation","close","onStateChange","colors","labelColor","backdropOpacity","inputRange","outputRange","opacities","scales","prevActions","setPrevActions","safeArea","it","i","surface","expanded","fab","marginBottom","marginTop","absoluteFillObject","paddingVertical","marginVertical","item","Group","text","textAlign","textColor","font","writingDirection","I18nManager","EASING","Easing","rendered","menuLayout","anchorLayout","opacityAnimation","scaleAnimation","x","y","anchor","resolve","Platform","el","focusableNode","findNodeHandle","node","e","BackHandler","Dimensions","document","windowLayout","requestAnimationFrame","easing","finished","prevProps","updateVisibility","removeListeners","overlayAccessibilityLabel","additionalVerticalValue","android","default","scaleTransforms","scaleX","scaleY","positionTransforms","translateX","scrollableMenuHeight","translateY","shadowMenuContainerStyle","positionStyle","isCoordinate","ref","collapsable","onDismiss","absoluteFill","accessibilityViewIsModal","onAccessibilityEscape","nextProps","prevState","Menu","MenuItem","statusBarHeight","wrapper","position","shadowMenuContainer","alpha","family","fontSize","lineHeight","letterSpacing","fade","currentIcon","setPreviousIcon","setCurrentIcon","isValidIcon","isEqualIcon","previousIcon","opacityPrev","opacityNext","rotatePrev","rotateNext","rotate","estimatedStatusBarHeight","NativeModules","APPROX_STATUSBAR_HEIGHT","ios","useTheme","titleColor","row","numberOfLines","minWidth","maxWidth","title","widthWithIcon"],"mappings":"2EASAA,EAAOC,QATP,SAAqCC,EAASC,GAM5C,OALKA,IACHA,EAAMD,EAAQE,MAAM,IAGtBF,EAAQC,IAAMA,EACPD,GAITF,EAAOC,QAAiB,QAAID,EAAOC,QAASD,EAAOC,QAAQI,YAAa,G,8UC+ExE,IAkDMC,EAAS,WAAkB,CAC/BC,UAAW,CACTC,WADS,SAETC,eAFS,SAGTC,SAHS,SAITC,OAAQ,GAEVC,SAAU,CACRC,QAAS,OAIEC,iBA9DI,SAAC,GAWN,IAXM,EAWP,EAXO,OAWP,EATXC,MASW,IARXC,YAQW,MAXO,GAWP,EAXO,EAWP,EAXO,qBAWP,EAXO,WAWP,EAXO,QAWP,IAJXC,gBAIW,SAXO,EAWP,EAXO,QAWP,EAXO,MAUfC,EACQ,oGACLC,EACJ,qBAAOC,EAAP,EAAmDC,SADrD,KAEMC,EAAcP,wBAApB,SACMQ,EAAgBN,EAAQ,IAA9B,IACMO,EAAN,IAAmBR,EACnB,OACE,uBACES,YADF,EAEEC,UAFF,EAGEC,QAHF,EAIEL,YAJF,EAKEM,MAAO,CACLtB,EADK,UAEL,CAAEuB,MAAF,EAAqBC,OAArB,EAAyCC,aAAcP,EAAa,GACpEZ,GAAYN,EAHP,SALT,GAWE0B,mBAXF,EAaEC,oBAAqBrB,EAAW,CAAC,SAAJ,YAb/B,SAcEsB,2BAdF,SAeEC,kBAfF,SAgBEC,mBAAoB,CAAExB,YACtBA,SAjBF,EAkBEyB,QACE,cACI,CAAEC,IAAF,GAAWC,KAAX,GAAqBC,OAArB,GAAiCC,MAAO,IACxC,CAAEH,IAAF,EAAUC,KAAV,EAAmBC,OAAnB,EAA8BC,MAAO,IArB7C,GAyBE,yBACE,mBAAe1B,MAAf,EAAiC2B,OAAjC,EAA+C1B,KAAMA,U,2hBC7H9C,E,uLAAoD,0K,6CACjE,oBAAA2B,EAAAC,OAAA,uDACEC,KADwB,eAA1B,WAAAF,EAAA,MAIQG,QAAN,WAJF,OAMED,KAAKE,IAAMF,KAAKG,MAAMC,QAAQC,MAAML,KAAKG,MAAzC,UANF,8D,gCASAG,WACEN,KAAKO,eAELP,KAAKG,MAAMC,QAAQI,OAAOR,KAA1B,IAAoCA,KAAKG,MAAzC,Y,kCAGFM,WACET,KAAKO,eAELP,KAAKG,MAAMC,QAAQM,QAAQV,KAA3B,O,0BAKF,WACE,IAAKA,KAAKG,MAAV,QACE,MAAM,UACJ,kR,oBAONQ,WACE,OAAO,S,GAnCiCC,a,gSC+B5C,E,iRAIED,WAAU,IAAD,EACqBX,KAA5B,MAAM,EADC,EACD,SAAYxB,EADX,EACWA,MAElB,OACE,0BACIqC,YAAD,OACC,gBAAC,IAAD,eACIT,YAAD,OACC,mBAAgBA,QAASA,GACvB,qBAAkBU,MAAOD,GACvB,qBAAerC,MAAOA,GAPpC,e,GAPiBoC,a,EAAfG,E,WAEUC,I,6FAuBD/C,gBAAf,I,0MC7De,SAASgD,EAAoB,EAA7B,KAKb,wBAAWC,GACFhD,mBAGFiD,E,gxBC4GT,IAAMC,EAAM,SAAC,GAkBC,IAlBD,EAkBA,EAlBA,QAkBA,EAlBA,OAkBA,EAlBA,MAkBA,IAdXjC,0BAcW,MAlBA,EAkBA,EAlBA,EAkBA,EAlBA,mBAkBA,IAZXf,gBAYW,SAlBA,EAkBA,EAXXF,MAPW,EAkBA,EAlBA,WAkBA,EAlBA,UAkBA,EAlBA,cAkBA,EAlBA,QAkBA,EAlBA,MAkBA,IALXmD,eAKW,aAJXC,iBAIW,SAlBA,EAkBA,EAlBA,UAkBA,EAlBA,OAiBRjD,EACQ,yLACMkD,EAAeX,SAC9B,IAAIY,IAAJ,MAAmBH,EAAO,EAD5B,IAAQI,QAGAC,EAAUlD,EAAlB,UAAQkD,MAERd,aAAgB,WACd,EACEY,aAA4B,CAC1BG,QAD0B,EAE1BC,SAAU,IAFgB,EAG1BC,iBAAiB,IAHnBL,QAMAA,aAA4B,CAC1BG,QAD0B,EAE1BC,SAAU,IAFgB,EAG1BC,iBAAiB,IAHnBL,UAMD,CAACH,EAAQ,EAdZT,IAgBA,IAWA,EAXMlC,EAAgBN,EAAQ,IAA9B,IAEM0D,EAAgB5D,IAAMM,WAANN,sBAAtB,SAxBW,GA+BN6D,gBAFL,IACEC,uBA9BS,MA8BSjE,EAAQ,EAAmBS,SAAayD,OA9BjD,EAoCTC,EADF,qBAAW3D,EACT2D,EACK,EACahE,IAAMM,WAANN,sBAAlBgE,SAKkBjB,EAAoB,EAAD,IAArCiB,sBAOF,IAAMzD,EAAcP,wBAApB,SAEA,OACE,4BAEEa,MACE,CACE,CACEiD,kBACAhE,QAFF,EAGEmE,UAAW,CACT,CACET,MAAOH,KAIb9D,EAVF,UAWEM,GAAYN,EAXd,SAHJ,GAkBE2E,cAAef,EAAO,OAAY,SAElC,qBACEzC,YADF,EAEEE,QAFF,EAGEuD,YAHF,EAIE5D,YAJF,EAKEV,SALF,EAMEoB,mBANF,EAQEC,oBAAqBrB,EAAW,CAAC,SAAJ,YAR/B,SASEsB,2BATF,SAUEC,kBAVF,SAWEC,mBAAkB,OAAE,GAAF,IAA2BxB,aAC7CgB,MAAOtB,EAZT,UAaE6E,OAAQA,GAER,qBACEvD,MAAO,CACLtB,EADK,QAEL8E,EAAQ9E,EAAH,SAAqB+E,EAAQ/E,EAAH,MAAkBA,EAHrD,UAKE2E,cAAc,QAEbK,IAAA,IAAQC,EACP,mBAAe7C,OAAf,EAA6B1B,KAA7B,GAAuCD,MAAOgE,IARlD,KAUGQ,EACC,qBAAmBvE,KAAnB,GAA6BD,MAAOgE,IAXxC,KAaGK,EACC,qBACEI,YADF,EAEE5D,MAAO,CACLtB,EADK,MAEL6D,GAAa7D,EAFR,kBAGHS,MAAF,GAA6BM,QAAYoE,UANzC,GAjDd,SAmEInF,EAASsE,EAAA,SAAkB,CAC/BrE,UAAW,CACTwB,aADS,GAET2D,UAAW,GAEbC,UAAW,CACT5D,aAAc,IAEhB6D,SAAU,CACR9D,OADQ,GAERD,MAAO,IAETwD,MAAO,CACLvD,OADK,GAELD,MAAO,IAETgE,SAAU,CACR/D,OADQ,GAERgE,kBAAmB,IAErBC,QAAS,CACPC,cADO,MAEPxF,WAFO,SAGPC,eAAgB,UAElB2E,MAAO,CACLa,iBAAkB,GAEpBC,eAAgB,CACdC,cAAe,aAEjBvF,SAAU,CACR8E,UAAW,KAIA5E,cAAf,G,GAGqBA,YAArB,G,4nBCpJA,IAAMsF,EAAW,SAAC,GAaJ,IAbI,EAaL,EAbK,UAaL,EAbK,OAaL,EAbK,OAaL,EAbK,UAaL,EAbK,qBAaL,EAbK,QAaL,EAbK,QAaL,EAbK,WAaL,EAbK,UAaL,EAbK,SAaL,EAbK,cAYTC,EACI,EADXtF,MAEiBuF,EAAa7C,SAC5B,IAAIY,IAAJ,MADF,IAAQC,QAGFiC,EAAa9C,SACjB+C,OAAY,kBAAM,IAAInC,IAAJ,MAAmBoC,EAAI,EAD3C,OAJW,EAQ2BhD,WAAtC,MARW,WAQL,EARK,KAQL,EARK,KAqBHc,EAAUlD,EAAlB,UAAQkD,MAERd,aAAgB,WACd,EACEY,aAAkB,CAChBA,EAAA,WAA0B,CACxBG,QADwB,EAExBC,SAAU,IAFc,EAGxBC,iBAAiB,IAEnBL,YACE,GADFA,EAEEkC,EAAA,aACQG,YAAD,OACHrC,EAAA,WAA2B,CACzBG,QADyB,EAEzBC,SAAU,IAFe,EAGzBC,iBAAiB,OAb3BL,qBAoBAA,cACEA,EAAA,WAA0B,CACxBG,QADwB,EAExBC,SAAU,IAFc,EAGxBC,iBAAiB,KAJrBL,WAMKkC,EAAA,aAAwBG,YAAD,OACxBrC,EAAA,WAA2B,CACzBG,QADyB,EAEzBC,SAAU,IAFe,EAGzBC,iBAAiB,UAVvBL,UAeD,CAACoC,EAAK,EAAN,EArCHhD,IAuCA,IAAMkD,EAAQ,kBAAMC,EAAc,CAAEH,MAAM,KAIlCI,EAAR,EAAQA,OAEFC,EAAazF,OACfwF,EADexF,KAEfN,IAAM8F,EAAN9F,sBAFJ,SAGMgG,EAAkBN,EACpBH,EAAA,YAAqB,CACnBU,WAAY,CAAC,EAAE,GADI,GAEnBC,YAAa,CAAC,EAAE,EAAH,KAHnB,EAOMC,EAAYX,EAAlB,QACMY,EAASD,EAAA,KAAerG,YAAD,OAC3B4F,EACI5F,EAAA,YAAoB,CAClBmG,WAAY,CAAC,EADK,GAElBC,YAAa,CAAC,GAAI,KAJ1B,KAgBA,OAPIT,mBAAmBY,QAAnBZ,IAAmBY,OAAnBZ,EAAmBY,EAAvB,UACEb,UAAqBC,OACnB,qBAAUD,cAAyB,IAAIlC,IAAJ,MAAmBoC,EAAI,EAD5DF,MAGAc,MAIA,qBAAMpC,cAAN,WAA+BrD,MAAO,CAACtB,EAAD,cACpC,qBAA0BqB,QAASgF,GACjC,gBAACtC,EAAA,EAAD,MACEY,cAAewB,EAAI,OADrB,OAEE7E,MAAO,CACLtB,EADK,SAEL,CACEO,QADF,EAEEgE,gBAAiBgC,EAAOP,cAKhC,qBAAcrB,cAAd,WAAuCrD,MAAOtB,EAAOgH,UACnD,qBAAMrC,cAAewB,EAAI,WAAgB,QACtCD,OAAY,qBACX,qBACEzD,IADF,EAEEnB,MAAO,CACLtB,EADK,KAEL,CACE2F,iBACE,qBAAOsB,EAAP,OAAmCA,EAAnC,SAAmD,KAGzDtC,cAAewB,EAAI,WAAgB,QAElCc,SACC,yBACE,qBACE3F,MACE,CACEtB,EADF,MAEE,CACE0E,UAAW,CAAC,CAAET,MAAO4C,EAAOK,KAC5B3G,QAASqG,EAAUM,KAIzB7F,QAAS,WACP4F,YACAZ,KAEF3E,mBACEuF,mCACIA,EADJA,mBAEIA,EAjBR,MAoBEtF,oBApBF,SAqBEC,2BArBF,SAsBEC,kBAAkB,UAElB,qBAAMP,MAAO,CAAEb,MAAO+F,IAAeS,EArC7C,SAyCE,mBACElC,MAAO,qBAAOkC,EAAP,OAAkCA,EAAlC,MACPjC,KAAMiC,EAFR,KAGExG,MAAOwG,EAHT,MAIE3F,MACE,CACE,CACEoD,UAAW,CAAC,CAAET,MAAO4C,EAAOK,KAC5B3G,QAASqG,EAFX,GAGErC,gBAAiBxD,SAAaoG,SAEhCF,EAXN,OAcE5F,QAAS,WACP4F,YACAZ,KAEF3E,mBACE,qBAAOuF,EAAP,mBACIA,EADJ,mBAEIA,EArBR,MAwBEtF,oBAxBF,SAyBEC,2BAzBF,SA0BEC,kBA1BF,SA2BEgD,OAAQoC,EA3BV,OA4BErD,QAASuC,SAKjB,mBACE9E,QAAS,WACPA,eAAO,IAAPA,OA5HWiF,EAAc,CAAEH,MAAOA,KA+HpCnB,KALF,EAMEvE,MANF,EAOEiB,mBAPF,EASEC,oBATF,SAUEC,2BAVF,SAWEC,kBAXF,SAYEC,mBAAoB,CAAEsF,SAAUjB,GAChC7E,MAAO,CAACtB,EAAD,IAbT,GAcE4D,QAdF,EAeEiB,OAAQA,OAOlBiB,0BAEetF,kBAAf,GAOMR,GAJoBQ,YAA1B,GAIe8D,EAAA,SAAkB,CAC/B0C,SAAU,CACR9G,WAAY,YAEdD,UAAU,OACLqE,IADM,oBAAF,IAEPnE,eAAgB,aAElBkH,IAAK,CACH1B,iBADG,GAEH2B,aAFG,GAGHC,UAAW,GAEbvB,SAAS,KACJ1B,IAAWkD,oBAEhB1C,MAAO,CACLrD,aADK,EAEL+D,kBAFK,GAGLiC,gBAHK,EAILC,eAJK,EAKL/B,iBALK,GAMLP,UAAW,GAEbuC,KAAM,CACJL,aADI,GAEJ5B,cAFI,MAGJvF,eAHI,WAIJD,WAAY,aCnZVyD,EAAM,MAGV,CAEEiE,MAAO9B,IAIX,O,84BCEA,IAiBM9F,EAAS,WAAkB,CAC/B6H,KAAM,CACJC,UAAW,UAIAtH,iBAvBI,SAAC,GAAqD,IAArD,EAAoD,EAApD,QAAoD,EAApD,QAAoD,EAApD,SAAoD,EAApD,MAAkCI,EAAkB,0CAChEmH,EAAYtH,IAAMM,SAANN,qBAAlB,SACMuH,EAAOjH,QAAb,GACMkH,EAAmBC,gBAAzB,MAEA,OACE,4BAEE5G,MAAO,CACLtB,EADK,UAEHS,MAAF,MAFK,IAEwBwH,qBAFxB,U,wwCCwDb,IAIME,EAASC,mBAAf,GAgDA,E,uLAAiD,kKAiBvC,CACNC,SAAU,QADJ,QAENrG,IAFM,EAGNC,KAHM,EAINqG,WAAY,CAAE/G,MAAF,EAAYC,OAAQ,GAChC+G,aAAc,CAAEhH,MAAF,EAAYC,OAAQ,GAClCgH,iBAAkB,IAAIzE,IAAJ,MANZ,GAON0E,eAAgB,IAAI1E,IAAJ,QAAqB,CAAE2E,EAAF,EAAQC,EAAG,MAxBH,uEAwCvBC,YAAD,OACpBzF,iBAAD,sBACA,OAAOyF,QAAP,IAAOA,OAAP,EAAOA,EAAP,IA1C6C,kBA2C7C,OAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAP,MA3C6C,8BA6CnB,kBAC1B,aAA8BC,YACxB,EAAJ,MACE,wBAA0B,kBACxBA,EAAQ,CAAEH,IAAGC,IAAGpH,QAAOC,oBAjDgB,gCAsDjB,kBAC5B,aAA8BqH,YAAa,IACjCD,EAAW,EAAnB,MAAQA,OACJ,eAAJ,GACEC,EAAQ,CAAEH,EAAGE,EAAL,EAAeD,EAAGC,EAAlB,EAA4BrH,MAA5B,EAAsCC,OAAQ,IAIpD,EAAJ,QACE,0BAA4B,kBAC1BqH,EAAQ,CAAEH,IAAGC,IAAGpH,QAAOC,oBAhEgB,6BAqEpB,oBAAAa,EAAAC,OAAA,kEAAAD,EAAA,MAGnBG,QAAN,WAHyB,OAKrB,QAAJ,QACE,SAEA,SARuB,+DArEoB,sBAiF3B,iBAAMsG,gBAAyB,aAjFJ,mCAmFlBC,YAC3B,GAAIA,GAAM,EAAV,YAA4B,CAI1B,IACMC,EADYC,YAAlB,GACsBC,cAAtB,4EAKAF,eAAa,IAAbA,iBA9F2C,0BAkGvB,WAItB,OAHI,QAAJ,SACE,qBAEK,KAtGsC,2BAyGrBG,YACxB,WAAIA,OACF,uBA3G2C,4BA+GrB,WACxBC,yCAAkD,EAAlDA,eACAC,8BAAsC,EAAtCA,eAEA,eAAoBC,kCAAmC,EAAvD,mBAnH6C,4BAsHrB,WACxBF,4CAAqD,EAArDA,eACAC,iCAAyC,EAAzCA,eAEA,eACEC,qCAAsC,EADxC,mBA1H6C,iBA8HhC,kCAAAjH,EAAAC,OAAA,uDACPiH,EAAeF,QAArB,UADa,WAAAhH,EAAA,MAE4BG,YAAY,CACnD,EADmD,oBAEnD,EAJuB,yBAAZ,8BAEP,EAFO,KAEP,EAFO,KAcV+G,EAAD,OACCA,EADD,QAECjB,EAFD,OAGCA,EAHD,SAIEC,EAAD,OAAwB,eAAkB,QAJ3C,WAKEA,EAAD,QAAyB,eAAkB,QAN9C,SAba,wBAqBXiB,sBAAsB,EAAtBA,MArBW,2BAyBb,YACE,iBAAO,CACLvH,KAAMsG,EADD,EAELvG,IAAKuG,EAFA,EAGLA,aAAc,CACZ/G,OAAQ+G,EADI,OAEZhH,MAAOgH,EAAahH,OAEtB+G,WAAY,CACV/G,MAAO+G,EADG,MAEV9G,OAAQ8G,EAAW9G,YAGvB,WACE,oBADI,IAGI4E,EAAc,QAAtB,MAAQA,UACRrC,aAAkB,CAChB,WAAgB,QAAhB,eAA2C,CACzCG,QAAS,CAAEwE,EAAGJ,EAAL,MAAuBK,EAAGL,EAAW9G,QAC9C2C,SA7NZ,IA6N2CiC,EAFU,MAGzCqD,OAHyC,EAIzCrF,iBAAiB,IAEnB,WAAgB,QAAhB,iBAA6C,CAC3CF,QAD2C,EAE3CC,SAnOZ,IAmO2CiC,EAFY,MAG3CqD,OAH2C,EAI3CrF,iBAAiB,MAXrBL,OAaS,YAAkB,EAAf2F,UAER,oBAAuB,EAAvB,YAzDK,gEA9HgC,iBA8LhC,WACb,oBADmB,IAGXtD,EAAc,QAAtB,MAAQA,UACRrC,WAAgB,QAAhBA,iBAA6C,CAC3CG,QAD2C,EAE3CC,SAtPN,IAsPqCiC,EAFY,MAG3CqD,OAH2C,EAI3CrF,iBAAiB,IAJnBL,OAKS,YAAkB,EAAf2F,WAER,WAAc,CAAEpB,WAAY,CAAE/G,MAAF,EAAYC,OAAQ,GAAK6G,UAAU,IAC/D,gCAAmC,CAAEK,EAAF,EAAQC,EAAG,IAC9C,oBAAuB,EAAvB,eA3MyC,E,8CA2B/C9F,SAAkB,GACZ8G,YAAsBpH,KAAKG,MAA/B,SACEH,KAAKqH,qB,kCAIT5G,WACET,KAAKsH,oB,oBA8KP3G,WAAU,IAAD,SAWHX,KAVJ,MAAM,EADC,EACD,UADC,EACD,SADC,EACD,eADC,EACD,QADC,EACD,WADC,EACD,QADC,EACD,kBADC,EACD,UASJuH,EAVK,EAULA,0BAVK,EAmBHvH,KANJ,MAAM,EAbC,EAaD,WAbC,EAaD,aAbC,EAaD,eAbC,EAaD,iBAKJkG,EAlBK,EAkBLA,eAlBK,EAqBalG,KArBb,MAqBH,EArBG,EAqBH,KAAQP,EArBL,EAqBKA,IAGN+H,EAA0B,WAAgB,CAC9CC,QAD8C,EAE9CC,QAAS,IAGLC,EAAkB,CACtB,CACEC,OAAQ1B,EAAA,cAA6B,CACnC/B,WAAY,CAAC,EAAG4B,EADmB,OAEnC3B,YAAa,CAAC,EAAE,MAGpB,CACEyD,OAAQ3B,EAAA,cAA6B,CACnC/B,WAAY,CAAC,EAAG4B,EADmB,QAEnC3B,YAAa,CAAC,EAAE,OAKhB4C,EAAeF,QA5Cd,UA+CDgB,EA/CC,GAkDHpI,GAAQsH,QAAqBjB,EAArBiB,MAtThB,GAuTMc,OAAwB,CACtBC,WAAY7B,EAAA,cAA6B,CACvC/B,WAAY,CAAC,EAAG4B,EADuB,OAEvC3B,YAAa,EAAG2B,QAAH,SAKbrG,EA/TV,IAgUQA,EAhUR,KAmUMoI,OAAwB,CACtBC,WAAY7B,EAAA,cAA6B,CACvC/B,WAAY,CAAC,EAAG4B,EADuB,OAEvC3B,YAAa,CAAC2B,QAAD,UAIjBrG,GAAQsG,QAAqBD,EAA7BrG,OAEqBqG,EAVhB,MAYOiB,QA9UlB,IA+UQtH,EAAOsH,QA/Uf,EA+UoDjB,EAA5CrG,QAMJ,IAAIsI,EAjFG,GAsFLvI,GACEuH,SACEjB,EADFiB,OA3VR,EA0VMvH,GAMAA,GAAOuH,SART,EAWEgB,EACEhB,WApWR,EAmWMgB,EAIAvI,GACEuH,SACEjB,EADFiB,OAxWR,EAuWMvH,GAMAA,GAAOuH,SANPvH,GAQAA,GACEsG,SACEC,EADFD,OAhXR,EAqWW,IAiBLiC,EACEvI,EAAMuG,EAANvG,OAvXR,EAsXMuI,GAKFA,EACEA,EAAuBhB,SAAsB,GACzCA,SAAsB,GAzHrB,EAgILvH,GACEuH,SACEjB,EADFiB,OArYR,EAoYMvH,GAMCA,GACCuH,SACEjB,EADFiB,OA3YR,EA0YOvH,GAMCA,GAAOuH,SAdX,IAgBEc,OAAwB,CACtBG,WAAY/B,EAAA,cAA6B,CACvC/B,WAAY,CAAC,EAAG4B,EADuB,QAEvC3B,YAAa,GAAI4D,GAAwBjC,EAAzB,QAAH,SAKbtG,EA1ZV,IA2ZQA,EA3ZR,KA8ZMqI,OAAwB,CACtBG,WAAY/B,EAAA,cAA6B,CACvC/B,WAAY,CAAC,EAAG4B,EADuB,QAEvC3B,YAAa,EAAE4D,GAAwBjC,EAAzB,QAAD,UAIjBtG,GAAOuG,UAAuBgC,GAAwBjC,EAAtDtG,UAIGuI,GAAwBjC,EADzBtG,QAXG,EAgBQuH,SA7anB,IA8aQvH,EACEuI,IAAyBhB,SAAsB,IAC3C,GACAA,SACAjB,EADAiB,OAjbd,EA8aQvH,IAUJ,IAAMyI,EAAwB,GAC5BlK,QAD+B,EAE/BmE,UAF+B,EAG/BjD,aAAcV,EAHiB,WAI3BwJ,EAAuB,CAAE/I,OAAQ+I,GAArC,IAGIG,EAAa,GACjB1I,IAAKO,KAAKoI,aAAa/B,GAAlB,EAAkC5G,EADnB,GAEhB,UAAoB,CAAEG,MAAOF,GAAS,CAAEA,SAG9C,OACE,qBACE2I,IAAMA,YACJ,YAEFC,aAAa,GAEZtI,KAAKoI,aAAa/B,GAAlB,KANH,EAOGP,EACC,yBACE,qBACE3G,mBADF,EAEEG,kBAFF,SAGER,QAASyJ,GAET,qBAAMxJ,MAAOgD,IAAWyG,gBAE1B,qBACEH,IAAMA,YACJ,UAEFC,aAJF,EAKEG,yBALF,EAME1J,MAAO,CAACtB,EAAD,UANT,GAOE2E,cAAef,EAAO,WAPxB,OAQEqH,sBAAuBH,GAEvB,gBAAC,IAAD,MAAexJ,MAAO,CAAEoD,UAAW2F,IACjC,qBACE/I,MACE,CACEtB,EADF,0BAOAuK,GACA,yBADD,IAEK,gBAAC,WAAD,KA/BP,OARb,S,uCAvYF,cACE,OAAIW,YAAsBC,EAA1B,SACS,CAAE9C,UAAU,GAGd,S,GAdQlF,a,EAAbiI,E,OAEUC,K,EAFVD,E,eAIkB,CACpBE,gBADoB,IAEpBxB,0BAA2B,eA4b/B,IAAM9J,EAAS,WAAkB,CAC/BuL,QAAS,CACPC,SAAU,YAEZC,oBAAqB,CACnBlL,QADmB,EAEnBkH,gBAFmB,EAGnBrC,UAAW,KAIA5E,gBAAf,K,6RCziBA,IATmBkC,YAAD,OAChB,4BAEEgJ,MAFF,IAGEC,OAHF,UAIErK,MAAO,CAACtB,EAAD,KAAc0C,EAAd,WAMX,IAAM1C,EAAS,WAAkB,CAC/B6H,KAAM,CACJ+D,SADI,GAEJC,WAFI,GAGJnE,eAHI,EAIJoE,cAAe,Q,kGCkEJtL,iBAtFO,SAAC,GAA2C,IAA3C,EAA0C,EAA1C,QAA0C,EAA1C,OAA0C,EAA1C,OAAuBO,EAAmB,EAAnBA,MAAmB,EACzBoC,YACpC,kBADF,KAD+D,WACzD,EADyD,KACzD,EADyD,OAIvBA,WAAxC,MAJ+D,WAIzD,EAJyD,KAIzD,EAJyD,KAO9C4I,EAAS5I,SAA6B,IAAIY,IAAJ,MAAvD,IAAQC,QAEAC,EAAUlD,EAAlB,UAAQkD,MAEJ+H,IAAJ,IACEC,GAAgB,kBAAhBA,KACAC,GAAe,kBAAfA,MAGF/I,aAAgB,WACVgJ,iBAA8BC,YAAYC,EAA9C,KACEN,cAEAhI,aAAsB,CACpBI,SADoB,IACVF,EACVC,QAFoB,EAGpBE,iBAAiB,IAHnBL,WAMD,CAACiI,EAAY,EAAb,EAVH7I,IAYA,IAAMmJ,EAAN,EACMC,EAAcF,EAChBN,EAAA,YAAiB,CACfrF,WAAY,CAAC,EADE,GAEfC,YAAa,CAAC,EAAE,KAHtB,EAOM6F,EAAaT,EAAA,YAAiB,CAClCrF,WAAY,CAAC,EADqB,GAElCC,YAAa,CAAC,SAAS,UAGnB8F,EAAaJ,EACfN,EAAA,YAAiB,CACfrF,WAAY,CAAC,EADE,GAEfC,YAAa,CAAC,OAAO,aAH3B,OAOA,OACE,qBACErF,MAAO,CACLtB,EADK,QAEL,CACEwB,OADF,EAEED,MAAOb,KAIV2L,EACC,gBAAC,IAAD,MACE/K,MAAO,CACLtB,EADK,KAEL,CACEO,QADF,EAEEmE,UAAW,CAAC,CAAEgI,OAAQF,OAI1B,qBAAMpK,OAAN,EAA4B1B,KAA5B,EAAwCD,MAAOA,KAnBrD,KAsBE,gBAAC,IAAD,MACEa,MAAO,CACLtB,EADK,KAEL,CACEO,QADF,EAEEmE,UAAW,CAAC,CAAEgI,OAAQD,OAI1B,qBAAMrK,OAAN,EAA2B1B,KAA3B,EAAuCD,MAAOA,SAQtD,IAAMT,EAAS,WAAkB,CAC/ByF,QAAS,CACPvF,WADO,SAEPC,eAAgB,UAElB6E,KAAM,CACJwG,SADI,WAEJxJ,IAFI,EAGJC,KAHI,EAIJE,MAJI,EAKJD,OAAQ,M,gGCtHNyK,EAAwB,oBAC5BC,IAD4B,6CAC5BA,EAD4B,yCAC5BA,EAD4B,sCAC5BA,EAD4B,+BAA9B,EAIaC,EAA0B,WAAgB,CACrD7C,QADqD,EAErD8C,IAAKhE,iBAAmD,K,iCCX1D,qFA4EA,SAASuC,EAAS,GAUP,IAVO,EAUR,EAVQ,OAUR,EAVQ,QAUR,EAVQ,WAUR,EAVQ,UAUR,EAVQ,QAUR,EAVQ,eAUR,EAVQ,SAUR,EAVQ,WAShB3J,EACQ,EADRA,mBAEMX,EAAQgM,cAER1I,EAAgB5D,IAAMM,WAANN,sBAAtB,SAKMuM,EAAa1M,EAAQ,EAEvBG,IAAMM,SAANN,uBAFJ,SAIMI,EAAYP,EAAQ,EAEtBG,IAAMM,SAANN,uBAFJ,SAIA,OACE,qBACEa,MAAO,CAACtB,EAAD,UADT,GAEEqB,QAFF,EAGEf,SAHF,EAIEuE,OAJF,EAKEnD,mBALF,EAMEG,kBANF,WAOEC,mBAAoB,CAAExB,aAEtB,qBAAMgB,MAAOtB,EAAOiN,KACjBjI,EACC,qBAAM1D,MAAO,CAACtB,EAAD,KAAcA,EAA3B,MAAyC2E,cAAc,YACrD,qBAAMvC,OAAN,EAAoB1B,KAApB,GAA8BD,MAAOI,KAH3C,KAME,qBACES,MAAO,CACLtB,EADK,KAELA,EAFK,QAGLgF,EAAOhF,EAAH,cAHC,KADT,GAOE2E,cAAc,QAEd,qBACEO,YADF,EAEEgI,cAFF,EAGE5L,MAAO,CAACtB,EAAD,MAAe,CAAES,MAAOuM,GAAxB,IA5BjB,MAsCF3B,0BAEA,IAIMrL,EAAS,WAAkB,CAC/BC,UAAW,CACTuF,kBADS,EAET2H,SAPJ,IAQIC,SAPJ,IAQI5L,OAJS,GAKTrB,eAAgB,UAElB8M,IAAK,CACHvH,cAAe,OAEjBV,KAAM,CACJzD,MAdJ,IAgBE8L,MAAO,CACLzB,SAAU,IAEZjE,KAAM,CACJhC,iBAAkB,GAEpBF,QAAS,CACPtF,eADO,SAEPgN,SAAUA,GACVC,SAAUA,KAEZE,cAAe,CACbF,SAAUA,OAId","file":"static/js/14.1365c08b.chunk.js","sourcesContent":["function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nmodule.exports = _taggedTemplateLiteralLoose;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n","import * as React from 'react';\nimport type { PortalMethods } from './PortalHost';\n\ntype Props = {\n  manager: PortalMethods;\n  children: React.ReactNode;\n};\n\nexport default class PortalConsumer extends React.Component<Props> {\n  async componentDidMount() {\n    this.checkManager();\n\n    // Delay updating to prevent React from going to infinite loop\n    await Promise.resolve();\n\n    this.key = this.props.manager.mount(this.props.children);\n  }\n\n  componentDidUpdate() {\n    this.checkManager();\n\n    this.props.manager.update(this.key, this.props.children);\n  }\n\n  componentWillUnmount() {\n    this.checkManager();\n\n    this.props.manager.unmount(this.key);\n  }\n\n  private key: any;\n\n  private checkManager() {\n    if (!this.props.manager) {\n      throw new Error(\n        'Looks like you forgot to wrap your root component with `Provider` component from `react-native-paper`.\\n\\n' +\n          \"Please read our getting-started guide and make sure you've followed all the required steps.\\n\\n\" +\n          'https://callstack.github.io/react-native-paper/getting-started.html'\n      );\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Provider as SettingsProvider,\n  Consumer as SettingsConsumer,\n} from '../../core/settings';\nimport { ThemeProvider, withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n","import type { ColorValue } from 'react-native';\nimport color from 'color';\n\nexport default function getContrastingColor(\n  input: ColorValue,\n  light: string,\n  dark: string\n): string {\n  if (typeof input === 'string') {\n    return color(input).isLight() ? dark : light;\n  }\n\n  return light;\n}\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport type { $RemoveChildren } from '../../types';\n\ngetContrastingColor;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  small,\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  loading,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const {\n    backgroundColor = disabled ? disabledColor : theme.colors.accent,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = getContrastingColor(\n      backgroundColor,\n      white,\n      'rgba(0, 0, 0, .54)'\n    );\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        style={styles.touchable}\n        testID={testID}\n      >\n        <View\n          style={[\n            styles.content,\n            label ? styles.extended : small ? styles.small : styles.standard,\n          ]}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent source={icon} size={24} color={foregroundColor} />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator size={18} color={foregroundColor} />\n          ) : null}\n          {label ? (\n            <Text\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                { color: foregroundColor, ...theme.fonts.medium },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  SafeAreaView,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport FAB from './FAB';\nimport Text from '../Typography/Text';\nimport Card from '../Card/Card';\nimport { withTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Action items to display in the form of a speed dial.\n   * An action item should contain the following properties:\n   * - `icon`: icon to display (required)\n   * - `label`: optional label text\n   * - `accessibilityLabel`: accessibility label for the action, uses label by default if specified\n   * - `color`: custom icon color of the action item\n   * - `style`: pass additional styles for the fab item, for example, `backgroundColor`\n   * - `small`: boolean describing whether small or normal sized FAB is rendered. Defaults to `true`\n   * - `onPress`: callback that is called when `FAB` is pressed (required)\n   */\n  actions: Array<{\n    icon: IconSource;\n    label?: string;\n    color?: string;\n    accessibilityLabel?: string;\n    style?: StyleProp<ViewStyle>;\n    small?: boolean;\n    onPress: () => void;\n    testID?: string;\n  }>;\n  /**\n   * Icon to display for the `FAB`.\n   * You can toggle it based on whether the speed dial is open to display a different icon.\n   */\n  icon: IconSource;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for the `FAB`.\n   */\n  color?: string;\n  /**\n   * Function to execute on pressing the `FAB`.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the speed dial is open.\n   */\n  open: boolean;\n  /**\n   * Callback which is called on opening and closing the speed dial.\n   * The open state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onStateChange: (state: { open: boolean }) => void;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Style for the group. You can use it to pass additional styles if you need.\n   * For example, you can set an additional padding if you have a tab bar at the bottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the FAB. It allows to pass the FAB button styles, such as backgroundColor.\n   */\n  fabStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from Group props to FAB.\n   */\n  testID?: string;\n};\n\n/**\n * A component to display a stack of FABs with related actions in a speed dial.\n * To render the group above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { FAB, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [state, setState] = React.useState({ open: false });\n *\n *   const onStateChange = ({ open }) => setState({ open });\n *\n *   const { open } = state;\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <FAB.Group\n *           open={open}\n *           icon={open ? 'calendar-today' : 'plus'}\n *           actions={[\n *             { icon: 'plus', onPress: () => console.log('Pressed add') },\n *             {\n *               icon: 'star',\n *               label: 'Star',\n *               onPress: () => console.log('Pressed star'),\n *             },\n *             {\n *               icon: 'email',\n *               label: 'Email',\n *               onPress: () => console.log('Pressed email'),\n *             },\n *             {\n *               icon: 'bell',\n *               label: 'Remind',\n *               onPress: () => console.log('Pressed notifications'),\n *               small: false,\n *             },\n *           ]}\n *           onStateChange={onStateChange}\n *           onPress={() => {\n *             if (open) {\n *               // do something if the speed dial is open\n *             }\n *           }}\n *         />\n *       </Portal>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst FABGroup = ({\n  actions,\n  icon,\n  open,\n  onPress,\n  accessibilityLabel,\n  theme,\n  style,\n  fabStyle,\n  visible,\n  testID,\n  onStateChange,\n  color: colorProp,\n}: Props) => {\n  const { current: backdrop } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const animations = React.useRef<Animated.Value[]>(\n    actions.map(() => new Animated.Value(open ? 1 : 0))\n  );\n\n  const [prevActions, setPrevActions] = React.useState<\n    | {\n        icon: IconSource;\n        label?: string;\n        color?: string;\n        accessibilityLabel?: string;\n        style?: StyleProp<ViewStyle>;\n        onPress: () => void;\n        testID?: string;\n      }[]\n    | null\n  >(null);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (open) {\n      Animated.parallel([\n        Animated.timing(backdrop, {\n          toValue: 1,\n          duration: 250 * scale,\n          useNativeDriver: true,\n        }),\n        Animated.stagger(\n          50 * scale,\n          animations.current\n            .map((animation) =>\n              Animated.timing(animation, {\n                toValue: 1,\n                duration: 150 * scale,\n                useNativeDriver: true,\n              })\n            )\n            .reverse()\n        ),\n      ]).start();\n    } else {\n      Animated.parallel([\n        Animated.timing(backdrop, {\n          toValue: 0,\n          duration: 200 * scale,\n          useNativeDriver: true,\n        }),\n        ...animations.current.map((animation) =>\n          Animated.timing(animation, {\n            toValue: 0,\n            duration: 150 * scale,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start();\n    }\n  }, [open, actions, backdrop, scale]);\n\n  const close = () => onStateChange({ open: false });\n\n  const toggle = () => onStateChange({ open: !open });\n\n  const { colors } = theme;\n\n  const labelColor = theme.dark\n    ? colors.text\n    : color(colors.text).fade(0.54).rgb().string();\n  const backdropOpacity = open\n    ? backdrop.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, 1, 1],\n      })\n    : backdrop;\n\n  const opacities = animations.current;\n  const scales = opacities.map((opacity) =>\n    open\n      ? opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.8, 1],\n        })\n      : 1\n  );\n\n  if (actions.length !== prevActions?.length) {\n    animations.current = actions.map(\n      (_, i) => animations.current[i] || new Animated.Value(open ? 1 : 0)\n    );\n    setPrevActions(actions);\n  }\n\n  return (\n    <View pointerEvents=\"box-none\" style={[styles.container, style]}>\n      <TouchableWithoutFeedback onPress={close}>\n        <Animated.View\n          pointerEvents={open ? 'auto' : 'none'}\n          style={[\n            styles.backdrop,\n            {\n              opacity: backdropOpacity,\n              backgroundColor: colors.backdrop,\n            },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <SafeAreaView pointerEvents=\"box-none\" style={styles.safeArea}>\n        <View pointerEvents={open ? 'box-none' : 'none'}>\n          {actions.map((it, i) => (\n            <View\n              key={i} // eslint-disable-line react/no-array-index-key\n              style={[\n                styles.item,\n                {\n                  marginHorizontal:\n                    typeof it.small === 'undefined' || it.small ? 24 : 16,\n                },\n              ]}\n              pointerEvents={open ? 'box-none' : 'none'}\n            >\n              {it.label && (\n                <View>\n                  <Card\n                    style={\n                      [\n                        styles.label,\n                        {\n                          transform: [{ scale: scales[i] }],\n                          opacity: opacities[i],\n                        },\n                      ] as StyleProp<ViewStyle>\n                    }\n                    onPress={() => {\n                      it.onPress();\n                      close();\n                    }}\n                    accessibilityLabel={\n                      it.accessibilityLabel !== 'undefined'\n                        ? it.accessibilityLabel\n                        : it.label\n                    }\n                    // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                    accessibilityTraits=\"button\"\n                    accessibilityComponentType=\"button\"\n                    accessibilityRole=\"button\"\n                  >\n                    <Text style={{ color: labelColor }}>{it.label}</Text>\n                  </Card>\n                </View>\n              )}\n              <FAB\n                small={typeof it.small !== 'undefined' ? it.small : true}\n                icon={it.icon}\n                color={it.color}\n                style={\n                  [\n                    {\n                      transform: [{ scale: scales[i] }],\n                      opacity: opacities[i],\n                      backgroundColor: theme.colors.surface,\n                    },\n                    it.style,\n                  ] as StyleProp<ViewStyle>\n                }\n                onPress={() => {\n                  it.onPress();\n                  close();\n                }}\n                accessibilityLabel={\n                  typeof it.accessibilityLabel !== 'undefined'\n                    ? it.accessibilityLabel\n                    : it.label\n                }\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n                testID={it.testID}\n                visible={open}\n              />\n            </View>\n          ))}\n        </View>\n        <FAB\n          onPress={() => {\n            onPress?.();\n            toggle();\n          }}\n          icon={icon}\n          color={colorProp}\n          accessibilityLabel={accessibilityLabel}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: open }}\n          style={[styles.fab, fabStyle]}\n          visible={visible}\n          testID={testID}\n        />\n      </SafeAreaView>\n    </View>\n  );\n};\n\nFABGroup.displayName = 'FAB.Group';\n\nexport default withTheme(FABGroup);\n\n// @component-docs ignore-next-line\nconst FABGroupWithTheme = withTheme(FABGroup);\n// @component-docs ignore-next-line\nexport { FABGroupWithTheme as FABGroup };\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    alignItems: 'flex-end',\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'flex-end',\n  },\n  fab: {\n    marginHorizontal: 16,\n    marginBottom: 16,\n    marginTop: 0,\n  },\n  backdrop: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    borderRadius: 5,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    elevation: 2,\n  },\n  item: {\n    marginBottom: 16,\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n});\n","import FABComponent from './FAB';\nimport FABGroup from './FABGroup';\n\nconst FAB = Object.assign(\n  // @component ./FAB.tsx\n  FABComponent,\n  {\n    // @component ./FABGroup.tsx\n    Group: FABGroup,\n  }\n);\n\nexport default FAB;\n","import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle, StyleSheet } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst StyledText = ({ theme, alpha, family, style, ...rest }: Props) => {\n  const textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  const font = theme.fonts[family];\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        { color: textColor, ...font, writingDirection },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(StyledText);\n","import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Animated,\n  BackHandler,\n  Dimensions,\n  Easing,\n  I18nManager,\n  LayoutRectangle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  ScrollView,\n  findNodeHandle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport type { $Omit } from '../../types';\nimport Portal from '../Portal/Portal';\nimport Surface from '../Surface';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport MenuItem, { MenuItem as _MenuItem } from './MenuItem';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\n\ntype Props = {\n  /**\n   * Whether the Menu is currently visible.\n   */\n  visible: boolean;\n  /**\n   * The anchor to open the menu from. In most cases, it will be a button that opens the menu.\n   */\n  anchor: React.ReactNode | { x: number; y: number };\n  /**\n   * Extra margin to add at the top of the menu to account for translucent status bar on Android.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to and customize it.\n   * This is automatically handled on iOS.\n   */\n  statusBarHeight?: number;\n  /**\n   * Callback called when Menu is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the menu.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Content of the `Menu`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style of menu's inner content.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype Layout = $Omit<$Omit<LayoutRectangle, 'x'>, 'y'>;\n\ntype State = {\n  rendered: boolean;\n  top: number;\n  left: number;\n  menuLayout: Layout;\n  anchorLayout: Layout;\n  opacityAnimation: Animated.Value;\n  scaleAnimation: Animated.ValueXY;\n};\n\n// Minimum padding between the edge of the screen and the menu\nconst SCREEN_INDENT = 8;\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 250;\n// From the 'Standard easing' section of https://material.io/design/motion/speed.html#easing\nconst EASING = Easing.bezier(0.4, 0, 0.2, 1);\n\n/**\n * Menus display a list of choices on temporary elevated surfaces. Their placement varies based on the element that opens them.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/menu-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/menu-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Menu, Divider, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const openMenu = () => setVisible(true);\n *\n *   const closeMenu = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View\n *         style={{\n *           paddingTop: 50,\n *           flexDirection: 'row',\n *           justifyContent: 'center',\n *         }}>\n *         <Menu\n *           visible={visible}\n *           onDismiss={closeMenu}\n *           anchor={<Button onPress={openMenu}>Show menu</Button>}>\n *           <Menu.Item onPress={() => {}} title=\"Item 1\" />\n *           <Menu.Item onPress={() => {}} title=\"Item 2\" />\n *           <Divider />\n *           <Menu.Item onPress={() => {}} title=\"Item 3\" />\n *         </Menu>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Menu extends React.Component<Props, State> {\n  // @component ./MenuItem.tsx\n  static Item = MenuItem;\n\n  static defaultProps = {\n    statusBarHeight: APPROX_STATUSBAR_HEIGHT,\n    overlayAccessibilityLabel: 'Close menu',\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return { rendered: true };\n    }\n\n    return null;\n  }\n\n  state = {\n    rendered: this.props.visible,\n    top: 0,\n    left: 0,\n    menuLayout: { width: 0, height: 0 },\n    anchorLayout: { width: 0, height: 0 },\n    opacityAnimation: new Animated.Value(0),\n    scaleAnimation: new Animated.ValueXY({ x: 0, y: 0 }),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      this.updateVisibility();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  private anchor?: View | null = null;\n  private menu?: View | null = null;\n\n  private isCoordinate = (anchor: any): anchor is { x: number; y: number } =>\n    !React.isValidElement(anchor) &&\n    typeof anchor?.x === 'number' &&\n    typeof anchor?.y === 'number';\n\n  private measureMenuLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      if (this.menu) {\n        this.menu.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private measureAnchorLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      const { anchor } = this.props;\n      if (this.isCoordinate(anchor)) {\n        resolve({ x: anchor.x, y: anchor.y, width: 0, height: 0 });\n        return;\n      }\n\n      if (this.anchor) {\n        this.anchor.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private updateVisibility = async () => {\n    // Menu is rendered in Portal, which updates items asynchronously\n    // We need to do the same here so that the ref is up-to-date\n    await Promise.resolve();\n\n    if (this.props.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  private isBrowser = () => Platform.OS === 'web' && 'document' in global;\n\n  private focusFirstDOMNode = (el: View | null | undefined) => {\n    if (el && this.isBrowser()) {\n      // When in the browser, we want to focus the first focusable item on toggle\n      // For example, when menu is shown, focus the first item in the menu\n      // And when menu is dismissed, send focus back to the button to resume tabbing\n      const node: any = findNodeHandle(el);\n      const focusableNode = node.querySelector(\n        // This is a rough list of selectors that can be focused\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      focusableNode?.focus();\n    }\n  };\n\n  private handleDismiss = () => {\n    if (this.props.visible) {\n      this.props.onDismiss();\n    }\n    return true;\n  };\n\n  private handleKeypress = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      this.props.onDismiss();\n    }\n  };\n\n  private attachListeners = () => {\n    BackHandler.addEventListener('hardwareBackPress', this.handleDismiss);\n    Dimensions.addEventListener('change', this.handleDismiss);\n\n    this.isBrowser() && document.addEventListener('keyup', this.handleKeypress);\n  };\n\n  private removeListeners = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleDismiss);\n    Dimensions.removeEventListener('change', this.handleDismiss);\n\n    this.isBrowser() &&\n      document.removeEventListener('keyup', this.handleKeypress);\n  };\n\n  private show = async () => {\n    const windowLayout = Dimensions.get('window');\n    const [menuLayout, anchorLayout] = await Promise.all([\n      this.measureMenuLayout(),\n      this.measureAnchorLayout(),\n    ]);\n\n    // When visible is true for first render\n    // native views can be still not rendered and\n    // measureMenuLayout/measureAnchorLayout functions\n    // return wrong values e.g { x:0, y: 0, width: 0, height: 0 }\n    // so we have to wait until views are ready\n    // and rerun this function to show menu\n    if (\n      !windowLayout.width ||\n      !windowLayout.height ||\n      !menuLayout.width ||\n      !menuLayout.height ||\n      (!anchorLayout.width && !this.isCoordinate(this.props.anchor)) ||\n      (!anchorLayout.height && !this.isCoordinate(this.props.anchor))\n    ) {\n      requestAnimationFrame(this.show);\n      return;\n    }\n\n    this.setState(\n      () => ({\n        left: anchorLayout.x,\n        top: anchorLayout.y,\n        anchorLayout: {\n          height: anchorLayout.height,\n          width: anchorLayout.width,\n        },\n        menuLayout: {\n          width: menuLayout.width,\n          height: menuLayout.height,\n        },\n      }),\n      () => {\n        this.attachListeners();\n\n        const { animation } = this.props.theme;\n        Animated.parallel([\n          Animated.timing(this.state.scaleAnimation, {\n            toValue: { x: menuLayout.width, y: menuLayout.height },\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n          Animated.timing(this.state.opacityAnimation, {\n            toValue: 1,\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n        ]).start(({ finished }) => {\n          if (finished) {\n            this.focusFirstDOMNode(this.menu);\n          }\n        });\n      }\n    );\n  };\n\n  private hide = () => {\n    this.removeListeners();\n\n    const { animation } = this.props.theme;\n    Animated.timing(this.state.opacityAnimation, {\n      toValue: 0,\n      duration: ANIMATION_DURATION * animation.scale,\n      easing: EASING,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.setState({ menuLayout: { width: 0, height: 0 }, rendered: false });\n        this.state.scaleAnimation.setValue({ x: 0, y: 0 });\n        this.focusFirstDOMNode(this.anchor);\n      }\n    });\n  };\n\n  render() {\n    const {\n      visible,\n      anchor,\n      contentStyle,\n      style,\n      children,\n      theme,\n      statusBarHeight,\n      onDismiss,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const {\n      rendered,\n      menuLayout,\n      anchorLayout,\n      opacityAnimation,\n      scaleAnimation,\n    } = this.state;\n\n    let { left, top } = this.state;\n\n    // I don't know why but on Android measure function is wrong by 24\n    const additionalVerticalValue = Platform.select({\n      android: statusBarHeight,\n      default: 0,\n    });\n\n    const scaleTransforms = [\n      {\n        scaleX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [0, 1],\n        }),\n      },\n      {\n        scaleY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [0, 1],\n        }),\n      },\n    ];\n\n    const windowLayout = Dimensions.get('window');\n\n    // We need to translate menu while animating scale to imitate transform origin for scale animation\n    const positionTransforms = [];\n\n    // Check if menu fits horizontally and if not align it to right.\n    if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [-(menuLayout.width / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from left side\n      if (left < SCREEN_INDENT) {\n        left = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [menuLayout.width / 2, 0],\n        }),\n      });\n\n      left += anchorLayout.width - menuLayout.width;\n\n      const right = left + menuLayout.width;\n      // Check if menu position has enough space from right side\n      if (right > windowLayout.width - SCREEN_INDENT) {\n        left = windowLayout.width - SCREEN_INDENT - menuLayout.width;\n      }\n    }\n\n    // If the menu is larger than available vertical space,\n    // calculate the height of scrollable view\n    let scrollableMenuHeight = 0;\n\n    // Check if the menu should be scrollable\n    if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And bottom side of the screen has more space than top side\n      top <= windowLayout.height - top\n    ) {\n      // Scrollable menu should be below the anchor (expands downwards)\n      scrollableMenuHeight =\n        windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;\n    } else if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And top side of the screen has more space than bottom side\n      top >= windowLayout.height - top &&\n      // And menu overflows from top side\n      top <=\n        menuLayout.height -\n          anchorLayout.height +\n          SCREEN_INDENT -\n          additionalVerticalValue\n    ) {\n      // Scrollable menu should be above the anchor (expands upwards)\n      scrollableMenuHeight =\n        top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;\n    }\n\n    // Scrollable menu max height\n    scrollableMenuHeight =\n      scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT\n        ? windowLayout.height - 2 * SCREEN_INDENT\n        : scrollableMenuHeight;\n\n    // Menu is typically positioned below the element that generates it\n    // So first check if it fits below the anchor (expands downwards)\n    if (\n      // Check if menu fits vertically\n      top <=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue ||\n      // Or if the menu overflows from bottom side\n      (top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n        // And bottom side of the screen has more space than top side\n        top <= windowLayout.height - top)\n    ) {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from top side\n      if (top < SCREEN_INDENT) {\n        top = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0],\n        }),\n      });\n\n      top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);\n\n      const bottom =\n        top +\n        (scrollableMenuHeight || menuLayout.height) +\n        additionalVerticalValue;\n\n      // Check if menu position has enough space from bottom side\n      if (bottom > windowLayout.height - SCREEN_INDENT) {\n        top =\n          scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT\n            ? -SCREEN_INDENT * 2\n            : windowLayout.height -\n              menuLayout.height -\n              SCREEN_INDENT -\n              additionalVerticalValue;\n      }\n    }\n\n    const shadowMenuContainerStyle = {\n      opacity: opacityAnimation,\n      transform: scaleTransforms,\n      borderRadius: theme.roundness,\n      ...(scrollableMenuHeight ? { height: scrollableMenuHeight } : {}),\n    };\n\n    const positionStyle = {\n      top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue,\n      ...(I18nManager.isRTL ? { right: left } : { left }),\n    };\n\n    return (\n      <View\n        ref={(ref) => {\n          this.anchor = ref;\n        }}\n        collapsable={false}\n      >\n        {this.isCoordinate(anchor) ? null : anchor}\n        {rendered ? (\n          <Portal>\n            <TouchableWithoutFeedback\n              accessibilityLabel={overlayAccessibilityLabel}\n              accessibilityRole=\"button\"\n              onPress={onDismiss}\n            >\n              <View style={StyleSheet.absoluteFill} />\n            </TouchableWithoutFeedback>\n            <View\n              ref={(ref) => {\n                this.menu = ref;\n              }}\n              collapsable={false}\n              accessibilityViewIsModal={visible}\n              style={[styles.wrapper, positionStyle, style]}\n              pointerEvents={visible ? 'box-none' : 'none'}\n              onAccessibilityEscape={onDismiss}\n            >\n              <Animated.View style={{ transform: positionTransforms }}>\n                <Surface\n                  style={\n                    [\n                      styles.shadowMenuContainer,\n                      shadowMenuContainerStyle,\n                      contentStyle,\n                    ] as StyleProp<ViewStyle>\n                  }\n                >\n                  {(scrollableMenuHeight && (\n                    <ScrollView>{children}</ScrollView>\n                  )) || <React.Fragment>{children}</React.Fragment>}\n                </Surface>\n              </Animated.View>\n            </View>\n          </Portal>\n        ) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n  },\n  shadowMenuContainer: {\n    opacity: 0,\n    paddingVertical: 8,\n    elevation: 8,\n  },\n});\n\nexport default withTheme(Menu);\n","import * as React from 'react';\nimport { TextProps, StyleSheet } from 'react-native';\nimport StyledText from './StyledText';\n\ntype Props = TextProps & {\n  children: React.ReactNode;\n};\n\n// @component-group Typography\n\n/**\n * Typography component for showing a paragraph.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/paragraph.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Paragraph>Paragraph</Paragraph>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Paragraph = (props: Props) => (\n  <StyledText\n    {...props}\n    alpha={0.87}\n    family=\"regular\"\n    style={[styles.text, props.style]}\n  />\n);\n\nexport default Paragraph;\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 14,\n    lineHeight: 20,\n    marginVertical: 2,\n    letterSpacing: 0.25,\n  },\n});\n","import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport Icon, { isValidIcon, IconSource, isEqualIcon } from './Icon';\n\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Icon to display for the `CrossFadeIcon`.\n   */\n  source: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color: string;\n  /**\n   * Size of the icon.\n   */\n  size: number;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst CrossFadeIcon = ({ color, size, source, theme }: Props) => {\n  const [currentIcon, setCurrentIcon] = React.useState<IconSource>(\n    () => source\n  );\n  const [previousIcon, setPreviousIcon] = React.useState<IconSource | null>(\n    null\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(1));\n\n  const { scale } = theme.animation;\n\n  if (currentIcon !== source) {\n    setPreviousIcon(() => currentIcon);\n    setCurrentIcon(() => source);\n  }\n\n  React.useEffect(() => {\n    if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {\n      fade.setValue(1);\n\n      Animated.timing(fade, {\n        duration: scale * 200,\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [currentIcon, previousIcon, fade, scale]);\n\n  const opacityPrev = fade;\n  const opacityNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      })\n    : 1;\n\n  const rotatePrev = fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['-90deg', '0deg'],\n  });\n\n  const rotateNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['0deg', '-180deg'],\n      })\n    : '0deg';\n\n  return (\n    <View\n      style={[\n        styles.content,\n        {\n          height: size,\n          width: size,\n        },\n      ]}\n    >\n      {previousIcon ? (\n        <Animated.View\n          style={[\n            styles.icon,\n            {\n              opacity: opacityPrev,\n              transform: [{ rotate: rotatePrev }],\n            },\n          ]}\n        >\n          <Icon source={previousIcon} size={size} color={color} />\n        </Animated.View>\n      ) : null}\n      <Animated.View\n        style={[\n          styles.icon,\n          {\n            opacity: opacityNext,\n            transform: [{ rotate: rotateNext }],\n          },\n        ]}\n      >\n        <Icon source={currentIcon} size={size} color={color} />\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default withTheme(CrossFadeIcon);\n\nconst styles = StyleSheet.create({\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { NativeModules, Platform } from 'react-native';\n\n// Use the existence of expo-constants as a heuristic for determining if the\n// status bar is translucent on Android. This should be replaced in the future\n// with react-native-safe-area-context.\nconst estimatedStatusBarHeight =\n  NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n    ?.statusBarHeight ?? 0;\n\nexport const APPROX_STATUSBAR_HEIGHT = Platform.select({\n  android: estimatedStatusBarHeight,\n  ios: Platform.Version < 11 ? estimatedStatusBarHeight : 0,\n});\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { useTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nfunction MenuItem({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n}: Props) {\n  const theme = useTheme();\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n}\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default MenuItem;\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"],"sourceRoot":""}