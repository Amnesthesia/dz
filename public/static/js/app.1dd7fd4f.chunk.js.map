{"version":3,"sources":["redux/global.ts","components/notifications/slice.ts","screens/unauthenticated/login/slice.ts","screens/unauthenticated/signup/slice.ts","screens/authenticated/users/slice.ts","components/forms/dropzone/slice.tsx","components/forms/plane/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","components/forms/slot/slice.tsx","components/forms/user/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/rig/slice.tsx","components/forms/rig_inspection/slice.tsx","redux/store.ts","graphql/Apollo.tsx","constants/Colors.ts","hooks/usePalette.ts","components/notifications/Notifications.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","components/JumpTypeSelect.tsx","components/TicketTypeSelect.tsx","hooks/useRestriction.ts","components/RigSelect.tsx","components/forms/slot/SlotForm.tsx","components/dialogs/ManifestUserDialog.tsx","components/Themed.tsx","components/NoResults.tsx","screens/authenticated/manifest/GetStarted.tsx","components/GcaChip.tsx","components/LoadMasterChip.tsx","components/PilotChip.tsx","components/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","screens/authenticated/manifest/ManifestScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/authenticated/load/LoadScreen.tsx","components/notifications/index.ts","components/PlaneSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","graphql/createQuery.tsx","components/DropzoneUserSelect.tsx","components/forms/load/LoadForm.tsx","components/ScrollableScreen.tsx","screens/authenticated/load/CreateLoadScreen.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","screens/authenticated/packing/PackingScreen.tsx","navigation/tabs/packing.tsx","components/DatePicker.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/RigDialog.tsx","components/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","screens/authenticated/profile/ProfileScreen.tsx","screens/authenticated/rig/RigScreen.tsx","components/LicenseSelect.tsx","components/FederationSelect.tsx","components/forms/user/UserForm.tsx","screens/authenticated/profile/UpdateUserScreen.tsx","navigation/tabs/profile.tsx","screens/authenticated/settings/SettingsScreen.tsx","screens/authenticated/settings/DropzoneSettingsScreen.tsx","screens/authenticated/ticket_types/TicketTypesScreen.tsx","components/forms/plane/PlaneForm.tsx","screens/authenticated/planes/CreatePlaneScreen.tsx","screens/authenticated/planes/UpdatePlaneScreen.tsx","components/forms/dropzone/DropzoneForm.tsx","screens/authenticated/dropzones/UpdateDropzoneScreen.tsx","screens/authenticated/planes/PlanesScreen.tsx","components/forms/ticket_type/TicketTypeForm.tsx","screens/authenticated/ticket_types/CreateTicketTypeScreen.tsx","screens/authenticated/ticket_types/UpdateTicketTypeScreen.tsx","components/forms/extra/ExtraForm.tsx","screens/authenticated/extras/CreateExtraScreen.tsx","screens/authenticated/extras/UpdateExtraScreen.tsx","screens/authenticated/extras/ExtrasScreen.tsx","navigation/tabs/settings.tsx","screens/authenticated/users/UsersScreen.tsx","screens/authenticated/users/AppBar.tsx","components/forms/rig_inspection/RigInspectionItem.tsx","components/forms/rig_inspection/RigInspectionForm.tsx","screens/authenticated/rig/RigInspectionScreen.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/createMutation.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","colors","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","initialState","currentUser","currentDropzone","permissions","credentials","theme","isDarkMode","createSlice","name","reducers","setCredentials","state","action","payload","setUser","setPermissions","setPrimaryColor","primary","setAccentColor","accent","setDropzone","primaryColor","secondaryColor","toggleDarkMode","logout","key","typedKey","queue","hideSnackbar","slice","showSnackbar","push","fields","email","value","error","password","setEmail","setPassword","setEmailError","setPasswordError","reset","federation","passwordConfirmation","exitWeight","phone","license","setFederation","setField","field","setFieldError","isSearchVisible","searchText","setSearchText","setSearchVisible","original","banner","isCreditSystemEnabled","isPublic","setOriginal","registration","minSlots","maxSlots","hours","nextMaintenanceHours","cost","altitude","allowManifestingSelf","isTandem","extras","ticketTypeIds","ticketTypes","map","id","Number","gca","dispatchAt","isOpen","loadMaster","pilot","plane","jumpType","load","rig","ticketType","user","rigs","role","credits","expiresAt","make","model","serial","repackExpiresAt","canopySize","setItem","filter","item","checklistItem","checklistValues","globalActions","loginSlice","actions","signUpSlice","globalSlice","usersActions","usersSlice","snackbarActions","notificationSlice","slotForm","planeFormSlice","dropzoneFormSlice","ticketTypeFormSlice","extraFormSlice","loadFormSlice","slotFormSlice","userForm","userFormSlice","dropzoneUserForm","dropzoneUserFormSlice","rigForm","rigFormSlice","rigInspectionForm","rigInspectionFormSlice","persistConfig","storage","Platform","OS","MMKV","whitelist","console","log","localStorage","reducer","persistCombineReducers","global","notifications","login","signup","dropzoneForm","planeForm","ticketTypeForm","extraForm","loadForm","usersScreen","store","configureStore","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","httpLink","createHttpLink","uri","Constants","manifest","extra","url","Apollo","children","dispatch","errorLink","useMemo","onError","graphQLErrors","networkError","some","err","extensions","code","message","variant","locations","path","authLink","setContext","_","headers","accessToken","tokenType","JSON","stringify","client","ApolloClient","link","concat","cache","InMemoryCache","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","usePalette","MyComponent","StyleSheet","create","container","flex","justifyContent","palette","notification","length","variantStyle","backgroundColor","Snackbar","visible","onDismiss","duration","style","prefixes","Linking","config","screens","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","View","styles","Text","title","TouchableOpacity","onPress","replace","linkText","alignItems","padding","fontSize","fontWeight","marginTop","paddingVertical","color","QUERY_JUMP_TYPES","gql","JumpTypeSelect","props","useState","isMenuOpen","setMenuOpen","useQuery","variables","allowedForUserId","userId","data","loading","refetch","Subheader","Menu","anchor","Item","description","required","jumpTypes","onSelect","QUERY_TICKET_TYPES","TicketTypeSelect","globalState","dropzoneId","QUERY_PERMISSIONS","useRestriction","permission","fetchPolicy","dropzone","includes","QUERY_RIGS","RigSelect","left","Icon","icon","SlotForm","React","isEdit","allowedToManifestOthers","HelperText","type","ScrollView","horizontal","ticketAddons","Chip","selected","Divider","TextInput","mode","label","toString","keyboardType","right","Affix","onChangeText","newValue","marginBottom","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","useCallback","hasErrors","onManifest","a","async","jumpTypeId","extraIds","loadId","rigId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","open","ProgressBar","indeterminate","Title","Content","Actions","Button","onClose","useThemeColor","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","NoResults","subtitle","empty","Paragraph","textAlign","display","fab","position","margin","bottom","width","height","GetStarted","hasPlanes","hasTicketTypes","separator","marginVertical","QUERY_DROPZONE_USERS","GCAChip","marginHorizontal","dropzoneUsers","edges","edge","node","LoadMasterChip","allowed","slots","slot","PilotChip","QUERY_PLANES","PlaneChip","planes","QUERY_LOAD","MUTATION_UPDATE_LOAD","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","useNavigation","loadNumber","canManifest","mutationUpdateLoad","mutation","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","Math","ceil","onLanded","hasLanded","canUpdateLoad","canEditSelf","canEditOthers","getSlotPressAction","onSlotPress","Card","elevation","undefined","overflow","flexDirection","DataTable","Header","numeric","Row","pointerEvents","Cell","Array","from","v","i","differenceInMinutes","flexGrow","marginLeft","disabled","Boolean","QUERY_DROPZONE","ManifestScreen","isDialogOpen","setDialogOpen","earliestTimestamp","startOfDay","isFocused","useIsFocused","isSetupComplete","canCreateLoad","Dimensions","get","loads","contentContainerStyle","numColumns","refreshing","onRefresh","renderItem","index","isFull","FAB","small","navigate","MonoText","fontFamily","EditScreenInfo","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","lineHeight","contentContainer","paddingTop","welcomeContainer","welcomeImage","resizeMode","codeHighlightText","borderRadius","paddingHorizontal","PlaneSelect","createQuery","query","options","getPayload","opts","previousData","transformedData","useEffect","showSnackbarErrors","DropzoneUserSelect","useQueryDropzoneUsers","requiredPermissions","LoadForm","placeholder","Checkbox","status","dzUser","ScrollableScreen","useWindowDimensions","surface","content","paddingBottom","MUTATION_CREATE_LOAD","CreateLoadScreen","mutationCreateLoad","hasError","onSave","createLoad","snackbar","goBack","MaterialCommunityIcons","size","alignSelf","button","QUERY_DROPZONES","AppBar","previous","scene","dropzoneMenuOpen","setDropzoneMenuOpen","hasRig","hasExitWeight","showSetupWarning","Appbar","BackAction","descriptor","marginRight","dropzones","Manifest","createStackNavigator","ManifestTab","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","DatePicker","setOpen","date","onChange","timestamp","format","selectedDays","onDayClick","RigForm","time","MUTATION_CREATE_RIG","MUTATION_UPDATE_RIG","RigDialog","mutationCreateRig","createData","mutationUpdateRig","updateData","response","updateRig","createRig","QUERY_ROLES","RoleSelect","paddingLeft","roles","DropzoneUserForm","canUpdateRole","newRole","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","dropzoneUserId","QUERY_DROPZONE_USER","rigDialogOpen","setRigDialogOpen","dropzoneUserDialogOpen","setDropzoneUserDialogOpen","route","useRoute","isSelf","params","canInspectRigs","getRigPressAction","card","dropzoneUser","join","spacer","RigScreen","QUERY_LICENSES","LicenseSelect","federationId","licenses","QUERY_FEDERATIONS","FederationSelect","federations","MUTATION_CREATE_USER","UpdateUserScreen","mutationUpdateUser","emailRegex","RegExp","test","licenseId","parseFloat","updateUser","Profile","ProfileTab","initialParams","SettingsScreen","Section","DropzoneSettingsScreen","QUERY_TICKET_TYPE","MUTATION_UPDATE_TICKET_TYPE","TicketTypesScreen","mutationUpdateTicketType","refreshControl","RefreshControl","Switch","onValueChange","DropzoneForm","MUTATION_CREATE_PLANE","CreatePlaneScreen","mutationCreatePlane","createPlane","UpdatePlaneScreen","mutationUpdatePlane","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","onPickImage","getDocumentAsync","multiple","onColorSelected","sliderComponent","SliderComponent","defaultColor","hideSliders","current","next","maxHeight","Cover","source","subheader","QUERY_DROPZONE_DETAILS","MUTATION_UPDATE_DROPZONE","UpdateDropzoneScreen","mutationUpdateDropzone","updateDropzone","PlanesScreen","QUERY_EXTRAS","TicketTypeForm","altitudeMenuOpen","setAltitudeMenuOpen","MUTATION_CREATE_TICKET_TYPE","CreateTicketTypeScreen","mutationCreateTicketType","createTicketType","UpdateTicketTypeScreen","updateTicketType","ExtraForm","ticket","xor","MUTATION_CREATE_EXTRA","CreateExtraScreen","mutationCreateExtra","createExtra","MUTATION_UPDATE_EXTRA","UpdateExtraScreen","mutationUpdateExtra","updateExtra","ExtrasScreen","Settings","SettingsTab","TicketTypeSettingsScreen","UsersScreen","search","inputContainer","input","borderColor","onSearch","searchVisible","MaterialIcons","RigInspectionItem","canInspect","valueType","QUERY_RIG_INSPECTION","rigInspectionChecklist","checklistItems","currentValue","find","QUERY_RIG_INSPECTIONS","MUTATION_CREATE_RIG_INSPECTION","MUTATION_SET_VALUE","RigInspectionScreen","mutationCreateRigInspection","mutationSetValue","rigInspections","inspection","createRigInspection","rigInspectionId","rigInspection","Promise","all","checklistItemId","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","canManageDropzone","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","unmountOnBlur","UsersTab","FlatList","ListEmptyComponent","isRequired","pattern","validates","callback","createMutation","fieldErrorMap","onFieldError","mutate","Object","keys","forEach","x","variable","validator","fieldName","createDropzone","SignupScreen","useMutationCreateDropzone","e","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","userLogin","authenticatable","secureTextEntry","userSignUp","useMutationSignUp","onSignUp","textContentType","passwordRules","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","NavigationContainer","linking","LinkingConfiguration","StatusBar","Notifications","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","require","warn","useCachedResources","ActivityIndicator","module","exports"],"mappings":"+5BAWA,IAAMA,EAAoB,SACrBC,KACAC,KAFqB,IAGxBC,OAAO,EAAD,KACDF,IAAkBE,QAClBD,IAAuBC,UAGxBC,EAAiB,SAClBC,KACAC,KAFkB,IAGrBH,OAAO,EAAD,KACDE,IAAeF,QACfG,IAAoBH,UAcrBI,EAA6B,CACjCC,YAAa,KACbC,gBAAiB,KACjBC,YAAa,GACbC,YAAa,KACbC,MAAOZ,EACPa,YAAY,GAECC,cAAY,CACzBC,KAAM,SACNR,eACAS,SAAU,CACRC,eAAgB,SAACC,EAAqBC,GACpCD,EAAMP,YAAcQ,EAAOC,SAE7BC,QAAS,SAACH,EAAqBC,GAC7BD,EAAMV,YAAcW,EAAOC,SAE7BE,eAAgB,SAACJ,EAAqBC,GACpCD,EAAMR,YAAcS,EAAOC,SAE7BG,gBAAiB,SAACL,EAAqBC,GACrCD,EAAMN,MAAMT,OAAOqB,QAAUL,EAAOC,SAEtCK,eAAgB,SAACP,EAAqBC,GACpCD,EAAMN,MAAMT,OAAOuB,OAASP,EAAOC,SAErCO,YAAa,SAACT,EAAqBC,GAAqC,IAAD,IAG5B,EAIE,GAN3CD,EAAMT,gBAAkBU,EAAOC,QAE/B,SAAIF,EAAMT,kBAAN,EAAuBmB,gBACzBV,EAAMN,MAAMT,OAAOqB,QAAnB,SAA6BN,EAAMT,sBAAnC,EAA6B,EAAuBmB,cAGtD,SAAIV,EAAMT,kBAAN,EAAuBoB,iBACzBX,EAAMN,MAAMT,OAAOuB,OAAnB,SAA4BR,EAAMT,sBAAlC,EAA4B,EAAuBoB,iBAGvDC,eAAgB,SAACZ,GAAyB,IAAD,IAIE,EAIE,GAP3CA,EAAML,YAAcK,EAAML,WAC1BK,EAAMN,MAAQM,EAAML,WAAaT,EAAoBJ,EAErD,SAAIkB,EAAMT,kBAAN,EAAuBmB,gBACzBV,EAAMN,MAAMT,OAAOqB,QAAnB,SAA6BN,EAAMT,sBAAnC,EAA6B,EAAuBmB,cAGtD,SAAIV,EAAMT,kBAAN,EAAuBoB,iBACzBX,EAAMN,MAAMT,OAAOuB,OAAnB,SAA4BR,EAAMT,sBAAlC,EAA4B,EAAuBoB,iBAGvDE,OAAQ,SAACb,GACP,IAAI,IAAMc,KAAOzB,EAAc,CAC7B,IAAM0B,EAAWD,EACbA,KAAOd,IACRA,EAAMe,GAAoB1B,EAAa0B,S,QC7EnCnB,cAAY,CACzBC,KAAM,gBACNR,aAAc,CACZ2B,MAAO,IAETlB,SAAU,CACRmB,aAAc,SAACjB,GACbA,EAAMgB,MAAQhB,EAAMgB,MAAME,MAAM,IAElCC,aAAc,SAACnB,EAA2BC,GACxCD,EAAMgB,MAAMI,KAAKnB,EAAOC,aCVxBb,EAAe,CACnBgC,OAAQ,CACNC,MAAO,CACLC,MAAO,GACPC,MAAO,MAETC,SAAU,CACRF,MAAO,GACPC,MAAO,QAKE5B,cAAY,CACzBC,KAAM,QACNR,eACAS,SAAU,CACR4B,SAAU,SAAC1B,EAA0BC,GACnCD,EAAMqB,OAAOC,MAAMC,MAAQtB,EAAOC,SAEpCyB,YAAa,SAAC3B,EAA0BC,GACtCD,EAAMqB,OAAOI,SAASF,MAAQtB,EAAOC,SAEvC0B,cAAe,SAAC5B,EAA0BC,GACxCD,EAAMqB,OAAOC,MAAME,MAAQvB,EAAOC,SAEpC2B,iBAAkB,SAAC7B,EAA0BC,GAC3CD,EAAMqB,OAAOI,SAASD,MAAQvB,EAAOC,SAEvC4B,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,EAAagC,W,gBCR5BhC,EAAe,CACnB0C,WAAY,KACZV,OAAQ,CACNC,MAAO,CACLC,MAAO,GACPC,MAAO,MAETC,SAAU,CACRF,MAAO,GACPC,MAAO,MAETQ,qBAAsB,CACpBT,MAAO,GACPC,MAAO,MAETS,WAAY,CACVV,MAAO,GACPC,MAAO,MAET3B,KAAM,CACJ0B,MAAO,GACPC,MAAO,MAETU,MAAO,CACLX,MAAO,GACPC,MAAO,MAETW,QAAS,CACPZ,MAAO,KACPC,MAAO,QAKE5B,cAAY,CACzBC,KAAM,QACNR,eACAS,SAAU,CACRsC,cAAe,SAACpC,EAA2BC,GACzCD,EAAM+B,WAAa9B,EAAOC,SAE5BmC,SAAU,SAA+CrC,EAA2BC,GAA0E,IAAD,MACpIA,EAAOC,QAD6H,GACpJoC,EADoJ,KAC7If,EAD6I,KAG3JvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAAgDvC,EAA2BC,GAA0E,IAAD,MAC1IA,EAAOC,QADmI,GAC1JoC,EAD0J,KACnJd,EADmJ,KAGjKxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BM,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,EAAagC,WCnF5BhC,EAAiC,CACrCmD,iBAAiB,EACjBC,WAAY,IAIC7C,cAAY,CACzBC,KAAM,cACNR,eACAS,SAAU,CAER4C,cAAe,SAAC1C,EAAyBC,GACvCD,EAAMyC,WAAaxC,EAAOC,SAG5ByC,iBAAkB,SAAC3C,EAAyBC,GAC1CD,EAAMwC,gBAAkBvC,EAAOC,SAGjC4B,MAAO,SAAC9B,GACNA,EAAMwC,gBAAkBnD,EAAamD,gBACrCxC,EAAMyC,WAAapD,EAAaoD,eCLhCpD,EAAmC,CACvCuD,SAAU,KACVvB,OAAQ,CACNU,WAAY,CACVR,MAAO,KACPC,MAAO,MAET3B,KAAM,CACJ0B,MAAO,GACPC,MAAO,MAETb,eAAgB,CACdY,MAAO,GACPC,MAAO,MAETd,aAAc,CACZa,MAAO,GACPC,MAAO,MAETqB,OAAQ,CACNtB,MAAO,GACPC,MAAO,MAETsB,sBAAuB,CACrBvB,OAAO,EACPC,MAAO,MAETuB,SAAU,CACRxB,OAAO,EACPC,MAAO,QAKE5B,cAAY,CACzBC,KAAM,WACNR,eACAS,SAAU,CACRuC,SAAU,SAA+CrC,EAA2BC,GAA0E,IAAD,MACpIA,EAAOC,QAD6H,GACpJoC,EADoJ,KAC7If,EAD6I,KAG3JvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAAgDvC,EAA2BC,GAA6C,IAAD,MAC7GA,EAAOC,QADsG,GAC7HoC,EAD6H,KACtHd,EADsH,KAGhIc,KAAStC,EAAMqB,QAAWrB,EAAMqB,OAAOiB,GAAad,QACtDxB,EAAMqB,OAAOiB,GAAYd,MAAQA,IAIrCwB,YAAa,SAAChD,EAA2BC,GAEvC,IAAK,IAAMa,KADXd,EAAM4C,SAAW3C,EAAOC,QACND,EAAOC,QACvB,GAAIY,KAAOd,EAAMqB,OAAQ,CACvB,IAAMN,EAAWD,EACjBd,EAAMqB,OAAON,GAAUQ,MAAQtB,EAAOC,QAAQa,KAKpDe,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,EAAagC,OAC5BrB,EAAM4C,SAAW,SCvDjBvD,EAAgC,CACpCuD,SAAU,KACVvB,OAAQ,CACNxB,KAAM,CACJ0B,MAAO,GACPC,MAAO,MAETyB,aAAc,CACZ1B,MAAO,GACPC,MAAO,MAET0B,SAAU,CACR3B,MAAO,EACPC,MAAO,MAET2B,SAAU,CACR5B,MAAO,EACPC,MAAO,MAET4B,MAAO,CACL7B,MAAO,KACPC,MAAO,MAET6B,qBAAsB,CACpB9B,MAAO,KACPC,MAAO,QAKE5B,cAAY,CACzBC,KAAM,QACNR,eACAS,SAAU,CACRuC,SAAU,SAA6CrC,EAAwBC,GAAuE,IAAD,MAC5HA,EAAOC,QADqH,GAC5IoC,EAD4I,KACrIf,EADqI,KAGnJvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOxB,KAAK2B,MAAQ,MAE5Be,cAAe,SAA6CvC,EAAwBC,GAAuE,IAAD,MACjIA,EAAOC,QAD0H,GACjJoC,EADiJ,KAC1Id,EAD0I,KAGxJxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAAwBC,GACpCD,EAAM4C,SAAW3C,EAAOC,QACxBF,EAAMqB,OAAO+B,MAAM7B,MAAQtB,EAAOC,QAAQkD,MAC1CpD,EAAMqB,OAAO6B,SAAS3B,MAAQtB,EAAOC,QAAQgD,SAC7ClD,EAAMqB,OAAO8B,SAAS5B,MAAQtB,EAAOC,QAAQiD,SAC7CnD,EAAMqB,OAAOxB,KAAK0B,MAAQtB,EAAOC,QAAQL,KACzCG,EAAMqB,OAAO4B,aAAa1B,MAAQtB,EAAOC,QAAQ+C,aACjDjD,EAAMqB,OAAOgC,qBAAqB9B,MAAQtB,EAAOC,QAAQmD,sBAG3DvB,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,EAAagC,OAC5BrB,EAAM4C,SAAW,SCnEjBvD,EAAqC,CACzCuD,SAAU,KACVvB,OAAQ,CACNxB,KAAM,CACJ0B,MAAO,GACPC,MAAO,MAET8B,KAAM,CACJ/B,MAAO,KACPC,MAAO,MAET+B,SAAU,CACRhC,MAAO,KACPC,MAAO,MAETgC,qBAAsB,CACpBjC,OAAO,EACPC,MAAO,MAETiC,SAAU,CACRlC,OAAO,EACPC,MAAO,MAETkC,OAAQ,CACNnC,MAAO,GACPC,MAAO,QAKE5B,cAAY,CACzBC,KAAM,iBACNR,eACAS,SAAU,CACRuC,SAAU,SAAkDrC,EAA6BC,GAA4E,IAAD,MAC3IA,EAAOC,QADoI,GAC3JoC,EAD2J,KACpJf,EADoJ,KAGlKvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAAkDvC,EAA6BC,GAA4E,IAAD,MAChJA,EAAOC,QADyI,GAChKoC,EADgK,KACzJd,EADyJ,KAGvKxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAA6BC,GACzCD,EAAM4C,SAAW3C,EAAOC,QACxBF,EAAMqB,OAAOkC,SAAShC,MAAQtB,EAAOC,QAAQqD,SAC7CvD,EAAMqB,OAAOiC,KAAK/B,MAAQtB,EAAOC,QAAQoD,KACzCtD,EAAMqB,OAAOmC,qBAAqBjC,MAAQtB,EAAOC,QAAQsD,qBACzDxD,EAAMqB,OAAOxB,KAAK0B,MAAQtB,EAAOC,QAAQL,MAG3CiC,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,EAAagC,OAC5BrB,EAAM4C,SAAW,SC3DjBvD,EAAgC,CACpCuD,SAAU,KACVvB,OAAQ,CACNxB,KAAM,CACJ0B,MAAO,GACPC,MAAO,MAET8B,KAAM,CACJ/B,MAAO,KACPC,MAAO,MAETmC,cAAe,CACbpC,MAAO,GACPC,MAAO,QAKE5B,cAAY,CACzBC,KAAM,YACNR,eACAS,SAAU,CACRuC,SAAU,SAA6CrC,EAAwBC,GAAuE,IAAD,MAC5HA,EAAOC,QADqH,GAC5IoC,EAD4I,KACrIf,EADqI,KAGnJvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOxB,KAAK2B,MAAQ,MAE5Be,cAAe,SAA6CvC,EAAwBC,GAAuE,IAAD,MACjIA,EAAOC,QAD0H,GACjJoC,EADiJ,KAC1Id,EAD0I,KAGxJxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAAwBC,GACpCD,EAAM4C,SAAW3C,EAAOC,QACxBF,EAAMqB,OAAOsC,cAAcpC,MAAQtB,EAAOC,QAAQ0D,YAAYC,KAAI,gBAAGC,EAAH,EAAGA,GAAH,OAAYC,OAAOD,MACrF9D,EAAMqB,OAAOiC,KAAK/B,MAAQtB,EAAOC,QAAQoD,KACzCtD,EAAMqB,OAAOxB,KAAK0B,MAAQtB,EAAOC,QAAQL,MAG3CiC,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,EAAagC,OAC5BrB,EAAM4C,SAAW,SCtCjBvD,EAA+B,CACnCuD,SAAU,KACVvB,OAAQ,CACNxB,KAAM,CACJ0B,MAAO,GACPC,MAAO,MAETwC,IAAK,CACHzC,MAAO,KACPC,MAAO,MAETyC,WAAY,CACV1C,MAAO,KACPC,MAAO,MAET0C,OAAQ,CACN3C,OAAO,EACPC,MAAO,MAET2C,WAAY,CACV5C,MAAO,KACPC,MAAO,MAET4C,MAAO,CACL7C,MAAO,KACPC,MAAO,MAET6C,MAAO,CACL9C,MAAO,KACPC,MAAO,MAET2B,SAAU,CACR5B,MAAO,EACPC,MAAO,QAME5B,eAAY,CACzBC,KAAM,WACNR,eACAS,SAAU,CACRuC,SAAU,SAA2CrC,EAAuBC,GAAsE,IAAD,MACxHA,EAAOC,QADiH,GACxIoC,EADwI,KACjIf,EADiI,KAG/IvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAA4CvC,EAAuBC,GAAsE,IAAD,MAC9HA,EAAOC,QADuH,GAC9IoC,EAD8I,KACvId,EADuI,KAGrJxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAAuBC,GAEnC,IAAK,IAAMa,KADXd,EAAM4C,SAAW3C,EAAOC,QACND,EAAOC,QACvB,GAAIY,KAAOd,EAAMqB,OAAQ,CACvB,IAAMN,EAAWD,EACjBd,EAAMqB,OAAON,GAAUQ,MAAQtB,EAAOC,QAAQa,KAKpDe,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,EAAagC,OAC5BrB,EAAM4C,SAAW,SCpEjBvD,GAA+B,CACnCuD,SAAU,KACVvB,OAAQ,CACNiD,SAAU,CACR/C,MAAO,KACPC,MAAO,MAETkC,OAAQ,CACNnC,MAAO,GACPC,MAAO,MAET+C,KAAM,CACJhD,MAAO,KACPC,MAAO,MAETgD,IAAK,CACHjD,MAAO,KACPC,MAAO,MAETiD,WAAY,CACVlD,MAAO,KACPC,MAAO,MAETkD,KAAM,CACJnD,MAAO,KACPC,MAAO,MAETS,WAAY,CACVV,MAAO,KACPC,MAAO,QAME5B,eAAY,CACzBC,KAAM,WACNR,gBACAS,SAAU,CACRuC,SAAU,SAA2CrC,EAAuBC,GAAsE,IAAD,MACxHA,EAAOC,QADiH,GACxIoC,EADwI,KACjIf,EADiI,KAG/IvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAA4CvC,EAAuBC,GAAsE,IAAD,MAC9HA,EAAOC,QADuH,GAC9IoC,EAD8I,KACvId,EADuI,KAGrJxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAAuBC,GAEnC,IAAK,IAAMa,KADXd,EAAM4C,SAAW3C,EAAOC,QACND,EAAOC,QACvB,GAAIY,KAAOd,EAAMqB,OAAQ,CACvB,IAAMN,EAAWD,EACjBd,EAAMqB,OAAON,GAAUQ,MAAQtB,EAAOC,QAAQa,KAKpDe,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,GAAagC,OAC5BrB,EAAM4C,SAAW,SC5DjBvD,GAA+B,CACnCuD,SAAU,KACVb,WAAY,CACVR,MAAO,KACPC,MAAO,MAETH,OAAQ,CACNY,WAAY,CACVV,MAAO,GACPC,MAAO,MAETF,MAAO,CACLC,MAAO,GACPC,MAAO,MAETU,MAAO,CACLX,MAAO,GACPC,MAAO,MAET3B,KAAM,CACJ0B,MAAO,KACPC,MAAO,MAETmD,KAAM,CACJpD,MAAO,GACPC,MAAO,MAETW,QAAS,CACPZ,MAAO,KACPC,MAAO,QAME5B,eAAY,CACzBC,KAAM,WACNR,gBACAS,SAAU,CACRsC,cAAe,SAACpC,EAAuBC,GACrCD,EAAM+B,WAAWR,MAAQtB,EAAOC,SAElCmC,SAAU,SAA2CrC,EAAuBC,GAAsE,IAAD,MACxHA,EAAOC,QADiH,GACxIoC,EADwI,KACjIf,EADiI,KAG/IvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAA4CvC,EAAuBC,GAAsE,IAAD,MAC9HA,EAAOC,QADuH,GAC9IoC,EAD8I,KACvId,EADuI,KAGrJxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAAuBC,GAAiC,IAAD,EAGnE,IAAK,IAAMa,KAFXd,EAAM4C,SAAW3C,EAAOC,QACxBF,EAAM+B,WAAWR,MAAjB,SAAyBtB,EAAOC,QAAQiC,cAAxC,EAAyB,EAAwBJ,WAC/B9B,EAAOC,QACvB,GAAIY,KAAOd,EAAMqB,OAAQ,CACvB,IAAMN,EAAWD,EACjBd,EAAMqB,OAAON,GAAUQ,MAAQtB,EAAOC,QAAQa,KAKpDe,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,GAAagC,OAC5BrB,EAAM4C,SAAW,SC1EjBvD,GAAuC,CAC3CuD,SAAU,KACVvB,OAAQ,CACNuD,KAAM,CACJrD,MAAO,KACPC,MAAO,MAETqD,QAAS,CACPtD,MAAO,EACPC,MAAO,MAETsD,UAAW,CACTvD,MAAO,KACPC,MAAO,QAME5B,eAAY,CACzBC,KAAM,mBACNR,gBACAS,SAAU,CACRuC,SAAU,SAAmDrC,EAA+BC,GAA8E,IAAD,MAChJA,EAAOC,QADyI,GAChKoC,EADgK,KACzJf,EADyJ,KAGvKvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAAoDvC,EAA+BC,GAA8E,IAAD,MACtJA,EAAOC,QAD+I,GACtKoC,EADsK,KAC/Jd,EAD+J,KAG7KxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAA+BC,GAE3C,IAAK,IAAMa,KADXd,EAAM4C,SAAW3C,EAAOC,QACND,EAAOC,QACvB,GAAIY,KAAOd,EAAMqB,OAAQ,CACvB,IAAMN,EAAWD,EACjBd,EAAMqB,OAAON,GAAUQ,MAAQtB,EAAOC,QAAQa,KAKpDe,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,GAAagC,OAC5BrB,EAAM4C,SAAW,SC7CjBvD,GAA8B,CAClCuD,SAAU,KACVvB,OAAQ,CACN0D,KAAM,CACJxD,MAAO,GACPC,MAAO,MAETwD,MAAO,CACLzD,MAAO,GACPC,MAAO,MAETyD,OAAQ,CACN1D,MAAO,GACPC,MAAO,MAET0D,gBAAiB,CACf3D,MAAO,KACPC,MAAO,MAET2D,WAAY,CACV5D,MAAO,KACPC,MAAO,QAME5B,eAAY,CACzBC,KAAM,UACNR,gBACAS,SAAU,CACRuC,SAAU,SAA0CrC,EAAsBC,GAAqE,IAAD,MACrHA,EAAOC,QAD8G,GACrIoC,EADqI,KAC9Hf,EAD8H,KAG5IvB,EAAMqB,OAAOiB,GAAOf,MAAQA,EAC5BvB,EAAMqB,OAAOiB,GAAOd,MAAQ,MAE9Be,cAAe,SAA2CvC,EAAsBC,GAAqE,IAAD,MAC3HA,EAAOC,QADoH,GAC3IoC,EAD2I,KACpId,EADoI,KAGlJxB,EAAMqB,OAAOiB,GAAOd,MAAQA,GAG9BwB,YAAa,SAAChD,EAAsBC,GAElC,IAAK,IAAMa,KADXd,EAAM4C,SAAW3C,EAAOC,QACND,EAAOC,QACvB,GAAIY,KAAOd,EAAMqB,OAAQ,CACvB,IAAMN,EAAWD,EACjBd,EAAMqB,OAAON,GAAUQ,MAAQtB,EAAOC,QAAQa,KAKpDe,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,GAAagC,OAC5BrB,EAAM4C,SAAW,S,oBCnEjBvD,GAAwC,CAC5CuD,SAAU,KACVvB,OAAQ,IAIKzB,eAAY,CACzBC,KAAM,oBACNR,gBACAS,SAAU,CACRsF,QAAS,SAACpF,EAAgCC,GACxCD,EAAMqB,OAAN,eACKrB,EAAMqB,OAAOgE,QAAO,SAACC,GAAD,OAAUA,EAAKC,cAAczB,KAAO7D,EAAOC,QAAQqF,cAAczB,OAD1F,CAEE7D,EAAOC,WAIX8C,YAAa,SAAChD,EAAgCC,GAC5CD,EAAM4C,SAAW3C,EAAOC,QACxBF,EAAMqB,OAASpB,EAAOC,QAAQsF,iBAGhC1D,MAAO,SAAC9B,GACNA,EAAMqB,OAAShC,GAAagC,OAC5BrB,EAAM4C,SAAW,SCRC6C,IAFiBC,EAA1BC,QAC2BC,EAA3BD,QAC2BE,EAA3BF,SACSG,GAAiBC,EAA1BJ,QACSK,GAAoBC,EAA7BN,QAMSO,IALcC,EAAvBR,QAC0BS,EAA1BT,QAC4BU,EAA5BV,QACuBW,EAAvBX,QACsBY,GAAtBZ,QACsBa,GAAtBb,SACSc,GAAaC,GAAtBf,QACSgB,GAAqBC,GAA9BjB,QACSkB,GAAYC,GAArBnB,QACSoB,GAAsBC,GAA/BrB,QAETsB,GAAgB,CACpBnG,IAAK,OACLoG,QAAyB,QAAhBC,IAASC,GAAeF,IAAUG,cAC3CC,UAAW,CAAC,SAAU,kBAGxBC,QAAQC,IAAI,CAAEC,0BAAcJ,WAE5B,IAAMK,GAAUC,YAAuBV,GAAe,CAClDW,OAAQ/B,EAAY6B,QACpBG,cAAe5B,EAAkByB,QACjCI,MAAOpC,EAAWgC,QAClBK,OAAQnC,EAAY8B,QACpBM,aAAc5B,EAAkBsB,QAChCO,UAAW9B,EAAeuB,QAC1BQ,eAAgB7B,EAAoBqB,QACpCS,UAAW7B,EAAeoB,QAC1BU,SAAU7B,GAAcmB,QACxBxB,SAAUM,GAAckB,QACxBjB,SAAUC,GAAcgB,QACxBf,iBAAkBC,GAAsBc,QACxCb,QAASC,GAAaY,QACtBX,kBAAmBC,GAAuBU,QAC1CW,YAAatC,EAAW2B,UAGfY,GAAQC,YAAe,CAClCb,aAEWc,GAAYC,YAAaH,IAGzBI,GAAiB,kBAAMC,eACvBC,GAAkDC,I,qkBCjE/D,IAAMC,GAAWC,yBAAe,CAC9BC,IAAKC,IAAUC,SAASC,MAAMC,MAKjB,SAASC,GAAT,GAA8D,IAA5CC,EAA2C,EAA3CA,SAEzB7J,EAAcmJ,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,OAAOnI,eACnD8J,EAAWb,KAEXc,EAAYC,mBAAQ,kBACxBC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAExB,SAAID,KAAeE,MAAK,SAACC,GAAD,YAAkC,0BAAzB,SAAAA,EAAIC,iBAAJ,IAAgBC,SAO/C,OANAT,EACEvD,GAAgB7E,aAAa,CAAE8I,QAAQ,kBAAoBC,QAAS,gBAEtEX,EACE9D,GAAc5E,UAKd8I,GACFA,EAAc9F,KAAI,gBAAGoG,EAAH,EAAGA,QAASE,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAvB,OAChBb,EACEvD,GAAgB7E,aAAa,CAAE8I,QAAQ,oBAAqBA,EAAtB,KAAkCE,EAAlC,KAAgDC,EAAQF,QAAS,cAGzGN,GACFL,EACEvD,GAAgB7E,aAAa,CAAE8I,QAAQ,oBAAqBL,EAAgBM,QAAS,gBAIvF,CAACX,IAEDc,EAAWZ,mBACf,kBAAMa,aAAW,SAACC,EAAD,GACf,MAAO,CAELC,QAAQ,SAHyB,EAAdA,SAKH,MAAX/K,KAAagL,YAAb,IACD,cAAgB,UAAWhL,EAAYgL,YACvC,eAAgBhL,EAAYgL,YAC5B,aAAchL,EAAYiL,WACvBjL,GACD,UAIV,CAACkL,KAAKC,UAAUnL,KAGZoL,EAASpB,mBAAQ,kBACrB,IAAIqB,eAAa,CACfC,KAAMvB,EAAUwB,OAAOX,GAAUW,OAAOlC,IACxCmC,MAAO,IAAIC,oBAEb,CAACb,IAGH,OACE,kBAAC,iBAAD,CAAgBQ,OAAQA,GACrBvB,G,gpBC3EP,IAOe,IACb6B,MAAO,CACLC,KAAM,OACNC,WAAY,OACZC,KAXmB,UAYnBC,eAAgB,OAChBC,gBAbmB,UAcnBC,QAZiB,UAajBjK,MAZe,UAafkK,QAZiB,UAajBC,KAZc,WAchBC,KAAM,CACJR,KAAM,OACNC,WAAY,OACZC,KArBkB,OAsBlBC,eAAgB,OAChBC,gBAvBkB,OAwBlBC,QAvBiB,UAwBjBjK,MAvBe,UAwBfkK,QAvBiB,UAwBjBC,KAvBc,YCIHE,OANf,WAGE,OAAO5M,GAAM,OCEP0G,GAAYzE,EAAZyE,QAwCOmG,IAPAC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,eAAgB,mBAlCA,WAElB,IAAMnM,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM6H,iBACtC0B,EAAWb,KACX0D,EAAUP,KAEVQ,EAAerM,EAAMgB,MAAMsL,OAAStM,EAAMgB,MAAM,GAAK,KAErDuL,EAAe,CACnBZ,KAAM,CAAEa,gBAAiBJ,EAAQT,MACjCF,QAAS,CAAEe,gBAAiBJ,EAAQX,SACpCjK,MAAO,CAAEgL,gBAAiBJ,EAAQ5K,OAClCkK,QAAS,CAAEc,gBAAiBJ,EAAQV,UAItC,OACE,gBAACe,GAAA,EAAD,CACEC,UAAWL,EACXM,UAAW,kBACTpD,EAAS5D,GAAQ1E,iBAEnB2L,SAAU,IACV3M,OAAM,MAAEoM,OAAF,EAAEA,EAAcpM,OACtB4M,QAAQ,MAACR,MAAcnC,UAAWqC,EAAaF,EAAanC,UAP9D,MASImC,OATJ,EASIA,EAAcpC,WClCP,IACb6C,SAAU,C,OAACC,EAAgB,KAAM,SACjCC,OAAQ,CACNC,QAAS,CACPC,cAAe,CACbD,QAAS,CACPE,WAAY,QACZC,WAAY,iBACZC,cAAe,WACfC,cAAe,YACfC,YAAa,oBAGjBC,MAAO,CACLP,QAAS,CACPQ,gBAAiB,aACjBC,qBAAsB,qBAG1BC,gBAAiB,CACfV,QAAS,CACPW,YAAa,SACbC,aAAc,e,4BClBT,SAASC,GAAT,GAEuC,IADpDC,EACmD,EADnDA,WAEA,OACE,gBAACC,EAAA,EAAD,CAAMnB,MAAOoB,GAAOhC,WAClB,gBAACiC,GAAA,EAAD,CAAMrB,MAAOoB,GAAOE,OAApB,8BACA,gBAACC,GAAA,EAAD,CAAkBC,QAAS,kBAAMN,EAAWO,QAAQ,SAASzB,MAAOoB,GAAOlD,MACzE,gBAACmD,GAAA,EAAD,CAAMrB,MAAOoB,GAAOM,UAApB,wBAMR,I,MAAMN,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNM,gBAAiB,OACjBgC,WAAY,SACZrC,eAAgB,SAChBsC,QAAS,IAEXN,MAAO,CACLO,SAAU,GACVC,WAAY,QAEd5D,KAAM,CACJ6D,UAAW,GACXC,gBAAiB,IAEnBN,SAAU,CACRG,SAAU,GACVI,MAAO,a,sNCtBLC,GAAmBC,aAAH,4JASP,SAASC,GAAeC,GAAyB,IAAD,MAC3BC,oBAAS,GADkB,WACtDC,EADsD,KAC1CC,EAD0C,QAEzCzG,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAEf0H,mBAAgBP,GAAkB,CACnEQ,UAAW,CACTC,iBAAkBN,EAAMO,WAFpBC,EAJqD,EAIrDA,KAJqD,EAI/CC,QAJ+C,EAItCC,QAKvB,OACE,oCACA,kBAAC,KAAKC,UAAN,kBAGA,kBAACC,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC,KAAKC,KAAN,CACE3B,QAAS,WACPgB,GAAY,IAEdlB,OACE,SAAAe,EAAM3N,YAAN,IAAa1B,OAAQ,0BAEvBoQ,YAAcf,EAAMgB,SAAwB,KAAb,cAXrC,MAeIR,GAfJ,SAeIA,EAAMS,gBAfV,EAeI,EAAiBtM,KAAI,SAACS,GAAD,OACnB,kBAAC,KAAK0L,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAAS9L,IAEjB6J,MACE7J,EAASzE,MAAQ,WC7C/B,I,GAAMwQ,GAAqBrB,aAAH,+RAeT,SAASsB,GAAiBpB,GAA2B,IAAD,QAC/BC,oBAAS,GADsB,WAC1DC,EAD0D,KAC9CC,EAD8C,KAE3DkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAFe,EAI9B0H,mBAAgBe,GAAoB,CACrEd,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDN,qBAAsB0L,EAAM1L,wBAHxBkM,EAJyD,EAIzDA,KAJyD,EAInDC,QAJmD,EAI1CC,QAMvB,OACE,oCACE,kBAAC,KAAKC,UAAN,eAGA,kBAACC,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC,KAAKC,KAAN,CACE3B,QAAS,WACPgB,GAAY,IAEdlB,OACE,SAAAe,EAAM3N,YAAN,IAAa1B,OAAQ,4BAEvBoQ,YAAcf,EAAMgB,SAAwB,KAAb,cAXrC,MAeIR,GAfJ,SAeIA,EAAM9L,kBAfV,EAeI,EAAmBC,KAAI,SAACY,GAAD,OACrB,kBAAC,KAAKuL,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAAS3L,IAEjB0J,MACE1J,EAAW5E,MAAQ,WC/DnC,I,GAAM4Q,GAAoBzB,aAAH,iTAoBR,SAAS0B,GAAeC,GAA8B,IAAD,MAC1DpR,EAAoBqJ,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAAlDrI,gBACAmQ,EAASJ,mBAASmB,GAAmB,CAC3ClB,UAAW,CACTiB,WAAYzM,OAAM,MAACxE,OAAD,EAACA,EAAiBuE,KAEtC8M,YAAa,gBAJPlB,KAOR,OAAW,MAAJA,GAAA,SAAAA,EAAMmB,WAAN,WAAgBvR,cAAhB,WAA6BE,kBAA7B,IAA0CsR,SAASH,MAAsB,ECjBlF,IAAMI,GAAa/B,aAAH,+NAeD,SAASgC,GAAU9B,GAAoB,IAAD,YACjBC,oBAAS,GADQ,WAC5CC,EAD4C,KAChCC,EADgC,KAE7CkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAE1C8H,EAASJ,mBAAgByB,GAAY,CAC3CxB,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,OAF5C4L,KAKR,OACE,kBAACI,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC,KAAKC,KAAN,CACE3B,QAAS,WACPgB,GAAY,IAEdlB,MACEe,EAAM3N,OAAN,SACK2N,EAAM3N,YADX,EACK,EAAawD,MADlB,cAC0BmK,EAAM3N,YADhC,EAC0B,EAAayD,OADvC,OACiD,SAAAkK,EAAM3N,YAAN,IAAa4D,aAAc,KAD5E,QAEE,aAEJ8K,YAAcf,EAAMgB,SAAwB,KAAb,WAC/Be,KAAM,kBAAM,kBAAC,KAAKC,KAAN,CAAWC,KAAK,kBAdlC,MAkBIzB,GAlBJ,SAkBIA,EAAM/K,WAlBV,EAkBI,EAAYd,KAAI,SAACW,GAAD,iBACd,kBAAC,KAAKwL,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAAS5L,IAEjB2J,OAAK,SACAe,EAAM3N,YADN,EACA,EAAawD,MADb,cACqBmK,EAAM3N,YAD3B,EACqB,EAAayD,OAEvCiL,aAAW,SACNf,EAAM3N,YADA,EACN,EAAa4D,YADP,c,ICvDfQ,GAAYzE,GAAZyE,QACO,SAASyL,KAAY,IAAD,gDAC3BpR,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMkG,YACtCqD,EAAWb,KACX6H,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAElDyJ,aAAgB,WAAO,IAAD,EACU,EAA9B,SAAIrR,EAAMqB,OAAOqD,OAAb,EAAmBnD,QAChBvB,EAAMqB,OAAOY,WAAWV,OAC3BgI,EACE5D,GAAQtD,SAAS,CAAC,aAAc0B,OAAO/D,EAAMqB,OAAOqD,KAAKnD,MAAMU,YAAc,QAI5EjC,EAAMqB,OAAOmD,IAAIjD,OAAlB,SAA2BvB,EAAMqB,OAAOqD,KAAKnD,MAAMoD,OAAxB,EAA8B2H,QAC3D/C,EACE5D,GAAQtD,SAAS,CAAC,MAAOrC,EAAMqB,OAAOqD,KAAKnD,MAAMoD,KAAK,SAK3D,UAAC3E,EAAMqB,SAAP,SAAC,EAAcqD,OAAf,SAAC,EAAoBnD,YAArB,EAAC,EAA2BuC,KAE/B,IAAMwN,EAAM,MAAGtR,GAAH,SAAGA,EAAO4C,eAAV,EAAG,EAAiBkB,GAQ1ByN,GAPc,MAALvR,GAAA,SAAAA,EAAOqB,SAAP,WAAeqD,OAAf,WAAqBnD,QAArB,EAA4BuC,GAA5B,SAAmCyM,EAAYjR,cAAZ,EAAyBwE,GAG7C4M,GAC5BY,EAAS,aAAe,cAGMZ,GAC9BY,EAAS,iBAAmB,mBAI9B,OAFA/J,QAAQC,IAAI,SAAUxH,EAAMqB,QAG1B,gCACE,gBAAC4N,GAAD,CACE1N,MAAOvB,EAAMqB,OAAOiD,SAAS/C,MAC7B2O,UAAQ,EACRT,OAAQ1L,OAAM,MAAC/D,GAAD,SAACA,EAAOqB,SAAR,SAAC,EAAeqD,OAAhB,SAAC,EAAqBnD,YAAtB,EAAC,EAA4BuC,KAAO,KAClDsM,SAAU,SAAC7O,GAAD,OAAWgI,EAAS5D,GAAQtD,SAAS,CAAC,WAAYd,QAE9D,gBAACiQ,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOiD,SAAS9C,MAAQ,QAAU,QACxDxB,EAAMqB,OAAOiD,SAAS9C,OAAS,IAGnC,gBAAC8O,GAAD,CACE/O,MAAOvB,EAAMqB,OAAOoD,WAAWlD,MAC/B2O,UAAQ,EACR1M,sBAAuB+N,EACvBnB,SAAU,SAAC7O,GAAD,OAAWgI,EAAS5D,GAAQtD,SAAS,CAAC,aAAcd,QAEhE,gBAACiQ,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOoD,WAAWjD,MAAQ,QAAU,QAC1DxB,EAAMqB,OAAOoD,WAAWjD,OAAS,KAI9B,MAALxB,GAAA,SAAAA,EAAOqB,SAAP,WAAeoD,aAAf,WAA2BlD,QAA3B,WAAkCmC,aAAlC,IAA0C4I,SACxC,gBAAC,KAAKuD,UAAN,sBAKJ,gBAAC6B,GAAA,EAAD,CAAYC,YAAU,EAAC9E,MAAOoB,GAAO2D,cAArC,MACG5R,GADH,SACGA,EAAOqB,SADV,SACG,EAAeoD,aADlB,SACG,EAA2BlD,QAD9B,SACG,EAAkCmC,aADrC,EACG,EAA0CG,KAAI,SAACsF,GAAD,mBAC7C,gBAAC0I,GAAA,EAAD,CACEC,SAAQ,MAAE9R,GAAF,SAAEA,EAAOqB,SAAT,SAAE,EAAeqC,OAAOnC,YAAxB,EAAE,EAA6BsI,MAAK,qBAAE/F,KAAeqF,EAAMrF,MACnEuK,QACO,MAALrO,GAAA,SAAAA,EAAOqB,SAAP,WAAeqC,OAAOnC,QAAtB,EAA6BsI,MAAK,qBAAE/F,KAAeqF,EAAMrF,MACvD,0BAAMyF,EAAS5D,GAAQtD,SAAS,CAAC,SAAD,MAAWrC,GAAX,SAAWA,EAAOqB,SAAlB,SAAW,EAAeqC,OAAOnC,YAAjC,EAAW,EAA6B8D,QAAO,qBAAGvB,KAAgBqF,EAAMrF,UACxG,0BAAMyF,EAAS5D,GAAQtD,SAAS,CAAC,SAAD,gBAAqB,MAALrC,GAAA,SAAAA,EAAOqB,SAAP,WAAeqC,aAAf,IAAuBnC,QAAS,IAAhD,CAAqD4H,SAGrFA,EAAMtJ,KARZ,MAQsBsJ,EAAM7F,KAR5B,SAYJ,gBAACkO,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOqC,OAAOlC,MAAQ,QAAU,QACtDxB,EAAMqB,OAAOqC,OAAOlC,OAAS,IAEjC,gBAACuQ,GAAA,EAAD,MACA,gBAACf,GAAD,CACEzP,MAAOvB,EAAMqB,OAAOmD,IAAIjD,MACxBkO,OAAQ1L,OAAM,SAAC/D,EAAMqB,OAAOqD,OAAd,SAAC,EAAmBnD,YAApB,EAAC,EAA0BuC,IACzC0M,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDsM,SAAU,SAAC7O,GAAD,OAAWgI,EAAS5D,GAAQtD,SAAS,CAAC,WAAYd,QAE9D,gBAACiQ,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOmD,IAAIhD,MAAQ,QAAU,QACnDxB,EAAMqB,OAAOmD,IAAIhD,OAAS,IAE9B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,cACN1Q,QAASxB,EAAMqB,OAAOY,WAAWT,MACjCD,OAAO,SAAAvB,EAAMqB,OAAOY,aAAb,WAAyBV,YAAzB,IAAgC4Q,aAAc,GACrDC,aAAa,0BACbC,MAAO,kBAAM,gBAACL,GAAA,EAAUM,MAAX,CAAiBlH,KAAK,QACnCmH,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,aAAc0B,OAAOyO,SAG9E,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOY,WAAWT,MAAQ,QAAU,QAC1DxB,EAAMqB,OAAOY,WAAWT,OAAS,KAM3C,I,GAAMyM,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACN6K,KAAM,GAGR5J,MAAO,CACLmQ,aAAc,GAEhBb,aAAc,CACZa,aAAc,KCvHZC,GAAuB1D,cAAH,+uDAoGX,SAAS2D,GAAmBzD,GAA6B,IAAD,UAC/D3F,EAAWb,KACX1I,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMkG,YACtCqK,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAHmB,EAI1BgL,sBAAsBF,IAJI,WAI9DG,EAJ8D,KAI1CC,EAJ0C,KAM/DC,EAAWC,uBAAY,WAAO,IAAD,IAC7BC,GAAY,EAehB,OAdI,SAACjT,EAAMqB,OAAOiD,SAAS/C,QAAtB,EAA6BuC,KAChCmP,GAAY,EACZ1J,EACErD,GAAS3D,cAAc,CAAC,WAAY,wCAIpC,SAACvC,EAAMqB,OAAOoD,WAAWlD,QAAxB,EAA+BuC,KAClCmP,GAAY,EACZ1J,EACErD,GAAS3D,cAAc,CAAC,aAAc,iDAIlC0Q,IACP,CAACtI,KAAKC,UAAU5K,EAAMqB,UACnB6R,EAAaF,uBAAY,qEAAAG,EAAAC,OAAA,mDAExBL,IAFwB,6EAAAI,EAAA,MAMNN,EAAmB,CACtCtD,UAAW,CACT8D,WAAYtP,OAAM,SAAC/D,EAAMqB,OAAOiD,SAAS/C,YAAvB,EAAC,EAA6BuC,IAChDwP,SAAQ,SAAEtT,EAAMqB,OAAOqC,SAAf,SAAE,EAAqBnC,YAAvB,EAAE,EAA4BsC,KAAI,gBAAGC,EAAH,EAAGA,GAAH,OAAYC,OAAOD,MAC7DyP,OAAQxP,OAAM,SAAC/D,EAAMqB,OAAOkD,KAAKhD,YAAnB,EAAC,EAAyBuC,IACxC0P,MAAO,SAACxT,EAAMqB,OAAOmD,IAAIjD,QAAjB,EAAwBuC,GAAYC,OAAM,SAAC/D,EAAMqB,OAAOmD,IAAIjD,YAAlB,EAAC,EAAwBuC,IAAtC,KACrC2P,aAAc1P,OAAM,SAAC/D,EAAMqB,OAAOoD,aAAd,SAAC,EAAyBlD,YAA1B,EAAC,EAAgCuC,IACrD2L,OAAQ1L,OAAM,SAAC/D,EAAMqB,OAAOqD,OAAd,SAAC,EAAmBnD,YAApB,EAAC,EAA0BuC,IACzC7B,WAAYjC,EAAMqB,OAAOY,WAAWV,UAdb,UAMrBmS,EANqB,OAkB3B,SAAAA,EAAOhE,OAAP,WAAaiE,aAAb,WAAyBC,cAAzB,EAAsC/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QAClD,OAAQ3H,GACN,IAAK,YACH,OAAOiH,EAASrD,GAAS3D,cAAc,CAAC,WAAY0H,KACtD,IAAK,OACH,OAAOV,EAASrD,GAAS3D,cAAc,CAAC,OAAQ0H,KAClD,IAAK,UACL,IAAK,SACL,IAAK,YACH,OAAOV,EAASrD,GAAS3D,cAAc,CAAC,SAAU0H,KACpD,IAAK,cACH,OAAOV,EAASrD,GAAS3D,cAAc,CAAC,aAAc0H,KACxD,IAAK,MACH,OAAOV,EAASrD,GAAS3D,cAAc,CAAC,MAAO0H,KACjD,IAAK,OACH,OAAOV,EAASrD,GAAS3D,cAAc,CAAC,OAAQ0H,KAClD,IAAK,cACH,OAAOV,EAASrD,GAAS3D,cAAc,CAAC,aAAc0H,SAnCjC,MAsCvByJ,GAtCuB,SAsCvBA,EAAQhE,OAtCe,SAsCvB,EAAciE,aAtCS,SAsCvB,EAA0BE,UAA1B,EAAkCvH,OAtCX,yCAuClB/C,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAO,MAAEyJ,GAAF,SAAEA,EAAQhE,OAAV,SAAE,EAAciE,iBAAhB,EAAE,EAA0BE,OAAO,GAAI3J,QAAS,YAvC7E,OAyCvB,SAACwJ,EAAOhE,OAAR,SAAC,EAAaiE,aAAd,SAAC,EAAyBC,cAAzB,EAAsCtH,QACzC4C,EAAM4E,YA1CmB,kDA8C3BvK,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WA9C9C,mEAgD5B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASwR,EAAoB3D,EAAM4E,YAE5D,OACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQtH,UAAWwC,EAAM+E,MACvB,kBAACC,GAAA,EAAD,CAAaC,eAAa,EAACzH,QAASoG,EAAanD,QAASb,MAAOyB,EAAY7Q,MAAMT,OAAOuB,SAC1F,kBAACwT,GAAA,EAAOI,MAAR,wBACepU,GADf,SACeA,EAAOqB,SADtB,SACe,EAAeqD,OAD9B,SACe,EAAqBnD,YADpC,EACe,EAA4B1B,MAD3C,iBACsDG,EAAMqB,OAAOkD,OADnE,SACsD,EAAmBhD,YADzE,EACsD,EAA0B1B,OAEhF,kBAACmU,GAAA,EAAOK,QAAR,KACE,kBAACjD,GAAD,OAEF,kBAAC4C,GAAA,EAAOM,QAAR,CAAgBzH,MAAO,CAAEV,eAAgB,aACvC,kBAACoI,GAAA,EAAD,CACElG,QAAS,WACP9E,EAASrD,GAASpE,SAClBoN,EAAMsF,YAHV,UAQA,kBAACD,GAAA,EAAD,CAAQlG,QAAS6E,GAAjB,e,+DCxMH,SAASuB,GACdvF,EACAwF,GAEA,IACMC,EAAiBzF,EAAK,MAE5B,OAAIyF,GAGKC,GAAM,MAAQF,GAYlB,SAASxG,GAAKgB,GAAmB,IAC9BrC,EAAgDqC,EAAhDrC,MAAOgI,EAAyC3F,EAAzC2F,WAAYC,EAA6B5F,EAA7B4F,UAAcC,EADJ,KACmB7F,EADnB,oCAE/BJ,EAAQ2F,GAAc,CAAEtJ,MAAO0J,EAAYjJ,KAAMkJ,GAAa,QAEpE,OAAO,gBAAC,KAAD,MAAajI,MAAO,CAAC,CAAEiC,SAASjC,IAAYkI,IAG9C,SAAS/G,GAAKkB,GAAmB,IAC9BrC,EAAgDqC,EAAhDrC,MAAOgI,EAAyC3F,EAAzC2F,WAAYC,EAA6B5F,EAA7B4F,UAAcC,EADJ,KACmB7F,EADnB,oCAE/B1C,EAAkBiI,GAAc,CAAEtJ,MAAO0J,EAAYjJ,KAAMkJ,GAAa,cAE9E,OAAO,gBAAC,IAAD,MAAajI,MAAO,CAAC,CAAEL,mBAAmBK,IAAYkI,IClChD,SAASC,GAAT,GAA6E,IAAxD7G,EAAuD,EAAvDA,MAAO8G,EAAgD,EAAhDA,SACzC,OACE,kBAAC,GAAD,CAAMpI,MAAOoB,GAAOiH,OAClB,kBAACd,GAAA,EAAD,KAAQjG,GACR,kBAACgH,GAAA,EAAD,CAAWtI,MAAO,CAAEuI,UAAW,WAC5BH,IAOT,IAAMhH,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNuC,QAAS,EACT4G,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,GAEVP,MAAO,CACLhJ,KAAM,EACNsC,WAAY,SACZrC,eAAgB,SAChBuJ,MAAO,OACPC,OAAQ,UChBG,SAASC,GAAT,GAIO,IAHpBC,EAGmB,EAHnBA,UACAC,EAEmB,EAFnBA,eAGM1J,GADa,EADnBrJ,SAEgB8I,MAEhB,OACI,gBAAC,GAAD,CAAMgB,MAAO,CAAE6I,MAAO,QACtB,gBAAC,GAAD,CAAM7I,MAAOoB,GAAOE,OAApB,mBACA,gBAAC,GAAD,CAAMtB,MAAOoB,GAAO8H,UAAWlB,WAAW,OAAOC,UAAU,0BACzD,gBAAC,KAAK9E,KAAN,CACE7B,MAAM,kBACN8C,KACE,kBACE,gBAAC,KAAKC,KAAN,CACEpC,MAAO1C,EAAQX,QACf0F,KAAK,aAKb,gBAAC,KAAKnB,KAAN,CACE7B,MAAM,cACN8C,KACE,kBACG4E,EAKC,gBAAC,KAAK3E,KAAN,CACEpC,MAAO1C,EAAQX,QACf0F,KAAK,UANP,gBAAC,KAAKD,KAAN,CACEpC,MAAO1C,EAAQ5K,MACf2P,KAAK,aAQf,gBAAC,KAAKnB,KAAN,CACE7B,MAAM,yBACN8C,KACE,kBACC6E,EAKC,gBAAC,KAAK5E,KAAN,CACEpC,MAAO1C,EAAQX,QACf0F,KAAK,UANP,gBAAC,KAAKD,KAAN,CACEpC,MAAO1C,EAAQ5K,MACf2P,KAAK,cAYrB,I,MAAMlD,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,S,wCCtELO,GAAuBjH,aAAH,gdA4BX,SAASkH,GAAQhH,GAAwB,IAAD,gBACnBC,oBAAS,GADU,WAC9CC,EAD8C,KAClCC,EADkC,KAE/CkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAE1C8H,EAASJ,mBAAgB2G,GAAsB,CACrD1G,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDtE,YAAa,CAAC,eAHVkQ,KAQR,OAFgBgB,GAAe,cAO7B,kBAACZ,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC8B,GAAA,EAAD,CACEI,KAAK,WACLd,KAAK,iBACLtE,MAAO,CAAEsJ,iBAAkB,GAC3B9H,QAAS,kBAAMgB,GAAY,KAE1B,SAAAH,EAAM3N,QAAN,EAAauC,GAAb,SAAkBoL,EAAM3N,YAAxB,EAAkB,EAAa1B,KAAO,WAV7C,MAcI6P,GAdJ,SAcIA,EAAMmB,WAdV,SAcI,EAAgBuF,gBAdpB,SAcI,EAA+BC,YAdnC,EAcI,EAAsCxS,KAAI,SAACyS,GAAD,eACxC,kBAAC,KAAKtG,KAAN,CACE3B,QAAS,WAAO,IAAD,EACbgB,GAAY,GACZH,EAAMkB,SAAN,MAAekG,GAAf,SAAeA,EAAMC,WAArB,EAAe,EAAY7R,OAE7ByJ,MAAK,MACHmI,GADG,SACHA,EAAMC,OADH,SACH,EAAY7R,WADT,EACH,EAAkB7E,WAxB5B,kBAACgS,GAAA,EAAD,CAAMI,KAAK,WAAWd,KAAK,mBACxB,SAAAjC,EAAM3N,YAAN,IAAa1B,OAAQ,UC5Cb,SAAS2W,GAAetH,GAA+B,IAAD,UACjCC,oBAAS,GADwB,WAC5DC,EAD4D,KAChDC,EADgD,KAE7DoH,EAAU/F,GAAe,cAE/B,OACG+F,EAID,kBAAC3G,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC8B,GAAA,EAAD,CACEI,KAAK,WACLd,KAAK,YACLtE,MAAO,CAAEsJ,iBAAkB,GAC3B9H,QAAS,kBAAMoI,GAAWpH,GAAY,KAErC,SAAAH,EAAM3N,QAAN,EAAauC,GAAb,SAAkBoL,EAAM3N,YAAxB,EAAkB,EAAa1B,KAAO,kBAV7C,SAcIqP,EAAMwH,YAdV,EAcI,EAAa7S,KAAI,SAAC8S,GAAD,aACf,kBAAC,KAAK3G,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAASuG,EAAKjS,OAEtByJ,MAAK,MACHwI,GADG,SACHA,EAAMjS,WADH,EACH,EAAY7E,WAxBtB,kBAACgS,GAAA,EAAD,CAAMI,KAAK,WAAWd,KAAK,mBACxB,SAAAjC,EAAM3N,YAAN,IAAa1B,OAAQ,iBCN5B,I,GAAMoW,GAAuBjH,aAAH,gdA4BX,SAAS4H,GAAU1H,GAA0B,IAAD,gBACvBC,oBAAS,GADc,WAClDC,EADkD,KACtCC,EADsC,KAEnDkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAE1C8H,EAASJ,mBAAgB2G,GAAsB,CACrD1G,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDtE,YAAa,CAAC,iBAHVkQ,KAQR,OAFgBgB,GAAe,cAO7B,kBAACZ,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC8B,GAAA,EAAD,CACEI,KAAK,WACLd,KAAK,mBACLtE,MAAO,CAAEsJ,iBAAkB,GAC3B9H,QAAS,kBAAMgB,GAAY,KAE5B,SAAAH,EAAM3N,QAAN,EAAauC,GAAb,SAAkBoL,EAAM3N,YAAxB,EAAkB,EAAa1B,KAAO,aAV3C,MAcI6P,GAdJ,SAcIA,EAAMmB,WAdV,SAcI,EAAgBuF,gBAdpB,SAcI,EAA+BC,YAdnC,EAcI,EAAsCxS,KAAI,SAACyS,GAAD,eACxC,kBAAC,KAAKtG,KAAN,CACE3B,QAAS,WAAO,IAAD,EACbgB,GAAY,GACZH,EAAMkB,SAAN,MAAekG,GAAf,SAAeA,EAAMC,WAArB,EAAe,EAAY7R,OAE7ByJ,MAAK,MACHmI,GADG,SACHA,EAAMC,OADH,SACH,EAAY7R,WADT,EACH,EAAkB7E,WAxB5B,kBAACgS,GAAA,EAAD,CAAMI,KAAK,WAAWd,KAAK,mBACxB,SAAAjC,EAAM3N,YAAN,IAAa1B,OAAQ,YC7C5B,I,MAAMgX,GAAe7H,aAAH,kQAiBH,SAAS8H,GAAU5H,GAA0B,IAAD,UACvBC,oBAAS,GADc,WAClDC,EADkD,KACtCC,EADsC,KAEnDkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAE1C8H,EAASJ,mBAAgBuH,GAAc,CAC7CtH,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,OAF5C4L,KAKF+G,EAAU/F,GAAe,cAE/B,OACG+F,EAID,kBAAC3G,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC8B,GAAA,EAAD,CACEI,KAAK,WACLd,KAAK,WACLtE,MAAO,CAAEsJ,iBAAkB,GAC3B9H,QAAS,kBAAMoI,GAAWpH,GAAY,MAErC,SAAAH,EAAM3N,YAAN,IAAa1B,OAAQ,aAV5B,MAcI6P,GAdJ,SAcIA,EAAMqH,aAdV,EAcI,EAAclT,KAAI,SAACQ,GAAD,OAChB,kBAAC,KAAK2L,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAAS/L,IAEjB8J,MACE9J,EAAMxE,WAxBhB,kBAACgS,GAAA,EAAD,CAAMI,KAAK,WAAWd,KAAK,qBACxB,SAAAjC,EAAM3N,YAAN,IAAa1B,OAAQ,YClB5B,IAAMmX,GAAahI,cAAH,k9BAqEViI,GAAuBjI,cAAH,q7CAsFX,SAASkI,GAAShI,GAAmB,IAAD,oDAC3ClP,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UADK,EAEfyJ,YAAe,GAFA,WAE1C8F,EAF0C,KAE9BC,EAF8B,OAGP/F,YAAe,GAHR,WAG1CgG,EAH0C,KAG1BC,EAH0B,KAMzC/S,GADWgT,2BACmCrI,EAA9C3K,MAAkB2O,GAA4BhE,EAAxCsI,WAAwCtI,EAA5BgE,YAAYuE,EAAgBvI,EAAhBuI,YANW,EAOvBnI,mBAAgB0H,GAAY,CACpDzH,UAAW,CACTzL,GAAIC,OAAOQ,EAAKT,OAFZ4L,EAPyC,EAOzCA,KAAMC,EAPmC,EAOnCA,QAPmC,EAcViD,sBAAsBqE,IAdZ,WAc1CS,EAd0C,KActBC,EAdsB,KAe3CC,EAAcvG,eAAkB,SAAOjN,GAAP,UAAA+O,EAAAC,OAAA,4EAAAD,EAAA,MAE5BuE,EAAmB,CAAEnI,UAAW,CAAEzL,GAAIC,OAAOQ,EAAKT,IAAK+T,QAAS9T,OAAOK,EAAMN,QAFjD,uHAMnC,CAAC4T,EAAoB/M,KAAKC,UAAUrG,KAEjCuT,EAAYzG,eAAkB,SAAOrN,GAAP,UAAAmP,EAAAC,OAAA,4EAAAD,EAAA,MAE1BuE,EAAmB,CAAEnI,UAAW,CAAEzL,GAAIC,OAAOQ,EAAKT,IAAKiU,MAAOhU,OAAOC,EAAIF,QAF/C,uHAMjC,CAAC4T,EAAoB/M,KAAKC,UAAUrG,KAEjCyT,EAAc3G,eAAkB,SAAOhN,GAAP,UAAA8O,EAAAC,OAAA,4EAAAD,EAAA,MAE5BuE,EAAmB,CAAEnI,UAAW,CAAEzL,GAAIC,OAAOQ,EAAKT,IAAKmU,QAASlU,OAAOM,EAAMP,QAFjD,uHAMnC,CAAC4T,EAAoB/M,KAAKC,UAAUrG,KAEjC2T,EAAmB7G,eAAkB,SAAO8G,GAAP,UAAAhF,EAAAC,OAAA,4EAAAD,EAAA,MAEjCuE,EAAmB,CAAEnI,UAAW,CAAEzL,GAAIC,OAAOQ,EAAKT,IAAKsU,aAAcrU,OAAOoU,EAAGrU,QAF9C,uHAMxC,CAAC4T,EAAoB/M,KAAKC,UAAUrG,KAEjC8T,EAAahH,eAAkB,SAAOiH,GAAP,gBAAAnF,EAAAC,OAAA,uDAC7BmF,EAAgBD,EAAiBE,aAAW,IAAIC,KAAQH,GAASI,UAAY,IAAnD,KADG,qBAAAvF,EAAA,MAI3BuE,EAAmB,CACvBnI,UAAW,CACTzL,GAAIC,OAAOQ,EAAKT,IAChBG,WAAYsU,EAAeI,KAAKC,KAAKL,GAAgB,SAPxB,uHAalC,CAACb,EAAoB/M,KAAKC,UAAUrG,KAEjCsU,GAAWxH,eAAkB,qBAAA8B,EAAAC,OAAA,4EAAAD,EAAA,MAEzBuE,EAAmB,CACvBnI,UAAW,CACTzL,GAAIC,OAAOQ,EAAKT,IAChBgV,WAAW,MALgB,uHAWhC,CAACpB,EAAoB/M,KAAKC,UAAUrG,KAEjCwU,GAAgBrI,GAAe,cAC/BsI,GAActI,GAAe,cAC7BuI,GAAgBvI,GAAe,kBAE/BwI,GAAqB7H,eAAkB,SAACsF,GAAgB,IAAD,IAE3D,IAAQ,MAAJA,GAAA,SAAAA,EAAMjS,WAAN,IAAYZ,OAAZ,SAAmB9D,EAAMV,kBAAzB,EAAmB,EAAmBwE,KAAOmV,GAGjD,OAAO,WAAO,IAAD,KACP,SAAAtC,EAAKjS,WAAL,IAAWZ,OAAX,SAAkB9D,EAAMV,kBAAxB,EAAkB,EAAmBwE,IACnCkV,IACF9J,EAAMiK,YAAYxC,GAEXsC,IACT/J,EAAMiK,YAAYxC,MAGrB,CAAChM,KAAKC,UAAUrG,GAAO0U,GAAe/J,EAAMiK,cAU/C,OARA9H,aAAgB,WAAO,IAAD,IACZ,MAAJ3B,GAAA,SAAAA,EAAMnL,OAAN,EAAYpB,WAAgB,MAAJuM,GAAA,SAAAA,EAAMnL,WAAN,IAAYpB,UAAW,IAAMgU,GACvDC,GAAY,KAEb,OAAC1H,GAAD,SAACA,EAAMnL,WAAP,EAAC,EAAYpB,WAKhB,gBAACiW,GAAA,EAAD,CAAMvM,MAAO,CAAE2I,OAAQ,IAAM6D,UAAW,GACtC,gBAACD,GAAA,EAAKhF,MAAN,CACEjG,MAAK,eAAUuB,GAAV,SAAUA,EAAMnL,WAAhB,EAAU,EAAYiT,YAC3BvC,SAAU1Q,EAAK1E,OAEjB,gBAACqU,GAAA,EAAD,CACExH,QAASiD,GAAWgI,EAAShI,QAC7Bb,MAAO9O,EAAMN,MAAMT,OAAOuB,SAE5B,gBAAC4Y,GAAA,EAAK/E,QAAN,CAAcxH,MAAO,CAAEmJ,eAAgB,EAAGL,OAAQwB,OAAamC,EAAY,IAAKC,SAAU,WACxF,gBAAC,GAAD,CAAM1M,MAAO,CAAE2M,cAAe,QAC5B,gBAAC9H,GAAA,EAAD,CAAYC,YAAU,GACpB,gBAACmF,GAAD,CACEtG,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,IAC1CvC,MAAK,MAAEmO,GAAF,SAAEA,EAAMnL,WAAR,EAAE,EAAYF,MACnB+L,SAAU4H,IAEZ,gBAAC9B,GAAD,CACE1F,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,IAC1CvC,MAAK,MAAEmO,GAAF,SAAEA,EAAMnL,OAAR,SAAE,EAAYP,UAAd,EAAE,EAAiBU,KACxB0L,SAAU0H,IAEZ,gBAAClB,GAAD,CACEpG,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,IAC1CvC,MAAK,MAAEmO,GAAF,SAAEA,EAAMnL,OAAR,SAAE,EAAYH,YAAd,EAAE,EAAmBM,KAC1B0L,SAAUwH,IAEZ,gBAACpB,GAAD,CACEhG,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,IAC1CvC,MAAK,MAAEmO,GAAF,SAAEA,EAAMnL,OAAR,SAAE,EAAYJ,iBAAd,EAAE,EAAwBO,KAC/BgS,OAAW,MAAJhH,OAAA,EAAAA,EAAMnL,KAAKmS,QAAS,GAC3BtG,SAAU8H,MAIhB,gBAACuB,GAAA,EAAD,KACE,gBAACA,GAAA,EAAUC,OAAX,CAAkB7M,MAAO,CAAE6I,MAAO,SAChC,gBAAC+D,GAAA,EAAUrF,MAAX,aACA,gBAACqF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,eACA,gBAACF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,aACA,gBAACF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,aALJ,MAQMjK,GARN,SAQMA,EAAMnL,OARZ,SAQM,EAAYmS,YARlB,EAQM,EAAmB7S,KAAI,SAAA8S,GAAS,IAAD,MAE7B,OACE,gBAAC8C,GAAA,EAAUG,IAAX,CAAevL,QAAS6K,GAAmBvC,GAAOkD,cAAc,QAC9D,gBAACJ,GAAA,EAAUK,KAAX,WAAiBnD,GAAjB,SAAiBA,EAAMjS,WAAvB,EAAiB,EAAY7E,MAC7B,gBAAC4Z,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,MAAyBhD,OAAzB,EAAyBA,EAAM1U,YAC/B,gBAACwX,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,MAAyBhD,GAAzB,SAAyBA,EAAMrS,eAA/B,EAAyB,EAAgBzE,MACzC,gBAAC4Z,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,MAAyBhD,GAAzB,SAAyBA,EAAMlS,iBAA/B,EAAyB,EAAkBlB,cAMjDwW,MAAMC,KAAK,CAAC1N,SAAa,MAAJ/H,OAAA,EAAAA,EAAMpB,WAAY,KAAU,MAAJoB,GAAA,SAAAA,EAAMmS,YAAN,IAAapK,SAAU,KAAK,SAAC2N,EAAGC,GAAJ,OAAUA,KAAGrW,KAAI,kBACxF,gBAAC4V,GAAA,EAAUG,IAAX,KACE,gBAACH,GAAA,EAAUK,KAAX,sBACA,gBAACL,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,KACA,gBAACF,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,KACA,gBAACF,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,aAOT,MAACjK,GAAD,SAACA,EAAMnL,QAAN,EAAYN,cAAkB,MAAJyL,GAAA,SAAAA,EAAMnL,WAAN,IAAYN,aAAc,IAAIwU,MAAOC,UAAY,KAC3E,gBAAC,GAAD,CAAM7L,MAAO,CAAEX,KAAM,EAAGM,gBAAiB,UAAWiC,QAAS,IAC3D,gBAAC0G,GAAA,EAAD,oBAEmBgF,aAAoB,IAAI1B,KAA6C,KAArC,MAAC/I,GAAD,SAACA,EAAMnL,WAAP,EAAC,EAAYN,aAFhE,SAON,gBAACmV,GAAA,EAAK9E,QAAN,KAEQ,MAAJ5E,GAAA,SAAAA,EAAMnL,OAAN,EAAYpB,WAAgB,MAAJuM,GAAA,SAAAA,EAAMnL,WAAN,IAAYpB,UAAW,EAAI,KACjD,gBAACoR,GAAA,EAAD,CAAQlG,QAAS,kBAAM+I,GAAaD,KAChCA,EAAa,YAAc,aAGnC,gBAAC,GAAD,CAAMtK,MAAO,CAAEuN,SAAU,MAEvBrB,IAAkB,MAACrJ,GAAD,SAACA,EAAMnL,OAAN,EAAYuU,UAAY,KAErC,MAAJpJ,GAAA,SAAAA,EAAMnL,OAAN,EAAYN,WAER,gBAACsQ,GAAA,EAAD,CAAQtC,KAAK,WAAW5D,QAAS,kBAAMgK,EAAW,QAAlD,UAIA,gBAACvI,GAAA,EAAD,CACEnD,UAAW,kBAAM2K,GAAgB,IACjC5K,QAAS2K,EACTtH,OACE,gBAACwE,GAAA,EAAD,CAAQtC,KAAK,WAAW5D,QAAS,kBAAMiJ,GAAgB,KAAvD,aAKF,gBAAC,KAAKtH,KAAN,CACE3B,QAAS,WACPiJ,GAAgB,GAChBe,EAAW,KAEblK,MAAM,mBAER,gBAAC,KAAK6B,KAAN,CACE3B,QAAS,WACPiJ,GAAgB,GAChBe,EAAW,KAEblK,MAAM,mBAER,gBAAC,KAAK6B,KAAN,CACE3B,QAAS,WACPiJ,GAAgB,GAChBe,EAAW,KAEblK,MAAM,mBAER,gBAAC,KAAK6B,KAAN,CACE3B,QAAS,WACPiJ,GAAgB,GAChBe,EAAW,IAEblK,MAAM,mBAMZ,MAAJuB,GAAA,SAAAA,EAAMnL,OAAN,EAAYuU,UAAY,KAClB,MAAJpJ,GAAA,SAAAA,EAAMnL,OAAN,EAAYN,aAAkB,MAAJyL,OAAA,EAAAA,EAAMnL,KAAKN,aAAa,IAAIwU,MAAOC,UAAY,KAAQK,GAC7E,gBAACxE,GAAA,EAAD,CAAQ1H,MAAO,CAAEwN,WAAY,GAAKpI,KAAK,YAAY5D,QAAS,kBAAMwK,OAAlE,kBAGA,gBAACtE,GAAA,EAAD,CACE1H,MAAO,CAACwN,WAAY,GACpBpI,KAAK,YACL5D,QAAS,kBAAM6E,KACfoH,UAAW7C,GAAe8C,SAAY,MAAJ7K,GAAA,SAAAA,EAAMnL,WAAN,IAAYN,aAAcyL,EAAKnL,KAAKN,YAAa,IAAIwU,MAAOC,UAAY,MAJ5G,cAgBd,I,GAAe3M,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,SAChB6J,eAAgB,GAElB7H,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETJ,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,K,qkBC7bZ,IAAM+E,GAAiBxL,aAAH,4+BA6DL,SAASyL,KAAkB,IAAD,0BACjCza,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UADL,EAEDyJ,YAAe,GAFd,WAEhCqJ,EAFgC,KAElBC,EAFkB,KAGjCpR,EAAWb,KAHsB,EAIJ4G,mBAAgBkL,GAAgB,CACjEjL,UAAW,CACTiB,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,IAC1C8W,kBAAmBC,aAAW,IAAIpC,MAAQC,UAAY,KAExD9H,YAAa,aALPlB,EAJ+B,EAI/BA,KAAMC,EAJyB,EAIzBA,QAASC,EAJgB,EAIhBA,QAQjB7B,EAAawJ,2BACbuD,EAAYC,0BAElB1J,aAAgB,WACVyJ,GACFlL,MAED,CAACkL,IAEJ,IAAMjF,IAAa,MAACnG,GAAD,SAACA,EAAMmB,WAAP,SAAC,EAAgBkG,UAAhB,EAAwBzK,QACtCwJ,IAAkB,MAACpG,GAAD,SAACA,EAAMmB,WAAP,SAAC,EAAgBjN,eAAhB,EAA6B0I,QAChDvJ,IAAY,MAAC2M,GAAD,SAACA,EAAMmB,YAAN,EAAgB9N,UAC7BiY,EAAkBnF,GAAaC,EAErCzE,aAAgB,WAAO,IAAD,EACI,EAAxB,MAAI3B,GAAJ,SAAIA,EAAMmB,WAAN,EAAgB/M,KAClByF,EAAS9D,GAAchF,YAAYiP,EAAKmB,WAExCtH,EACE9D,GAActF,QAAd,eACKH,OADL,EACKA,EAAOV,cACF,MAAJoQ,GAAA,SAAAA,EAAMmB,eAAN,IAAgBvR,YAAYoF,OAAQ,SAI7C,CAACiG,KAAKC,UAAL,MAAe8E,OAAf,EAAeA,EAAMmB,YAEzBQ,aAAgB,WAAO,IAAD,gBACZ,MAAJ3B,GAAA,SAAAA,EAAMmB,WAAN,EAAgBnQ,eAAoB,MAAJgP,GAAA,SAAAA,EAAMmB,eAAN,IAAgBnQ,iBAAhB,SAAiCV,EAAMN,QAAvC,SAAiC,EAAaT,aAA9C,EAAiC,EAAqBqB,UACxFiJ,EAAS9D,GAAcpF,gBAAgBqP,EAAKmB,SAASnQ,eAG/C,MAAJgP,GAAA,SAAAA,EAAMmB,WAAN,EAAgBlQ,iBAAsB,MAAJ+O,GAAA,SAAAA,EAAMmB,eAAN,IAAgBlQ,mBAAhB,SAAmCX,EAAMN,QAAzC,SAAmC,EAAaT,aAAhD,EAAmC,EAAqBuB,SAC5F+I,EAAS9D,GAAcpF,gBAAgBqP,EAAKmB,SAASlQ,mBAEtD,OACD+O,GADC,SACDA,EAAMmB,eADL,EACD,EAAgBnQ,aADf,MAEDgP,GAFC,SAEDA,EAAMmB,eAFL,EAED,EAAgBlQ,iBAGlB,IAAM8V,EAAU/F,GAAe,cACzBuK,EAAgBvK,GAAe,cAErC,OACE,gCAEA,gBAACiC,GAAD,CACEsB,KAAMyG,EACNlG,QAAS,kBAAMmG,GAAc,IAC7B7G,UAAW,kBAAM6G,GAAc,MAEjC,gBAACzG,GAAA,EAAD,CAAaxH,QAASiD,EAASwE,eAAa,EAACrF,MAAO9O,EAAMN,MAAMT,OAAOuB,SACrE,gBAAC,GAAD,CAAMqM,MAAOoB,GAAOhC,YAGf0D,IACEqL,EAEK,gBAAC,GAAD,CAAMnO,MAAO,CAAE6I,MAAO,OAAQxJ,KAAM,EAAIyJ,OAAQuF,KAAWC,IAAI,UAAUxF,WAClE,MAAJjG,GAAA,SAAAA,EAAMmB,WAAN,WAAgBuK,QAAhB,WAAuB/E,YAAvB,IAA8B/J,SAAU,GAAK,EAC5C,gBAAC0I,GAAD,CACE7G,MAAM,wBACN8G,SAAS,uBAEX,gBAAC,KAAD,CACEpI,MAAO,CAAEX,KAAM,EAAGyJ,OAAQuF,KAAWC,IAAI,UAAUxF,QACnD0F,sBAAuB,CAAEjB,SAAU,GACnCkB,WAAY,EACZ5L,MAAU,MAAJA,GAAA,SAAAA,EAAMmB,WAAN,WAAgBuK,YAAhB,IAAuB/E,QAAS,GACtCkF,WAAY5L,EACZ6L,UAAW5L,EACX6L,WAAY,0BAASnF,EAAT,EAAGhR,KAAYoW,EAAf,EAAeA,MAAf,OACV,MAACpF,KAAMC,KACL,gBAACW,GAAD,CACEpW,IAAG,QAAUwV,EAAKC,KAAKzS,GACvBS,KAAM+R,EAAKC,KACXkB,YAAahB,IAAO,MAAIH,GAAJ,SAAIA,EAAMC,WAAV,EAAI,EAAYrS,WAAU,MAACoS,GAAD,SAACA,EAAMC,OAAN,EAAYoF,QAC3DnE,aAAiB,MAAJ9H,GAAA,SAAAA,EAAMmB,WAAN,WAAgBuK,QAAhB,WAAuB/E,YAAvB,IAA8B/J,SAAU,GAAKoP,EAC1DvC,YAAa,SAACxC,GACZpN,EAASrD,GAASlD,YAAY2T,IAC9BpN,EACErD,GAAS7D,SAAS,CAAC,OAAQiU,EAAKC,QAElCoE,GAAc,IAEhBzH,WAAY,WACV3J,EACErD,GAAS7D,SAAS,CAAC,OAAQrC,EAAMV,eAEnCiK,EACErD,GAAS7D,SAAS,CAAC,OAAQiU,EAAKC,QAElCoE,GAAc,MApBN,SAfxB,gBAAC/E,GAAD,CAAkBC,YAAWC,iBAAgB/S,cA4CnDkY,GAAiBD,GACjB,gBAACY,GAAA,EAAD,CACE/O,MAAOoB,GAAOqH,IACduG,OAAK,EACL1K,KAAK,OACL9C,QAAS,kBAAMN,EAAW+N,SAAS,qBACnC5J,MAAM,eAQlB,IAAMjE,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETJ,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,K,UC7NL,SAASsG,GAAS7M,GACvB,OAAO,gBAAC,GAAD,QAAUA,EAAV,CAAiBrC,MAAO,CAACqC,EAAMrC,MAAO,CAAEmP,WAAY,kBCG9C,SAASC,GAAT,GAAqD,IAA3B7R,EAA0B,EAA1BA,KACvC,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAMyC,MAAOoB,GAAOiO,qBAClB,kBAAC,GAAD,CACErP,MAAOoB,GAAOkO,eACdtH,WAAW,kBACXC,UAAU,yBAHZ,qCAOA,kBAAC,GAAD,CACEjI,MAAO,CAACoB,GAAOmO,uBAAwBnO,GAAOoO,oBAC9CvH,UAAU,yBACVD,WAAW,oBACX,kBAACkH,GAAD,KAAW3R,IAGb,kBAAC,GAAD,CACEyC,MAAOoB,GAAOkO,eACdtH,WAAW,kBACXC,UAAU,yBAHZ,mFAQF,kBAAC,GAAD,CAAMjI,MAAOoB,GAAOqO,eAClB,kBAAClO,GAAA,EAAD,CAAkBC,QAASkO,GAAiB1P,MAAOoB,GAAOuO,UACxD,kBAAC,GAAD,CAAM3P,MAAOoB,GAAOwO,aAAc5H,WAAYD,GAAOzJ,MAAMG,MAA3D,6EASV,SAASiR,KACPG,KACE,0FAIJ,IAAMzO,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNM,gBAAiB,QAEnBmQ,oBAAqB,CACnBlK,aAAc,GACd/D,SAAU,GACVkO,WAAY,GACZxH,UAAW,UAEbyH,iBAAkB,CAChBC,WAAY,IAEdC,iBAAkB,CAChBvO,WAAY,SACZI,UAAW,GACX6D,aAAc,IAEhBuK,aAAc,CACZtH,MAAO,IACPC,OAAQ,GACRsH,WAAY,UACZrO,UAAW,EACXyL,YAAa,IAEf6B,oBAAqB,CACnB1N,WAAY,SACZ2H,iBAAkB,IAEpBkG,mBAAoB,CAClBrG,eAAgB,GAElBkH,kBAAmB,CACjBpO,MAAO,yBAETsN,uBAAwB,CACtBe,aAAc,EACdC,kBAAmB,GAErBjB,eAAgB,CACdzN,SAAU,GACVkO,WAAY,GACZxH,UAAW,UAEbkH,cAAe,CACb1N,UAAW,GACXuH,iBAAkB,GAClB3H,WAAY,UAEdgO,SAAU,CACR3N,gBAAiB,IAEnB4N,aAAc,CACZrH,UAAW,YCnGA,SAAShI,KACtB,OACE,gBAAC,GAAD,CAAMP,MAAOoB,GAAOhC,WAClB,gBAAC,GAAD,CAAMY,MAAOoB,GAAOE,OAApB,WACA,gBAAC,GAAD,CAAMtB,MAAOoB,GAAO8H,UAAWlB,WAAW,OAAOC,UAAU,0BAC3D,gBAACmH,GAAD,CAAgB7R,KAAK,6BAK3B,I,MAAM6D,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,SC1BH/P,GAAYzE,EAAZyE,Q,UCYFkR,GAAe7H,aAAH,kQAiBH,SAASqO,GAAYnO,GAAsB,IAAD,QACrBC,oBAAS,GADY,WAChDC,EADgD,KACpCC,EADoC,KAEjDkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAFK,EAIpB0H,mBAAgBuH,GAAc,CAC/DtH,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,OAF5C4L,EAJ+C,EAI/CA,KAJ+C,EAIzCC,QAJyC,EAIhCC,QAKvB,OACE,kBAACE,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC,KAAKC,KAAN,CACE3B,QAAS,WACPgB,GAAY,IAEdlB,OACE,SAAAe,EAAM3N,YAAN,IAAa1B,OAAQ,oBAEvBoQ,YAAcf,EAAMgB,SAAwB,KAAb,WAC/BmC,MAAO,kBAAM,kBAAC,KAAKnB,KAAN,CAAWC,KAAK,iBAZnC,MAgBIzB,GAhBJ,SAgBIA,EAAMqH,aAhBV,EAgBI,EAAclT,KAAI,SAACQ,GAAD,OAChB,kBAAC,KAAK2L,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAAS/L,IAEjB8J,MACE9J,EAAMxE,MAAQ,IAEhBoQ,YACE5L,EAAMpB,mBC/DpB,IA4Beqa,GCfR,SACLC,EACAC,GAGC,IACOC,EAAeD,EAAfC,WAER,OAAO,SAAqBC,GAA0E,IAC5FnO,EAAuBmO,EAAvBnO,UAAW7F,EAAYgU,EAAZhU,QACbH,EAAWb,KAFkF,EAI3C4G,mBAASiO,EAAO,CACtEhO,cADMG,EAJ2F,EAI3FA,KAAMC,EAJqF,EAIrFA,QAASgO,EAJ4E,EAI5EA,aAAc/N,EAJ8D,EAI9DA,QAASpO,EAJqD,EAIrDA,MAIxCoc,EAAkBnU,mBAAQ,kBAAMgU,EAAW/N,KAAO,CAAC/E,KAAKC,UAAU8E,KAiBxE,OAfAmO,qBAAU,WACWlT,KAAKC,UAAU+S,GAAkBhT,KAAKC,UAAU8E,GACnE,MAAIlO,KAAOyI,WACuB,IAA5ByT,EAAKI,oBACPvU,EACEvD,GAAgB7E,aAAa,CAAE8I,QAASzI,EAAMyI,QAASC,QAAS,WAIpER,EAASlI,EAAMyI,YAGhB,CAACyT,EAAKhU,QAAN,MAAelI,OAAf,EAAeA,EAAOyI,UAGlB,CACL0F,UACAD,KAAMkO,EACNhO,YDrBS0N,CA5BctO,aAAH,gaA+BA,CACvByO,WAAY,SAACF,GAAD,mBAAWA,GAAX,SAAWA,EAAO1M,eAAlB,EAAW,EAAiBuF,iBEnB5B,SAAS2H,GAAmB7O,GAA6B,IAAD,YACnCC,oBAAS,GAD0B,WAC9DC,EAD8D,KAClDC,EADkD,KAE/DkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAFmB,EAIlCoW,GAAsB,CACvDzO,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDtE,YAAa0P,EAAM+O,uBAHfvO,EAJ6D,EAI7DA,KAJ6D,EAIvDC,QAJuD,EAI9CC,QAOvB,OACE,oCACE,kBAACwE,GAAA,EAAD,KAAQlF,EAAMgD,OACd,kBAACpC,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC,KAAKC,KAAN,CACE3B,QAAS,WACPgB,GAAY,IAEdlB,MACE,SAAAe,EAAM3N,QAAN,WAAamD,OAAb,EAAmBZ,GAAnB,SAAwBoL,EAAM3N,YAA9B,EAAwB,EAAamD,KAAK7E,KAAO,mBAEnDgN,MAAO,CAAE6I,MAAO,QAChBrD,MAAO,kBAAM,kBAAC,KAAKnB,KAAN,CAAWC,KAAK,aAC7BlB,YAAcf,EAAMgB,SAAwB,KAAb,cAbrC,MAiBIR,GAjBJ,SAiBIA,EAAM2G,YAjBV,EAiBI,EAAaxS,KAAI,SAACyS,GAAD,mBACf,kBAAC,KAAKtG,KAAN,CACEnD,MAAO,CAAE6I,MAAO,QAChBrH,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAAN,MAAekG,OAAf,EAAeA,EAAMC,OAEvBpI,OACM,MAAJmI,GAAA,SAAAA,EAAMC,OAAN,WAAY7R,WAAZ,IAAkB7E,OAAQ,IAE5BoQ,aACM,MAAJqG,GAAA,SAAAA,EAAMC,OAAN,WAAY3R,WAAZ,IAAkB/E,OAAQ,Y,IClDlC8F,GAAYzE,GAAZyE,QAIO,SAASuY,KAAY,IAAD,UAC3Ble,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMoI,YACtCmB,EAAWb,KACX6H,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAGlD,OACE,gCACE,gBAACoK,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAOxB,KAAK2B,MAC3B2c,YAAY,WACZ5c,MAAOvB,EAAMqB,OAAOxB,KAAK0B,OAAS,GAClCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAEjE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOxB,KAAK2B,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOxB,KAAK2B,OAAS,mCAG/B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAO8B,SAAS3B,MAC/BD,MAAK,SAAEvB,EAAMqB,OAAO8B,WAAf,SAAE,EAAuB5B,YAAzB,EAAE,EAA8B4Q,WACrCI,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,WAAY0B,OAAOyO,SAE5E,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO8B,SAAS3B,MAAQ,QAAU,QACxDxB,EAAMqB,OAAO8B,SAAS3B,OAAS,IAEnC,gBAACwM,EAAA,EAAD,CAAMnB,MAAO,CAAE6I,MAAO,SACpB,gBAAC2H,GAAD,CACE9b,MAAOvB,EAAMqB,OAAOgD,MAAM9C,MAC1B2O,UAAQ,EACRE,SAAU,SAAC7O,GACTgI,EAAS5D,GAAQtD,SAAS,CAAC,QAASd,KACpCgI,EAAS5D,GAAQtD,SAAS,CAAC,WAAYd,EAAM4B,aAE/CqN,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,MAElD,gBAAC0N,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOgD,MAAM7C,MAAQ,QAAU,QACrDxB,EAAMqB,OAAOgD,MAAM7C,OAAS,IAGhC,gBAAC4c,GAAA,EAASpO,KAAV,CACEkC,MAAM,2BACNmM,OAAUre,EAAMqB,OAAO6C,OAAO3C,MAC1B,UACA,YAEJ8M,QACE,kBAAM9E,EAAS5D,GAAQtD,SAAS,CAAC,UAAWrC,EAAMqB,OAAO6C,OAAO3C,YAIpE,gBAACwQ,GAAA,EAAD,CAASlF,MAAO,CAAEmJ,eAAgB,KAElC,gBAAC+H,GAAD,CACE7L,MAAM,MACN9B,SAAU,SAAAkO,GAAM,OAAI/U,EAAS5D,GAAQtD,SAAS,CAAC,MAAOic,MACtD9N,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDvC,MAAOvB,EAAMqB,OAAO2C,IAAIzC,OAAS,KACjC0c,oBAAqB,CAAC,YACtB/N,UAAQ,IAEV,gBAACsB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO2C,IAAIxC,MAAQ,QAAU,QACnDxB,EAAMqB,OAAO2C,IAAIxC,OAAS,IAG9B,gBAACuc,GAAD,CACE7L,MAAM,QACN9B,SAAU,SAAAkO,GAAM,OAAI/U,EAAS5D,GAAQtD,SAAS,CAAC,QAASic,MACxD9N,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDvC,MAAOvB,EAAMqB,OAAO+C,MAAM7C,OAAS,KACnC0c,oBAAqB,CAAC,gBAExB,gBAACzM,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO+C,MAAM5C,MAAQ,QAAU,QACrDxB,EAAMqB,OAAO+C,MAAM5C,OAAS,MAOxC,IAAMyM,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACN6K,KAAM,EACNwJ,MAAO,QAETpT,MAAO,CACLmQ,aAAc,EACdiD,MAAO,U,UCnGI,SAAS6I,GAAiBrP,GAA2B,IAE1DyG,EAAW6I,eAAX7I,OACAjW,EAAUkJ,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAAxClI,MAGR,OACE,kBAACgS,GAAA,EAAD,CAAY7E,MAAO,CAACoB,GAAOhC,UAAW,CAAEO,gBAAiB9M,EAAMT,OAAOwf,QAAS9I,OAAQA,EAAU,KAAWzG,EAAMrC,OAAQwO,sBAAuB,CAACpN,GAAOyQ,QAASxP,EAAMmM,wBACrKnM,EAAM5F,UAKb,I,GAAM2E,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,GAERwS,QAAS,CACPtB,kBAAmB,GACnB5O,WAAY,aACZ4L,SAAU,EACVuE,cAAe,MCZXhZ,GAAYzE,GAAZyE,QAIFiZ,IAH6B/Y,EAA3BF,QAGqBqJ,cAAH,kxBAgDX,SAAS6P,KAAoB,IAAD,EACQjW,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EACjCoI,SAAyBmI,EADQ,EAChB3I,OACnB2B,EAAWb,KAEXqF,EAAawJ,2BAJsB,EAMN3E,sBAAsBgM,IANhB,WAMlCE,EANkC,KAMdpP,EANc,KAQnCqD,EAAW1B,eAAkB,WACjC,IAAI0N,GAAW,EAuBf,OArBI/e,EAAMqB,OAAO8B,SAAS5B,MAAS,IACjCwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,WAAY,+CAIlCvC,EAAMqB,OAAOgD,MAAM9C,QACtBwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,QAAS,sCAI/BvC,EAAMqB,OAAO2C,IAAIzC,QACpBwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,MAAO,yCAI1Bwc,IACP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,iFAAA8B,EAAAC,OAAA,qDACmCpT,EAAMqB,OAAhExB,EADuB,EACvBA,KAAMmE,EADiB,EACjBA,IADiB,EACZG,WAAYE,EADA,EACAA,MAAOlB,EADP,EACOA,SAAUiB,EADjB,EACiBA,MAAOF,EADxB,EACwBA,QAInD6O,IAL2B,6CAAAI,EAAA,MAON2L,EAAmB,CACtCvP,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDjE,KAAMA,EAAK0B,MACX4B,SAAUA,EAAS5B,MACnB0W,QAAS,SAAA5T,EAAM9C,QAAN,EAAauC,GAAKC,OAAM,SAACM,EAAM9C,YAAP,EAAC,EAAauC,IAAM,KACrD+T,QAAS,SAAAzT,EAAM7C,QAAN,EAAauC,GAAKC,OAAM,SAACM,EAAM9C,YAAP,EAAC,EAAauC,IAAM,KACrDiU,MAAO,SAAA/T,EAAIzC,QAAJ,WAAWmD,OAAX,EAAiBZ,GAAKC,OAAM,SAACC,EAAIzC,QAAL,SAAC,EAAWmD,WAAZ,EAAC,EAAiBZ,IAAM,KAC3DI,SAAUA,EAAO3C,UAfM,UAOrBmS,EAPqB,OAmB3B,SAAAA,EAAOhE,OAAP,WAAauP,aAAb,WAAyBrL,cAAzB,EAAsC/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QAClD,OAAQ3H,GACN,IAAK,OACH,OAAOiH,EAAS5D,GAAQpD,cAAc,CAAC,OAAQ0H,KACjD,IAAK,WACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,WAAY0H,KACrD,IAAK,QACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,QAAS0H,KAClD,IAAK,MACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,MAAO0H,KAChD,IAAK,UACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,SAAU0H,KACnD,IAAK,QACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,QAAS0H,SAhC3B,MAoCvByJ,GApCuB,SAoCvBA,EAAQhE,OApCe,SAoCvB,EAAcuP,aApCS,SAoCvB,EAA0BpL,UAA1B,EAAkCvH,OApCX,yCAqClB/C,EACL2V,GAAS/d,aAAa,CAAE8I,QAASyJ,EAAOhE,KAAKuP,WAAWpL,OAAO,GAAI3J,QAAS,YAtCrD,OA0C3B,SAAIwJ,EAAOhE,OAAX,SAAI,EAAauP,aAAb,EAAyB1a,OACnBA,EAASmP,EAAOhE,KAAKuP,WAArB1a,KACRgF,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,QAAS1F,EAAK1E,KAAf,WAA+BqK,QAAS,aAGrE,SAACwJ,EAAOhE,OAAR,SAAC,EAAauP,aAAb,EAAyBrL,aAC5B7F,EAAWoR,UAjDY,kDAqD3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WAtDhC,mEA2D9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAUuV,IAE5C,OACE,gBAACP,GAAD,CAAkBlD,sBAAuBpN,GAAOyQ,SAC5C,gBAACU,GAAA,EAAD,CAAwBvf,KAAK,mBAAmBwf,KAAM,IAAKvQ,MAAM,UAAUjC,MAAO,CAAEyS,UAAW,SAAU1Q,UAAW,MACpH,gBAACsP,GAAD,MACA,gBAAC,GAAD,CAAMrR,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CAAQtC,KAAK,YAAYpF,MAAOoB,GAAOsR,OAAQjF,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAtG,UAQV,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/B0S,QAAS,CACPtB,kBAAmB,IAErBmC,OAAQ,GAERpR,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACN2U,eAAgB,GAChBN,MAAO,QAETpT,MAAO,CACLmQ,aAAc,K,mBC9LZ+M,GAAkBxQ,cAAH,sKA0ErB,IAAMf,GAASlC,KAAWC,OAAO,CAC/BN,QAAS,CACP8N,cAAe,MACfhL,WAAY,SACZmH,OAAQ,GACRD,MAAO,OACPlJ,gBAAiB,UACjBL,eAAgB,gBAChBiR,kBAAmB,MAIRqC,GAlEf,YAAoE,IAAD,cAAjD1R,EAAiD,EAAjDA,WAAY2R,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,MAA2B,EACjBxQ,oBAAS,GADQ,WAC1DyQ,EAD0D,KACxCC,EADwC,KAEzDnQ,EAASJ,mBAAgBkQ,IAAzB9P,KAFyD,EAG9B9G,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAAzDrI,EAHyD,EAGzDA,gBACFgK,GAJ2D,EAGxC7J,MACRgJ,MAEXoX,IAAU,MAACvgB,GAAD,SAACA,EAAiBD,cAAlB,SAAC,EAA8BoF,OAA/B,SAAC,EAAoCC,QAApC,EAA0C2H,QACrDyT,IAAiB,MAACxgB,GAAD,SAACA,EAAiBD,cAAlB,SAAC,EAA8BoF,QAA9B,EAAoCzC,YAEtD+d,GAAoBF,IAAWC,EAErC,OACE,oCACA,kBAACE,GAAA,EAAOvG,OAAR,KACGgG,EAAW,kBAACO,GAAA,EAAOC,WAAR,CAAmB7R,QAASN,EAAWoR,SAAa,KAChE,kBAACc,GAAA,EAAO5L,QAAR,CAAgBlG,MAAOwR,EAAMQ,WAAW3C,QAAQrP,QAChD,kBAAC2B,GAAA,EAAD,CACEnD,UAAW,kBAAMkT,GAAoB,IACrCnT,QAASkT,EACT7P,OACE,kBAAC,KAAD,CACE1B,QAAS,kBAAMwR,GAAoB,IACnChT,MAAO,CAAEiC,MAAO,QAASsR,YAAa,IAFxC,MAIG7gB,OAJH,EAIGA,EAAiBM,OARxB,MAYI6P,GAZJ,SAYIA,EAAM2Q,YAZV,SAYI,EAAiBhK,YAZrB,EAYI,EAAwBxS,KAAI,SAACyS,GAAD,aAC1B,kBAACxG,GAAA,EAAKE,KAAN,CACE7B,MAAK,MAAEmI,GAAF,SAAEA,EAAMC,WAAR,EAAE,EAAY1W,KACnBwO,QAAS,WACP9E,EAAS9D,GAAchF,YAAd,MAA0B6V,OAA1B,EAA0BA,EAAMC,OACzCsJ,GAAoB,WAO9BG,GACA,kBAAChS,EAAA,EAAD,CAAMnB,MAAOoB,GAAOvC,SAClB,kBAACyJ,GAAA,EAAD,0CAGA,kBAACZ,GAAA,EAAD,CAAQzF,MAAM,QAAQmD,KAAK,WAAW5D,QAAS,kBAAMN,EAAW+N,SAAS,aAAzE,oBCzDFwE,GAAWC,eAEF,SAASC,KACtB,IAAMjQ,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAClD,OACE,gBAAC0Y,GAASG,UAAV,CACEC,cAAe,CACbC,eAAgBpQ,EAAY9Q,cAAe8Q,EAAYhR,iBACvDqhB,OAAQ,SAAC1R,GAAD,OAAW,gBAAC,GAAWA,IAC/B2R,UAAW,CACT3U,KAAM,KAIV,gBAACoU,GAASQ,OAAV,CAAiBjhB,KAAK,iBAAiBkhB,UAAWtG,GAAgB+C,QAAS,CAAErP,MAAO,cACpF,gBAACmS,GAASQ,OAAV,CAAiBjhB,KAAK,aAAakhB,UAAW3T,GAAYoQ,QAAS,CAAErP,MAAO,WAC5E,gBAACmS,GAASQ,OAAV,CAAiBjhB,KAAK,mBAAmBkhB,UAAWlC,GAAkBrB,QAAS,CAAErP,MAAO,kBChB/EpC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,SCpBK6K,e,0CCGD,SAASS,GAAW9R,GAAqB,IAAD,EAC7BmC,YAAe,GADc,WAC9C4C,EAD8C,KACxCgN,EADwC,KAG7B5P,eAAkB,WACxC4P,GAAQ,KACP,CAACA,IAEoB5P,eACtB,YAA+B,IAA5B6P,EAA2B,EAA3BA,KACDD,GAAQ,GACR/R,EAAMiS,SAASD,EAAKxI,UAAY,OAElC,CAACuI,EAAS/R,EAAMiS,WAGlB,OACE,gCACA,gBAACrR,GAAA,EAAD,CACEnD,UAAW,kBAAMsU,GAAQ,IACzBvU,QAASuH,EACTlE,OACE,gBAAC,KAAKC,KAAN,CACE3B,QAAS,kBAAM4S,GAAQ,IACvB3G,WAAYpL,EAAMoL,SAClBnM,MAAOe,EAAMgD,MACbjC,YACEf,EAAMkS,UACJC,aAAyB,IAAlBnS,EAAMkS,UAAkB,cAC/B,mBAEJnQ,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,iBAGhC,gBAAC,KAAD,CACEmQ,aAAcpS,EAAMkS,UAAY,CAAC,IAAI3I,KAAuB,IAAlBvJ,EAAMkS,YAAqB,GAErEG,WAAY,SAACL,GACXhS,EAAMiS,SAASD,EAAKxI,UAAY,KAChCuI,GAAQ,Q,ICxCVtb,GAAYzE,GAAZyE,QAEO,SAAS6b,KAAW,IAAD,EAC1BxhB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM6G,WACtC0C,EAAWb,KAFe,EAGc2I,YAAe,GAH7B,qBAKhC,OACE,gCACE,gBAACW,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAO0D,KAAKvD,MAC3BD,MAAOvB,EAAMqB,OAAO0D,KAAKxD,OAAS,GAClCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAEjE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO0D,KAAKvD,MAAQ,QAAU,QACpDxB,EAAMqB,OAAO0D,KAAKvD,OAAS,uBAG/B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAO2D,MAAMxD,MAC5BD,MAAOvB,EAAMqB,OAAO2D,MAAMzD,OAAS,GACnCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,QAASmQ,QAElE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO2D,MAAMxD,MAAQ,QAAU,QACrDxB,EAAMqB,OAAO2D,MAAMxD,OAAS,YAGhC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,SACN1Q,QAASxB,EAAMqB,OAAO4D,OAAOzD,MAC7BD,MAAOvB,EAAMqB,OAAO4D,OAAO1D,OAAS,GACpCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,SAAUmQ,QAEnE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO4D,OAAOzD,MAAQ,QAAU,QACtDxB,EAAMqB,OAAO4D,OAAOzD,OAAS,IAGjC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,sBACN1Q,QAASxB,EAAMqB,OAAO8D,WAAW3D,MACjCD,OAAO,SAAAvB,EAAMqB,OAAO8D,WAAW5D,YAAxB,IAA+B4Q,aAAc,GACpDC,aAAa,aACbG,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,aAAc0B,OAAOyO,SAE9E,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO8D,WAAW3D,MAAQ,QAAU,QAC1DxB,EAAMqB,OAAO8D,WAAW3D,OAAS,+BAGrC,gBAACwf,GAAD,CACEI,UAAWphB,EAAMqB,OAAO6D,gBAAgB3D,QAAS,IAAIkX,MAAOC,UAAY,IACxEyI,SAAU,SAACM,GAAD,OAAUlY,EAAS5D,GAAQtD,SAAS,CAAC,kBAAmBof,MAClEvP,MAAM,gCAMd,I,MAAMjE,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACN6K,KAAM,GAER5J,MAAO,CACLmQ,aAAc,K,qkBClElB,I,GAAMiP,GAAsB1S,cAAH,i/BAwDnB2S,GAAsB3S,cAAH,khCA0DV,SAAS4S,GAAU1S,GAA6B,IAAD,EACtD3F,EAAWb,KACX1I,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM6G,WACtC0J,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAHU,EAIpBgL,sBAAsB8O,IAJF,WAIrDG,EAJqD,KAIlCC,EAJkC,OAKpBlP,sBAAsB+O,IALF,WAKrDI,EALqD,KAKlCC,EALkC,KAOtDjP,EAAWC,uBAAY,WAC3B,IAAIC,GAAY,EAoChB,OAnCKjT,EAAMqB,OAAO0D,KAAKxD,QACrB0R,GAAY,EACZ1J,EACE1C,GAAQtE,cAAc,CAAC,OAAQ,eAI9BvC,EAAMqB,OAAO2D,MAAMzD,QACtB0R,GAAY,EACZ1J,EACE1C,GAAQtE,cAAc,CAAC,QAAS,eAI/BvC,EAAMqB,OAAO4D,OAAO1D,QACvB0R,GAAY,EACZ1J,EACE1C,GAAQtE,cAAc,CAAC,SAAU,eAIhCvC,EAAMqB,OAAO8D,WAAW5D,QAC3B0R,GAAY,EACZ1J,EACE1C,GAAQtE,cAAc,CAAC,aAAc,eAIpCvC,EAAMqB,OAAO6D,gBAAgB3D,QAChC0R,GAAY,EACZ1J,EACE1C,GAAQtE,cAAc,CAAC,kBAAmB,gBAItC0Q,IACP,CAACtI,KAAKC,UAAU5K,EAAMqB,UAEnB2d,EAAShM,uBAAY,iDAAAG,EAAAC,OAAA,mDAEpBL,IAFoB,iEAMjB4E,EAAW,SAAA3X,EAAM4C,WAAN,EAAgBkB,GAAKie,EAAoBF,EANnC,YAAA1O,EAAA,MAOAwE,EAAS,CAC9BpI,UAAU,SACL,SAAAvP,EAAM4C,WAAN,EAAgBkB,GAAK,CAAEA,GAAE,SAAE9D,EAAM4C,eAAR,EAAE,EAAgBkB,IAAO,IAD9C,IAEPiB,KAAM/E,EAAMqB,OAAO0D,KAAKxD,MACxByD,MAAOhF,EAAMqB,OAAO2D,MAAMzD,MAC1B0D,OAAQjF,EAAMqB,OAAO4D,OAAO1D,MAC5B4D,WAAYnF,EAAMqB,OAAO8D,WAAW5D,MACpC2D,gBAAiBlF,EAAMqB,OAAO6D,gBAAgB3D,MAC9CkO,OAAQP,EAAMO,OAAS1L,OAAOmL,EAAMO,QAAU,KAC9Ce,WAAYtB,EAAMsB,WAAazM,OAAOmL,EAAMsB,YAAc,UAhBvC,UAOjByR,EAPiB,OAqBjB,OAFAvO,EAAS,SAAA1T,EAAM4C,WAAN,EAAgBkB,GAAhB,SAAqBme,EAASvS,WAA9B,EAAqB,EAAewS,UAApC,SAAgDD,EAASvS,WAAzD,EAAgD,EAAeyS,YAE9E,SAAAzO,EAAQE,cAAR,EAAqB/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QACjC,OAAQ3H,GACN,IAAK,OACH,OAAOiH,EAAS1C,GAAQtE,cAAc,CAAC,OAAQ0H,KACjD,IAAK,QACH,OAAOV,EAAS1C,GAAQtE,cAAc,CAAC,QAAS0H,KAClD,IAAK,SACH,OAAOV,EAAS1C,GAAQtE,cAAc,CAAC,SAAU0H,KACnD,IAAK,aACH,OAAOV,EAAS1C,GAAQtE,cAAc,CAAC,aAAc0H,KACvD,IAAK,oBACH,OAAOV,EAAS1C,GAAQtE,cAAc,CAAC,kBAAmB0H,SAhCzC,MAmCnByJ,GAnCmB,SAmCnBA,EAAQG,UAAR,EAAgBvH,OAnCG,0CAoCd/C,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAO,MAAEyJ,OAAF,EAAEA,EAAQG,OAAO,GAAI3J,QAAS,YApC/D,QAsCnB,MAACwJ,GAAD,SAACA,EAAQE,cAAR,EAAqBtH,QACxB4C,EAAM4E,YAvCe,kDA2CvBvK,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WA3ClD,mEA6CxB,CAACS,KAAKC,UAAU5K,EAAMqB,QAASwgB,EAAmB3S,EAAM4E,YAE3D,OACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQtH,UAAWwC,EAAM+E,MACvB,kBAACC,GAAA,EAAD,CAAaC,eAAa,EAACzH,QAASoV,EAAWnS,SAAWqS,EAAWrS,QAASb,MAAOyB,EAAY7Q,MAAMT,OAAOuB,SAC9G,kBAACwT,GAAA,EAAOI,MAAR,MACW,MAALpU,GAAA,SAAAA,EAAO4C,WAAP,EAAiBkB,GAAK,OAAS,OADrC,QAGA,kBAACkQ,GAAA,EAAOK,QAAR,KACE,kBAACmN,GAAD,OAEF,kBAACxN,GAAA,EAAOM,QAAR,CAAgBzH,MAAO,CAAEV,eAAgB,aACvC,kBAACoI,GAAA,EAAD,CACElG,QAAS,WACP9E,EAAS1C,GAAQ/E,SACjBoN,EAAMsF,YAHV,UASA,kBAACD,GAAA,EAAD,CAAQlG,QAAS2Q,GAAjB,WCrOV,IAAMoD,GAAcpT,aAAH,yKAYF,SAASqT,GAAWnT,GAAqB,IAAD,UACnBC,oBAAS,GADU,WAC9CC,EAD8C,KAClCC,EADkC,KAE/CkB,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAFG,EAIlB0H,mBAAgB8S,GAAa,CAC9D7S,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,OAF5C4L,EAJ6C,EAI7CA,KAJ6C,EAIvCC,QAJuC,EAI9BC,QAKvB,OACE,oCACA,kBAAC,KAAKC,UAAN,CAAgBhD,MAAO,CAAEyV,YAAa,IAAtC,gBAGA,kBAACxS,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,SAAUwC,EAAMoL,UAAYlL,EAC5BW,OACE,kBAAC,KAAKC,KAAN,CACEiB,KAAM,kBAAM,kBAAC,KAAKC,KAAN,CAAWC,KAAK,UAC5B9C,QAASa,EAAMoL,cAAWhB,EAAY,WACpCjK,GAAY,IAEdlB,OACE,SAAAe,EAAM3N,YAAN,IAAa1B,OAAQ,eAEvBoQ,YAAcf,EAAMgB,SAAwB,KAAb,cAZrC,MAgBIR,GAhBJ,SAgBIA,EAAMmB,WAhBV,SAgBI,EAAgB0R,YAhBpB,EAgBI,EAAuB1e,KAAI,SAACe,GAAD,OACzB,kBAAC,KAAKoL,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAASxL,IAEjBuJ,MACEvJ,EAAK/E,MAAQ,W,ICpDnB8F,GAAYzE,GAAZyE,QAEO,SAAS6c,KAAoB,IAAD,MACe5Z,IAAe,SAAA5I,GAAK,OAAIA,KAAtDA,EADe,EACjC2G,iBACF4C,GAFmC,EACR3B,OAChBc,MACX+Z,EAAgB/R,GAAe,oBAErC,OACE,gCACE,gBAAC2R,GAAD,CACE9gB,MAAOvB,EAAMqB,OAAOuD,KAAKrD,MACzB6O,SAAU,SAACsS,GAAD,OAAanZ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQqgB,MAC1DpI,UAAWmI,EACXvS,UAAQ,IAEV,gBAACsB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOuD,KAAKpD,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOuD,KAAKpD,OAItB,gBAAC,KAAKqO,UAAN,CAAgBhD,MAAO,CAAEyV,YAAa,IAAtC,aAGA,gBAACtB,GAAD,CACEI,UAAWphB,EAAMqB,OAAOyD,UAAUvD,QAAS,IAAIkX,MAAOC,UAAY,IAClEyI,SAAU,SAACM,GAAD,OAAUlY,EAAS5D,GAAQtD,SAAS,CAAC,YAAaof,MAC5DvP,MAAM,uBAER,gBAACV,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOyD,UAAUtD,MAAQ,QAAU,QACzDxB,EAAMqB,OAAOyD,UAAUtD,OAG3B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,UACN1Q,QAASxB,EAAMqB,OAAOwD,QAAQrD,MAC9BD,OAAO,SAAAvB,EAAMqB,OAAOwD,QAAQtD,YAArB,IAA4B4Q,aAAc,GACjDC,aAAa,aACbG,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,UAAW0B,OAAOyO,SAE3E,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOwD,QAAQrD,MAAQ,QAAU,QACvDxB,EAAMqB,OAAOwD,QAAQrD,OAArB,uBAAmD,SAAAxB,EAAM4C,eAAN,IAAgBiC,UAAW,KAMxF,I,GAAMoJ,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACN6K,KAAM,GAER5J,MAAO,CACLmQ,aAAc,K,qkBCrDlB,I,GAAMkQ,GAA8B3T,cAAH,qpBAwClB,SAAS4T,GAAmB1T,GAA6B,IAAD,EAC/D3F,EAAWb,KACX1I,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM2G,oBACtC4J,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAHmB,EAIpBgL,sBAAsB+P,IAJF,WAI9DE,EAJ8D,KAIlCf,EAJkC,KAM/D/O,EAAWC,uBAAY,WAC3B,IAAIC,GAAY,EAsBhB,OArBKjT,EAAMqB,OAAOwD,QAAQtD,QACxB0R,GAAY,EACZ1J,EACE5C,GAAiBpE,cAAc,CAAC,UAAW,eAI1CvC,EAAMqB,OAAOuD,KAAKrD,QACrB0R,GAAY,EACZ1J,EACE5C,GAAiBpE,cAAc,CAAC,OAAQ,qCAIvCvC,EAAMqB,OAAOyD,UAAUvD,QAC1B0R,GAAY,EACZ1J,EACE5C,GAAiBpE,cAAc,CAAC,YAAa,qCAIzC0Q,IACP,CAACtI,KAAKC,UAAU5K,EAAMqB,UAEnB2d,EAAShM,uBAAY,iDAAAG,EAAAC,OAAA,mDAEpBL,IAFoB,6EAAAI,EAAA,MAMA0P,EAA2B,CAChDtT,UAAU,SACL,SAAAvP,EAAM4C,WAAN,EAAgBkB,GAAK,CAAEA,GAAE,SAAE9D,EAAM4C,eAAR,EAAE,EAAgBkB,IAAO,IAD9C,IAEPe,QAAS7E,EAAMqB,OAAOwD,QAAQtD,MAC9BuhB,WAAY/e,OAAM,SAAC/D,EAAMqB,OAAOuD,KAAKrD,YAAnB,EAAC,EAAyBuC,IAC5CgB,UAAW9E,EAAMqB,OAAOyD,UAAUvD,MAClCwhB,eAAgBhf,OAAM,SAAC/D,EAAM4C,eAAP,EAAC,EAAgBkB,SAZpB,UAMjBme,EANiB,OAiBjB,OAFAvO,EAAS,SAAA1T,EAAM4C,WAAN,EAAgBkB,GAAhB,SAAqBme,EAASvS,WAA9B,EAAqB,EAAewS,UAApC,SAAgDD,EAASvS,WAAzD,EAAgD,EAAeyS,YAE9E,SAAAzO,EAAQE,cAAR,EAAqB/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QACjC,OAAQ3H,GACN,IAAK,YACH,OAAOiH,EAAS5C,GAAiBpE,cAAc,CAAC,OAAQ0H,KAC1D,IAAK,UACH,OAAOV,EAAS5C,GAAiBpE,cAAc,CAAC,UAAW0H,KAC7D,IAAK,aACH,OAAOV,EAAS5C,GAAiBpE,cAAc,CAAC,YAAa0H,SAxB5C,MA2BnByJ,GA3BmB,SA2BnBA,EAAQG,UAAR,EAAgBvH,OA3BG,0CA4Bd/C,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAO,MAAEyJ,OAAF,EAAEA,EAAQG,OAAO,GAAI3J,QAAS,YA5B/D,QA8BnB,MAACwJ,GAAD,SAACA,EAAQE,cAAR,EAAqBtH,QACxB4C,EAAM4E,YA/Be,kDAmCvBvK,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WAnClD,mEAqCxB,CAACS,KAAKC,UAAU5K,EAAMqB,QAASwhB,EAA4B3T,EAAM4E,YAEpE,OACE,kBAACC,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQtH,UAAWwC,EAAM+E,MACvB,kBAACC,GAAA,EAAD,CAAaC,eAAa,EAACzH,QAASoV,EAAWnS,QAASb,MAAOyB,EAAY7Q,MAAMT,OAAOuB,SACxF,kBAACwT,GAAA,EAAOI,MAAR,MACW,MAALpU,GAAA,SAAAA,EAAO4C,WAAP,EAAiBkB,GAAK,OAAS,OADrC,kBAGA,kBAACkQ,GAAA,EAAOK,QAAR,KACE,kBAACmO,GAAD,OAEF,kBAACxO,GAAA,EAAOM,QAAR,CAAgBzH,MAAO,CAAEV,eAAgB,aACvC,kBAACoI,GAAA,EAAD,CACElG,QAAS,WACP9E,EAAS5C,GAAiB7E,SAC1BoN,EAAMsF,YAHV,UASA,kBAACD,GAAA,EAAD,CAAQlG,QAAS2Q,GAAjB,WChIV,IAAMgE,GAAsBhU,aAAH,wtBAyCV,SAAS1B,KAAiB,IAAD,8EAChCtN,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UACtC2B,EAAWb,KACXqF,EAAawJ,2BAHmB,EAIIlG,YAAe,GAJnB,WAI/B4R,EAJ+B,KAIhBC,EAJgB,OAKsB7R,YAAe,GALrC,WAK/B8R,EAL+B,KAKPC,EALO,KAMhCC,EAAQC,sBACRC,IAAS,SAAAvjB,EAAMT,kBAAN,WAAuBD,kBAAvB,IAAoCwE,MAAOuf,EAAMG,OAAO/T,OAEjEgU,GAAiB/S,GAAe,qBATA,GAWZpB,mBAAgB0T,GAAqB,CAC7DzT,UAAW,CACTiB,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,IAC1Cif,eAAgBhf,OAAOsf,EAAMG,OAAO/T,WAHhCC,GAX8B,GAW9BA,KAAMC,GAXwB,GAWxBA,QAOR+T,GAAoBrS,eAAkB,SAAC7M,GAC3C,OAAO,WACA+e,GAGME,IACT1V,EAAW+N,SAAS,sBAAuB,CACzCiH,eAAgBhf,OAAOsf,EAAMG,OAAO/T,QACpCjL,SALF+E,EAAS1C,GAAQ7D,YAAYwB,IAC7B0e,GAAiB,OAQpB,CAAC3Z,EAAU2Z,IAEd,OACE,gCACA,gBAAChP,GAAA,EAAD,CAAapF,MAAO9O,EAAMN,MAAMT,OAAOuB,OAAQ2T,eAAa,EAACzH,QAASiD,KACtE,gBAAC4O,GAAD,CAAkBlD,sBAAuBpN,GAAOyQ,SAE5C,gBAACtF,GAAA,EAAD,CAAMC,UAAW,EAAGxM,MAAOoB,GAAO0V,MAChC,gBAACvK,GAAA,EAAKhF,MAAN,CAAYjG,MAAM,sBAClB,gBAACiL,GAAA,EAAK/E,QAAN,KACE,gBAAC,KAAKrE,KAAN,CACE7B,MAAM,OACN8C,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,qBAC5BlB,aAAiB,MAAJP,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,eAAhB,WAA8Blf,WAA9B,IAAoC7E,OAAS,MAE5D,gBAAC,KAAKmQ,KAAN,CACE7B,MAAM,QACN8C,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,QAC5BlB,aAAiB,MAAJP,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,eAAhB,WAA8Blf,WAA9B,IAAoCpD,QAAU,MAG7D,gBAAC,KAAK0O,KAAN,CACE7B,MAAM,QACN8C,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,WAC5BlB,aAAiB,MAAJP,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,eAAhB,WAA8Blf,WAA9B,IAAoCxC,QAAU,MAG7D,gBAAC,KAAK8N,KAAN,CACE7B,MAAM,UACN8C,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,oBAC5BlB,aAAiB,MAAJP,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,eAAhB,WAA8Blf,OAA9B,WAAoCvC,cAApC,IAA6CtC,OAAQ,MAGpE,gBAAC,KAAKmQ,KAAN,CACE7B,MAAM,cACN8C,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,WAC5BlB,aAAiB,MAAJP,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,eAAhB,WAA8Blf,WAA9B,IAAoCzC,aAAe,OAIlEshB,IACE,gBAACnK,GAAA,EAAK9E,QAAN,CAAczH,MAAO,CAAEV,eAAgB,aACrC,gBAACoI,GAAA,EAAD,CACEpD,KAAK,SACL9C,QAAS,0BACPN,EAAW+N,SAAS,mBAAoB,CAAEpX,KAAI,SAAE1E,EAAMT,kBAAR,SAAE,EAAuBD,kBAAzB,EAAE,EAAoCoF,SAHxF,UAWR,gBAAC0U,GAAA,EAAD,CAAMC,UAAW,EAAGxM,MAAOoB,GAAO0V,MAChC,gBAACvK,GAAA,EAAKhF,MAAN,CAAYjG,MAAK,SAAEnO,EAAMT,sBAAR,EAAE,EAAuBM,OAC1C,gBAACuZ,GAAA,EAAK/E,QAAN,KACE,gBAAC,KAAKrE,KAAN,CACE7B,MAAM,OACN8B,YAAW,MAAEP,IAAF,SAAEA,GAAMmB,WAAR,SAAE,EAAgB+S,eAAlB,SAAE,EAA8Bhf,WAAhC,EAAE,EAAoC/E,KACjDoR,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,YAE9B,gBAAC,KAAKnB,KAAN,CACE7B,MAAM,UACN8B,YAAW,MAAEP,IAAF,SAAEA,GAAMmB,WAAR,SAAE,EAAgB+S,mBAAlB,EAAE,EAA8B/e,QAC3CoM,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,qBAE9B,gBAAC,KAAKnB,KAAN,CACE7B,MAAM,aACN8B,YACE,MAACP,IAAD,SAACA,GAAMmB,WAAP,SAAC,EAAgB+S,eAAhB,EAA8B9e,UAE7Buc,aAAwD,MAA5C,MAAJ3R,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,mBAAhB,IAA8B9e,YAAa,GAAW,cAD9D,4CAGJmM,KAAM,8BACJ,gBAAC,KAAKC,KAAN,CACEC,KAAK,uBACLrC,MACM,MAAJY,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,eAAhB,EAA8B9e,WACc,KAAtC,MAAJ4K,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,mBAAhB,IAA8B9e,YAAmB,IAAI2T,MAAOC,eAC1DY,EAAY,gBAM1B,gBAACF,GAAA,EAAK9E,QAAN,CAAczH,MAAO,CAAEV,eAAgB,aACrC,gBAACoI,GAAA,EAAD,CACEpD,KAAK,SACL9C,QAAS,WAAO,IAAD,EACb9E,EAAS5C,GAAiB3D,YAAjB,MAA6B0M,IAA7B,SAA6BA,GAAMmB,eAAnC,EAA6B,EAAgB+S,eACtDR,GAA0B,KAJ9B,UAYJ,gBAAChK,GAAA,EAAD,CAAMC,UAAW,EAAGxM,MAAOoB,GAAO0V,MAChC,gBAACvK,GAAA,EAAKhF,MAAN,CAAYjG,MAAM,SAClB,gBAACiL,GAAA,EAAK/E,QAAN,KACE,gBAACoF,GAAA,EAAD,KACE,gBAACA,GAAA,EAAUC,OAAX,KACE,gBAACD,GAAA,EAAUrF,MAAX,kBAGA,gBAACqF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,cAGA,gBAACF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,gBARJ,MAcIjK,IAdJ,SAcIA,GAAMmB,WAdV,SAcI,EAAgB+S,eAdpB,SAcI,EAA8Blf,OAdlC,SAcI,EAAoCC,WAdxC,EAcI,EAA0Cd,KAAI,SAACW,GAAD,OAC5C,gBAACiV,GAAA,EAAUG,IAAX,CAAevL,QAASqV,GAAkBlf,GAAMqV,cAAc,QAC5D,gBAACJ,GAAA,EAAUK,KAAX,KACG,OAACtV,OAAD,EAACA,EAAKO,KAAN,MAAYP,OAAZ,EAAYA,EAAKQ,MAAjB,WAA4BR,OAA5B,EAA4BA,EAAKS,SAAU4e,KAAK,MAEnD,gBAACpK,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GACjB,MAAHnV,KAAKU,gBAAkBmc,aAA6B,IAAtB7c,EAAIU,gBAAwB,cAAgB,KAE7E,gBAACuU,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,UACMnV,OADN,EACMA,EAAKW,mBAQnBoe,IACA,gBAACnK,GAAA,EAAK9E,QAAN,CAAczH,MAAO,CAAEV,eAAgB,aACrC,gBAACoI,GAAA,EAAD,CAAQlG,QAAS,kBAAM6U,GAAiB,KAAxC,cAOA,MAAJxT,IAAA,SAAAA,GAAMmB,WAAN,WAAgB+S,mBAAhB,IAA8B9f,OAA9B,SAAqC9D,EAAMV,kBAA3C,EAAqC,EAAmBwE,KACxD,gBAACyQ,GAAA,EAAD,CAAQzF,MAAM,UAAUT,QAAS,kBAAM9E,EAAS9D,GAAc5E,YAA9D,YAOJ,gBAAC+gB,GAAD,CACEpN,QAAS,kBAAM0O,GAAiB,IAChCpP,UAAW,kBAAMoP,GAAiB,IAClCzT,OAAQ1L,OAAM,MAAC2L,IAAD,SAACA,GAAMmB,WAAP,SAAC,EAAgB+S,eAAjB,SAAC,EAA8Blf,WAA/B,EAAC,EAAoCZ,IACnDmQ,KAAMgP,IAGR,gBAACL,GAAD,CACEpO,QAAS,kBAAM4O,GAA0B,IACzCtP,UAAW,kBAAMsP,GAA0B,IAC3CnP,KAAMkP,KAMd,IAAMlV,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,GAERwS,QAAS,CACPlQ,WAAY,SACZ4L,SAAU,EACVuE,cAAe,IAEjBgF,KAAM,CACJnO,OAAQ,EACRE,MAAO,QAETrU,OAAQ,CACNqU,MAAO,MACPL,QAAS,QAEXyO,OAAQ,CACNpO,MAAO,OACPC,OAAQ,IAEVxH,MAAO,CACLO,SAAU,GACVC,WAAY,QAEd2G,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,GAEVM,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,SCvRI,SAASqO,KACtB,OACE,gBAAC,GAAD,CAAMlX,MAAOoB,GAAOhC,WAClB,gBAAC,GAAD,CAAMY,MAAOoB,GAAOE,OAApB,WACA,gBAAC,GAAD,CAAMtB,MAAOoB,GAAO8H,UAAWlB,WAAW,OAAOC,UAAU,0BAC3D,gBAACmH,GAAD,CAAgB7R,KAAK,4BAK3B,I,MAAM6D,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,SCdLsO,GAAiBhV,aAAH,yMAeL,SAASiV,GAAc/U,GAAwB,IAAD,MACzBC,oBAAS,GADgB,WACpDC,EADoD,KACxCC,EADwC,QAEvCzG,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAEf0H,mBAAgB0U,GAAgB,CACjEzU,UAAW,CACT2U,aAAchV,EAAMgV,iBAFhBxU,EAJmD,EAInDA,KAJmD,EAI7CC,QAJ6C,EAIpCC,QAKvB,OACE,oCACA,kBAAC,KAAKC,UAAN,gBAGA,kBAACC,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC,KAAKC,KAAN,CACE3B,QAAS,WACPgB,GAAY,IAEdlB,OACE,SAAAe,EAAM3N,YAAN,IAAa1B,OAAQ,0BAEvBoQ,YAAcf,EAAMgB,SAAwB,KAAb,cAXrC,MAeIR,GAfJ,SAeIA,EAAMyU,eAfV,EAeI,EAAgBtgB,KAAI,SAAC1B,GAAD,OAClB,kBAAC,KAAK6N,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAASjO,IAEjBgM,MACEhM,EAAQtC,MAAQ,WCrD9B,IAAMukB,GAAoBpV,aAAH,mGASR,SAASqV,GAAiBnV,GAA2B,IAAD,MAC/BC,oBAAS,GADsB,WAC1DC,EAD0D,KAC9CC,EAD8C,KAGzDK,EAASJ,mBAAgB8U,IAAzB1U,KAQR,OANAmO,qBAAU,WAAO,IAAD,EACoB,KAA1B,MAAJnO,GAAA,SAAAA,EAAM4U,kBAAN,IAAmBhY,SAAiB4C,EAAM3N,OAC5C2N,EAAMkB,SAASV,EAAK4U,YAAa,MAElC,CAAC3Z,KAAKC,UAAL,MAAe8E,OAAf,EAAeA,EAAM4U,eAGvB,oCACA,kBAAC,KAAKzU,UAAN,mBAGA,kBAACC,GAAA,EAAD,CACEnD,UAAW,kBAAM0C,GAAY,IAC7B3C,QAAS0C,EACTW,OACE,kBAAC,KAAKC,KAAN,CACE3B,QAAS,WACPgB,GAAY,IAEdlB,OACE,SAAAe,EAAM3N,YAAN,IAAa1B,OAAQ,2BAEvBoQ,YAAcf,EAAMgB,SAAwB,KAAb,cAXrC,MAeIR,GAfJ,SAeIA,EAAM4U,kBAfV,EAeI,EAAmBzgB,KAAI,SAAC9B,GAAD,OACrB,kBAAC,KAAKiO,KAAN,CACE3B,QAAS,WACPgB,GAAY,GACZH,EAAMkB,SAASrO,IAEjBoM,MACEpM,EAAWlC,MAAQ,W,IChDzB8F,GAAYzE,GAAZyE,QACO,SAASyL,KAAY,IAAD,sDAC3BpR,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMyG,YACtC8C,EAAWb,KACX6H,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAElDyJ,aAAgB,WACO,IAAD,EAAhBrR,EAAM4C,WACH5C,EAAMqB,OAAOY,WAAWV,OAC3BgI,EACE5D,GAAQtD,SAAS,CAAC,aAAcrC,EAAM4C,SAASX,YAAc,SAI5DjC,EAAMqB,OAAOsD,KAAKpD,OAAnB,SAA4BvB,EAAM4C,WAAN,EAAgBkB,IAC9CyF,EACE5D,GAAQtD,SAAS,CAAC,OAAQrC,EAAM4C,SAAS+B,WAK9C,UAAC3E,EAAM4C,eAAP,EAAC,EAAgBkB,KAER,MAAG9D,GAAH,SAAGA,EAAO4C,WAAP,EAAiBkB,GACZ,MAAL9D,GAAA,SAAAA,EAAO4C,WAAP,EAAiBkB,GAAjB,SAAwByM,EAAYjR,cAAZ,EAAyBwE,GAGhE,OACE,gCACE,gBAACkO,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAOxB,KAAK2B,MAC3BD,OAAO,SAAAvB,EAAMqB,OAAOxB,OAAb,WAAmB0B,YAAnB,IAA0B4Q,aAAc,GAC/CI,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAGjE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOxB,KAAK2B,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOxB,KAAK2B,OAAS,KAG/B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAOC,MAAME,MAC5BD,OAAO,SAAAvB,EAAMqB,OAAOC,QAAb,WAAoBC,YAApB,IAA2B4Q,aAAc,GAChDI,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,QAASmQ,QAGlE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOC,MAAME,MAAQ,QAAU,QACrDxB,EAAMqB,OAAOC,MAAME,OAAS,KAGhC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAOa,MAAMV,MAC5BD,OAAO,SAAAvB,EAAMqB,OAAOa,QAAb,WAAoBX,YAApB,IAA2B4Q,aAAc,GAChDI,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,QAASmQ,QAGlE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOa,MAAMV,MAAQ,QAAU,QACrDxB,EAAMqB,OAAOa,MAAMV,OAAS,IAKjC,gBAACwQ,GAAA,EAAD,CACGnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,cACN1Q,QAASxB,EAAMqB,OAAOY,WAAWT,MACjCD,OAAO,SAAAvB,EAAMqB,OAAOY,aAAb,WAAyBV,YAAzB,IAAgC4Q,aAAc,GACrDC,aAAa,0BACbC,MAAO,kBAAM,gBAACL,GAAA,EAAUM,MAAX,CAAiBlH,KAAK,QACnCmH,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,aAAcmQ,QAGvE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOY,WAAWT,MAAQ,QAAU,QAC1DxB,EAAMqB,OAAOY,WAAWT,OAAS,IAGrC,gBAACuQ,GAAA,EAAD,MAGA,gBAACsS,GAAD,CACE9iB,OAAY,MAALvB,GAAA,SAAAA,EAAOqB,SAAP,WAAec,UAAf,WAAwBZ,YAAxB,IAA+BQ,aAAc/B,EAAM+B,WAAWR,MACrE6O,SAAU,SAAC7O,GAAD,OAAWgI,EAAS5D,GAAQvD,cAAcb,KACpD2O,UAAQ,IAGV,gBAACsB,GAAA,EAAD,CAAYC,KAAQzR,EAAM+B,WAAWP,MAAQ,QAAU,QACnDxB,EAAM+B,WAAWP,OAAS,MAGtB,MAALxB,GAAA,SAAAA,EAAOqB,SAAP,WAAec,UAAf,WAAwBZ,QAAxB,WAA+BQ,iBAA/B,IAA2C+B,MAA3C,MAAiD9D,GAAjD,SAAiDA,EAAO+B,aAAxD,SAAiD,EAAmBR,YAApE,EAAiD,EAA0BuC,MAC5E,gCACE,gBAACmgB,GAAD,CACE1iB,MAAOvB,EAAMqB,OAAOc,QAAQZ,MAC5B2iB,aAAcngB,QAAY,MAAL/D,GAAA,SAAAA,EAAOqB,SAAP,WAAec,UAAf,WAAwBZ,QAAxB,WAA+BQ,iBAA/B,IAA2C+B,MAA3C,SAAiD9D,EAAM+B,aAAvD,SAAiD,EAAkBR,YAAnE,EAAiD,EAAyBuC,KAC/FsM,SAAU,SAAC7O,GAAD,OAAWgI,EAAS5D,GAAQtD,SAAS,CAAC,UAAWd,MAC3D2O,UAAQ,IAEV,gBAACsB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOc,QAAQX,MAAQ,QAAU,QACvDxB,EAAMqB,OAAOc,QAAQX,OAAS,MAQ5C,I,GAAMyM,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACN6K,KAAM,EACNwJ,MAAO,OACPoH,WAAY,IAEdxa,MAAO,CACLmQ,aAAc,EACdiD,MAAO,QAET9D,aAAc,CACZa,aAAc,KC1HV9M,GAAYzE,GAAZyE,QAIF4e,IAH6B1e,EAA3BF,QAGqBqJ,cAAH,8yBAkDX,SAASwV,KAAoB,IAAD,EACQ5b,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EACjCyG,SACF8C,GAFmC,EAChB3B,OACRc,MAEXqF,EAAawJ,2BAEb7S,EADQ4e,sBACKE,OAAQ9e,KAE3B2M,aAAgB,WACd9H,EAAS5D,GAAQ3C,YAAY0B,MAC5B,OAACA,OAAD,EAACA,EAAMZ,KAV+B,MAYN8O,sBAAsB2R,IAZhB,WAYlCE,EAZkC,KAYd/U,EAZc,KAcnCqD,EAAW1B,eAAkB,WAAgB,IAAD,kBAC5C0N,GAAW,EACT2F,EAAa,IAAIC,OAAO,0JAoC9B,QAnCK,SAAA3kB,EAAMqB,OAAOxB,OAAb,WAAmB0B,YAAnB,IAA0B+K,SAAU,GAAK,IAC5CyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,0BAI9B,SAAAvC,EAAMqB,OAAOC,QAAb,WAAoBC,YAApB,IAA2B+K,SAAU,GAAK,IAC7CyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,QAAS,2BAI/B,SAAAvC,EAAMqB,OAAOa,QAAb,WAAoBX,YAApB,IAA2B+K,SAAU,GAAK,IAC7CyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,QAAS,gCAI/BmiB,EAAWE,MAAK,SAAA5kB,EAAMqB,SAAN,WAAcC,YAAd,IAAqBC,QAAS,MACjDwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,QAAS,mCAI/B,SAAAvC,EAAMqB,OAAOY,iBAAb,IAAyBV,QAAS,GAAK,KAC1Cwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,aAAc,kCAIjCwc,IACP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,mDAAA8B,EAAAC,OAAA,qDACqBpT,EAAMqB,OAAlDxB,EADuB,EACvBA,KAAMsC,EADiB,EACjBA,QAASD,EADQ,EACRA,MAAOZ,EADC,EACDA,MAAOW,EADN,EACMA,YAIjC8Q,IAL2B,6CAAAI,EAAA,MAONsR,EAAmB,CACtClV,UAAW,CACTzL,GAAIC,OAAO/D,EAAM4C,SAAUkB,IAC3BjE,KAAMA,EAAK0B,MACXsjB,UAAW,SAAC1iB,EAAQZ,QAAR,EAAeuC,GAAYC,OAAO5B,EAAQZ,MAAOuC,IAA7B,KAChC5B,MAAOA,EAAMX,MACbU,WAAY6iB,WAAW7iB,EAAWV,OAClCD,MAAOA,EAAMC,UAdU,OAOrBmS,EAPqB,OAkB3B,SAAIA,EAAOhE,OAAX,SAAI,EAAaqV,aAAb,EAAyBrgB,OAAO,EACFgP,EAAOhE,KAAKqV,WAApCnR,EADyB,EACzBA,YAAaC,EADY,EACZA,OAEjBD,EACS,MAAXA,KAAa/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QACzB,OAAQ3H,GACN,IAAK,OACH,OAAOiH,EAAS9C,GAASlE,cAAc,CAAC,OAAQ0H,KAClD,IAAK,cACH,OAAOV,EAAS9C,GAASlE,cAAc,CAAC,aAAc0H,KACxD,IAAK,aACH,OAAOV,EAAS9C,GAASlE,cAAc,CAAC,UAAW0H,KACrD,IAAK,QACH,OAAOV,EAAS9C,GAASlE,cAAc,CAAC,QAAS0H,KACnD,IAAK,QACH,OAAOV,EAAS9C,GAASlE,cAAc,CAAC,QAAS0H,SAGlD,MAAI4J,KAAQvH,OACjBuH,EAAOhQ,KAAI,SAACoG,GAAD,OACTV,EACE2V,GAAS/d,aAAa,CAAE8I,QAASA,EAASC,QAAS,eAIvDX,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,2BAA6BC,QAAS,aAExE6D,EAAWoR,SACX5V,EAAS9C,GAAS3E,WA/CK,gDAoD3ByH,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WArDhC,kEA0D9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAUkb,IAE5C,OACE,gBAAClG,GAAD,CAAkBlD,sBAAuB,CAAE+B,kBAAmB,KAC1D,gBAAC,GAAD,MACA,gBAAC,GAAD,CAAMvQ,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAhF,UAQV,IAAM1B,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZsO,WAAY,IAEd3O,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,OACPjD,aAAc,IAEhBnQ,MAAO,CACLmQ,aAAc,KCvMZuS,GAAUzE,eAED,SAAS0E,KAAc,IAAD,EAC3B1lB,EAAoBqJ,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAAlDrI,gBACR,OACE,gBAACylB,GAAQvE,UAAT,CACEC,cAAe,CACbC,aAAa,EACbC,OAAQ,SAAC1R,GAAD,OAAW,gBAAC,GAAWA,IAC/B2R,UAAW,CACT3U,KAAM,KAIV,gBAAC8Y,GAAQlE,OAAT,CACEjhB,KAAK,gBACLkhB,UAAWzT,GACXkQ,QAAS,CAAErP,MAAO,WAClB+W,cAAe,CACbzV,OAAM,MAAElQ,GAAF,SAAEA,EAAiBD,kBAAnB,EAAE,EAA8BwE,MAG1C,gBAACkhB,GAAQlE,OAAT,CAAgBjhB,KAAK,mBAAmBkhB,UAAWyD,GAAkBhH,QAAS,CAAErP,MAAO,kBACvF,gBAAC6W,GAAQlE,OAAT,CAAgBjhB,KAAK,YAAYkhB,UAAWgD,GAAWvG,QAAS,CAAErP,MAAO,UC/BhE,SAASgX,KAEtB,IAAMpX,EAAawJ,2BACbvX,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAG5C,OACE,gBAAC,GAAD,CAAMiF,MAAOoB,GAAOhC,WAClB,gBAAC,KAAKmZ,QAAN,CAAcjX,MAAM,YAClB,gBAAC,KAAK6B,KAAN,CACE7B,MAAM,gBACNE,QAAS,kBAAMN,EAAW+N,SAAS,uBAAwB,CAAEjL,SAAU7Q,EAAMT,mBAC7E0R,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWpC,MAAM,OAAOqC,KAAK,2BAE3C,gBAAC,KAAKnB,KAAN,CACE7B,MAAM,SACNE,QAAS,kBAAMN,EAAW+N,SAAS,iBACnC7K,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWpC,MAAM,OAAOqC,KAAK,gBAE3C,gBAAC,KAAKnB,KAAN,CACE7B,MAAM,OACN8C,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWpC,MAAM,OAAOqC,KAAK,eACzClB,YAAY,iBAIhB,gBAAC,KAAKmV,QAAN,CAAcjX,MAAM,WAClB,gBAAC,KAAK6B,KAAN,CACE7B,MAAM,eACNE,QAAS,kBAAMN,EAAW+N,SAAS,sBACnC7K,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWpC,MAAM,OAAOqC,KAAK,cAE3C,gBAAC,KAAKnB,KAAN,CACE7B,MAAM,iBACNE,QAAS,kBAAMN,EAAW+N,SAAS,iBACnC7K,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWpC,MAAM,OAAOqC,KAAK,cAOnD,IAAMlD,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNuC,QAAS,EACT4G,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,GAEVP,MAAO,CACLhJ,KAAM,EACNsC,WAAY,SACZrC,eAAgB,SAChBuJ,MAAO,OACPC,OAAQ,UC/DG,SAAS0P,KACtB,OACE,gBAAC,GAAD,CAAMxY,MAAOoB,GAAOhC,WAClB,gBAAC,GAAD,CAAMY,MAAOoB,GAAOE,OAApB,WACA,gBAAC,GAAD,CAAMtB,MAAOoB,GAAO8H,UAAWlB,WAAW,OAAOC,UAAU,0BAC3D,gBAACmH,GAAD,CAAgB7R,KAAK,yCAK3B,I,MAAM6D,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,S,oBCjBL4P,GAAoBtW,aAAH,0RAoBjBuW,GAA8BvW,aAAH,4cA2BlB,SAASwW,KAAqB,IAAD,IACpCxlB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UADF,EAEP0H,mBAAgBgW,GAAmB,CACpE/V,UAAW,CACTiB,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,OAFtC4L,EAFkC,EAElCA,KAAMC,EAF4B,EAE5BA,QAASC,EAFmB,EAEnBA,QAKjB7B,EAAawJ,2BACb8L,EAAQC,sBACRxI,EAAYC,0BAElB1J,aAAgB,WACVyJ,GACFlL,MAED,CAACkL,IAfsC,MAgBGlI,sBAAsB2S,IAhBzB,WAgBnCE,EAhBmC,UAuB1C,OALApU,aAAgB,WACK,sBAAfgS,EAAMxjB,MACR+P,MAED,CAACyT,EAAMxjB,OAEN,gBAAC0e,GAAD,CAAkB1R,MAAOoB,GAAOhC,UAAWoP,sBAAuB,CAACpN,GAAOyQ,QAAS,CAAGlS,gBAAiB,UAAYkZ,eAAgB,gBAACC,GAAA,EAAD,CAAgBpK,WAAY5L,EAAS6L,UAAW5L,KACnL,gBAACsE,GAAA,EAAD,CAAaxH,QAASiD,EAASb,MAAO9O,EAAMN,MAAMT,OAAOuB,SACvD,gBAACiZ,GAAA,EAAD,KACE,gBAACA,GAAA,EAAUC,OAAX,KACE,gBAACD,GAAA,EAAUrF,MAAX,aACA,gBAACqF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,QACA,gBAACF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,YACA,gBAACF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,WALJ,MAQIjK,GARJ,SAQIA,EAAM9L,kBARV,EAQI,EAAmBC,KAAI,SAACY,GAAD,OACvB,gBAACgV,GAAA,EAAUG,IAAX,CAAevL,QAAS,kBAAMN,EAAW+N,SAAS,yBAA0B,CAAErX,gBAAeoV,cAAc,QACzG,gBAACJ,GAAA,EAAUK,KAAX,KAAiBrV,EAAW5E,MAC5B,gBAAC4Z,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,IAA0BlV,EAAWnB,MACrC,gBAACmW,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GACpBlV,EAAWlB,UAEd,gBAACkW,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GACrB,gBAACiM,GAAA,EAAD,CACEC,cAAe,WACbJ,EAAyB,CACvBlW,UAAW,CACTzL,GAAIC,OAAOU,EAAWX,IACtBN,sBAAuBiB,EAAWjB,yBAIxCjC,QAASkD,EAAWjB,6BAO9B,gBAACoY,GAAA,EAAD,CACE/O,MAAOoB,GAAOqH,IACduG,OAAK,EACL1K,KAAK,OACL9C,QAAS,kBAAMN,EAAW+N,SAAS,2BACnC5J,MAAM,qBAMhB,IAAMjE,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNmJ,QAAS,QAEXqJ,QAAS,CACPtE,SAAU,GAEZ9E,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,GAEVP,MAAO,CACLhJ,KAAM,EACNsC,WAAY,SACZrC,eAAgB,SAChBuJ,MAAO,OACPC,OAAQ,UC1IJhQ,GAAYzE,EAAZyE,QAGO,SAASmgB,KAAgB,IAAD,QAC/B9lB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMiI,aACtCsB,EAAWb,KAEjB,OACE,gCACE,gBAACsJ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAOxB,KAAK2B,MAC3BD,MAAOvB,EAAMqB,OAAOxB,KAAK0B,MACzBgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAEjE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOxB,KAAK2B,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOxB,KAAK2B,OAAS,IAG/B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,eACN1Q,QAASxB,EAAMqB,OAAO4B,aAAazB,MACnCD,MAAOvB,EAAMqB,OAAO4B,aAAa1B,MACjCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,eAAgBmQ,QAEzE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO4B,aAAazB,MAAQ,QAAU,QAC5DxB,EAAMqB,OAAO4B,aAAazB,OAAS,IAGvC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAO+B,MAAM5B,MAC5BD,MAAK,SAAEvB,EAAMqB,OAAO+B,QAAf,SAAE,EAAoB7B,YAAtB,EAAE,EAA2B4Q,WAClCgM,YAAY,WACZ5L,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,QAAS0B,OAAOyO,SAEzE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO+B,MAAM5B,MAAQ,QAAU,QACrDxB,EAAMqB,OAAO+B,MAAM5B,OAAS,IAGhC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,YACN1Q,QAASxB,EAAMqB,OAAO6B,SAAS1B,MAC/BD,MAAK,SAAEvB,EAAMqB,OAAO6B,SAAS3B,YAAxB,EAAE,EAA6B4Q,WACpCC,aAAa,aACbG,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,WAAY0B,OAAOyO,SAE5E,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO6B,SAAS1B,MAAQ,QAAU,QACxDxB,EAAMqB,OAAO6B,SAAS1B,OAAS,uCAGnC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,YACN1Q,QAASxB,EAAMqB,OAAO8B,SAAS3B,MAC/BD,MAAK,SAAEvB,EAAMqB,OAAO8B,eAAf,EAAE,EAAuB5B,MAAM4Q,WACpCC,aAAa,aACbG,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,WAAY0B,OAAOyO,SAE5E,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAO8B,SAAS3B,MAAQ,QAAU,QACxDxB,EAAMqB,OAAO8B,SAAS3B,OAAS,gEAMzC,I,GAAMyM,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACNqU,MAAO,OACPxJ,KAAM,GAER5J,MAAO,CACLoT,MAAO,OACPjD,aAAc,KC1EV9M,GAAYzE,EAAZyE,QAIFogB,IAH6BlgB,EAA3BF,QAGsBqJ,cAAH,k6BAgDZ,SAASgX,KAAqB,IAAD,EACQpd,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EAClCiI,UAA0BsI,EADQ,EAChB3I,OACpB2B,EAAWb,KAEXqF,EAAawJ,2BAJuB,EAMN3E,sBAAsBmT,IANhB,WAMnCE,EANmC,KAMdvW,EANc,KAOpCoL,EAAYC,0BAClB1J,aAAgB,WACVyJ,GACFvR,EAAS5D,GAAQ7D,WAElB,CAACgZ,IAEJ,IAAM/H,EAAW1B,eAAkB,WACjC,IAAI0N,GAAW,EAsBf,OArBI/e,EAAMqB,OAAOxB,KAAK0B,MAAM+K,OAAS,IACnCyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,wBAI/BvC,EAAMqB,OAAO4B,aAAa1B,MAAM+K,OAAS,IAC3CyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,eAAgB,gCAItCvC,EAAMqB,OAAO8B,SAAS5B,QACzBwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,WAAY,mCAI/Bwc,IACP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,iDAAA8B,EAAAC,OAAA,qDACiDpT,EAAMqB,OAA9ExB,EADuB,EACvBA,KAAMoD,EADiB,EACjBA,aAAcE,EADG,EACHA,SAAUD,EADP,EACOA,SAAUE,EADjB,EACiBA,MAAOC,EADxB,EACwBA,sBAInD0P,IAL2B,6CAAAI,EAAA,MAON8S,EAAoB,CACvC1W,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDjE,KAAMA,EAAK0B,MACX0B,aAAcA,EAAa1B,MAC3B2B,SAAUA,EAAS3B,MACnB4B,SAAUA,EAAS5B,MACnB6B,MAAOA,EAAM7B,MACb8B,qBAAsBA,EAAqB9B,UAfpB,OAOrBmS,EAPqB,OAmB3B,SAAIA,EAAOhE,OAAX,SAAI,EAAawW,cAAb,EAA0B7hB,QACpBA,EAAUqP,EAAOhE,KAAKwW,YAAtB7hB,MACRkF,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,eAAgB5F,EAAMxE,KAAQqK,QAAS,aAEzE6D,EAAWoR,UAxBc,gDA2B3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WA5BhC,kEAiC9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAU0c,IAE5C,OACE,gBAAC1H,GAAD,CAAkBlD,sBAAuBpN,GAAOyQ,SAC5C,gBAACU,GAAA,EAAD,CAAwBvf,KAAK,WAAWwf,KAAM,IAAKvQ,MAAM,UAAUjC,MAAO,CAAEyS,UAAW,YACvF,gBAAC,GAAD,MACA,gBAAC,GAAD,CAAMzS,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAhF,UAQV,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/B0S,QAAS,CACPtB,kBAAmB,IAErBjP,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,OACPjD,aAAc,IAEhBnQ,MAAO,CACLmQ,aAAc,KC9JV9M,GAAYzE,EAAZyE,QAIFogB,IAH6BlgB,EAA3BF,QAGsBqJ,cAAH,y4BAgDZ,SAASmX,KAAqB,IAAD,EACQvd,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EAClCiI,UACFsB,GAFoC,EAChB3B,OACTc,MAEXqF,EAAawJ,2BAEblT,EADQif,sBACME,OAAQnf,MAE5BgN,aAAgB,WACd9H,EAAS5D,GAAQ3C,YAAYqB,MAC5B,OAACA,OAAD,EAACA,EAAOP,KAV+B,MAYN8O,sBAAsBmT,IAZhB,WAYnCK,EAZmC,KAYd1W,EAZc,KAcpCqD,EAAW1B,eAAkB,WACjC,IAAI0N,GAAW,EAsBf,OArBI/e,EAAMqB,OAAOxB,KAAK0B,MAAM+K,OAAS,IACnCyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,wBAI/BvC,EAAMqB,OAAO4B,aAAa1B,MAAM+K,OAAS,IAC3CyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,eAAgB,gCAItCvC,EAAMqB,OAAO8B,SAAS5B,QACzBwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,WAAY,mCAI/Bwc,IACP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,+CAAA8B,EAAAC,OAAA,qDACiDpT,EAAMqB,OAA9ExB,EADuB,EACvBA,KAAMoD,EADiB,EACjBA,aAAcE,EADG,EACHA,SAAUD,EADP,EACOA,SAAUE,EADjB,EACiBA,MAAOC,EADxB,EACwBA,sBAInD0P,IAL2B,6CAAAI,EAAA,MAONiT,EAAoB,CACvC7W,UAAW,CACTzL,GAAIC,OAAO/D,EAAM4C,SAAUkB,IAC3BjE,KAAMA,EAAK0B,MACX0B,aAAcA,EAAa1B,MAC3B2B,SAAUA,EAAS3B,MACnB4B,SAAUA,EAAS5B,MACnB6B,MAAOA,EAAM7B,MACb8B,qBAAsBA,EAAqB9B,UAfpB,OAOrBmS,EAPqB,OAmB3B,SAAIA,EAAOhE,OAAX,SAAI,EAAasI,cAAb,EAA0B3T,QACpBA,EAAUqP,EAAOhE,KAAKsI,YAAtB3T,MACRkF,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,eAAgB5F,EAAMxE,KAAQqK,QAAS,aAEzE6D,EAAWoR,UAxBc,gDA2B3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WA5BhC,kEAiC9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAU6c,IAE5C,OACE,gBAAC7H,GAAD,CAAkBlD,sBAAuBpN,GAAOyQ,SAC5C,gBAACU,GAAA,EAAD,CAAwBvf,KAAK,WAAWwf,KAAM,IAAKvQ,MAAM,UAAUjC,MAAO,CAAEyS,UAAW,YACvF,gBAAC,GAAD,MACA,gBAAC,GAAD,CAAMzS,MAAOoB,GAAOtI,SAClB,gBAAC4O,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAhF,UAQV,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/B0S,QAAS,CACPtB,kBAAmB,IAErBjP,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAET/P,QAAS,CACP+P,MAAO,OACPjD,aAAc,IAEhBnQ,MAAO,CACLmQ,aAAc,K,yCChKV9M,GAAYzE,EAAZyE,QAEFye,GAAoBpV,cAAH,wGAQR,SAAS8W,KAAgB,IAAD,UACGld,IAAe,SAAA5I,GAAK,OAAIA,KAA1CA,EADe,EAC7BgI,aAAqBJ,EADQ,EACRA,OACvB2B,EAAWb,KAFoB,EAGX4G,mBAAgB8U,IAAlC1U,EAH6B,EAG7BA,KAH6B,KAGvBC,QACsCR,oBAAS,IAJxB,WAI9BkX,EAJ8B,KAIVC,EAJU,OAKCnX,mBAAyC,MAL1C,WAK9BoX,EAL8B,KAKjBC,EALiB,KAOrC3I,qBAAU,WAAO,IAAD,IACN,MAAJnO,GAAA,SAAAA,EAAM4U,eAAN,EAAmBhY,QAAU,SAACtM,EAAMqB,OAAOU,aAAb,EAAyBR,OACzDgI,EACE5D,GAAQtD,SAAS,CAAC,aAAcqN,EAAK4U,YAAY,QAGpD,CAAC3Z,KAAKC,UAAL,MAAe8E,OAAf,EAAeA,EAAM4U,eAEzB,IAAMmC,EAAczT,uBAClB,2BAAAG,EAAAC,OAAA,4EAAAD,EAAA,MAEyBuT,aAAiB,CACpCC,UAAU,EACVlV,KAAM,WAJZ,OAEUiC,EAFV,OAOInK,EAAS5D,GAAQtD,SAAS,CAAC,SAAUqR,EAAO1K,OAPhD,gDASIzB,QAAQC,IAAR,MATJ,kEAYA,CAAC+B,IAGH,OACE,oCACE,kBAACwK,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CACEtH,UAAW6Z,EACX5Z,UAAW,kBAAM6Z,EAAe,QAE9B,kBAACxS,GAAA,EAAOI,MAAR,eAAsC,YAAhBmS,EAA4B,gBAAkB,mBACpE,kBAACvS,GAAA,EAAOK,QAAR,CAAgBxH,MAAO,CAAE4B,QAAS,GAAIkH,OAAQ,MAC5C,kBAAC,KAAD,CACEiR,gBAAiB,SAAA9X,GACjBvF,EACkB,YAAhBgd,EACI5gB,GAAQtD,SAAS,CAAC,eAAgByM,IAClCnJ,GAAQtD,SAAS,CAAC,iBAAkByM,MAG1CjC,MAAO,CAAEX,KAAM,GACf2a,gBAAiBC,KACjBC,cAA+B,YAAhBR,EAA4BvmB,EAAMqB,OAAOX,aAAaa,MAAQvB,EAAMqB,OAAOV,eAAeY,aAAU+X,EACnH0N,aAAW,KAGf,kBAAChT,GAAA,EAAOM,QAAR,KACE,kBAACC,GAAA,EAAD,CAAQlG,QAAS,kBAAMmY,EAAe,QAAtC,UACA,kBAACjS,GAAA,EAAD,CACE+F,SACmB,YAAhBiM,IAA8BvmB,EAAMqB,OAAOX,aAAaa,OACxC,cAAhBglB,IAAgCvmB,EAAMqB,OAAOV,eAAeY,MAE/D8M,QAAS,WACP9G,QAAQC,IAAI,CACVyf,QAASrf,EAAOlI,MAAMT,OAAOuB,OAC7B0mB,KAAMlnB,EAAMqB,OAAOV,eAAeY,QAGlCgI,EADkB,YAAhBgd,EAEA9gB,GAAcpF,gBAAgBL,EAAMqB,OAAOX,aAAaa,OAIxDkE,GAAclF,eAAeP,EAAMqB,OAAOV,eAAeY,QAG7DilB,EAAe,QAnBnB,WA2BR,kBAACpN,GAAA,EAAD,CAAMvM,MAAO,CAAE6I,MAAO,OAAQyR,UAAW,IAAKnR,eAAgB,KAC5D,kBAACoD,GAAA,EAAKgO,MAAN,CACEC,OAAQ,CAAEre,IAAKhJ,EAAMqB,OAAOwB,OAAOtB,OAAS,6BAC5C0b,WAAW,UAEb,kBAAC7D,GAAA,EAAK9E,QAAN,CAAczH,MAAO,CAAEV,eAAgB,aACrC,kBAACoI,GAAA,EAAD,CAAQlG,QAASoY,GAAjB,YAGJ,kBAACrN,GAAA,EAAD,CAAMvM,MAAO,CAAE6I,MAAO,OAAQM,eAAgB,GAAIoH,kBAAmB,KACnE,kBAAC,KAAKvN,UAAN,CAAgBhD,MAAOoB,GAAOqZ,WAA9B,YACA,kBAACtV,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAOxB,KAAK2B,MAC3BD,MAAOvB,EAAMqB,OAAOxB,KAAK0B,OAAS,GAClCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAEjE,kBAAChB,GAAA,EAAD,CAAYC,KAAK,SACbzR,EAAMqB,OAAOxB,KAAK2B,OAAS,IAK/B,kBAAC,KAAKqO,UAAN,CAAgBhD,MAAOoB,GAAOqZ,WAA9B,cAEA,kBAACxX,GAAA,EAAD,CACEnD,UAAW,kBAAM2Z,GAAsB,IACvC5Z,QAAS2Z,EACTtW,OACE,kBAACD,GAAA,EAAKE,KAAN,CACE3B,QAAS,kBAAMiY,GAAsB,IACrCnY,OAAO,SAAAnO,EAAMqB,SAAN,WAAcU,aAAd,WAA0BR,YAA1B,IAAiC1B,OAAQ,GAChDsR,KAAK,eAPX,MAUIzB,GAVJ,SAUIA,EAAM4U,kBAVV,EAUI,EAAmBzgB,KAAI,SAAC9B,GAAD,OACrB,kBAAC+N,GAAA,EAAKE,KAAN,CACE7B,MAAOpM,EAAWlC,KAClBwO,QAAS,WACP9E,EAAS5D,GAAQtD,SAAS,CAAC,aAAcN,KACzCukB,GAAsB,UAMhC,kBAAC9U,GAAA,EAAD,CAAYC,KAAK,SACbzR,EAAMqB,OAAOU,WAAWP,OAAS,IAErC,kBAAC,KAAKqO,UAAN,CAAgBhD,MAAOoB,GAAOqZ,WAA9B,YACA,kBAAC,KAAKtX,KAAN,CACE7B,MAAM,gBACNE,QAAS,kBAAMmY,EAAe,YAC9BvV,KAAM,kBACJ,kBAAC,GAAD,CACEpE,MAAO,CACL6I,MAAO,GACPC,OAAQ,GACRnJ,gBAAiB5E,EAAOlI,MAAMT,OAAOqB,cAK7C,kBAAC,KAAK0P,KAAN,CACE7B,MAAM,kBACNE,QAAS,kBAAMmY,EAAe,cAC9BvV,KAAM,kBACJ,kBAAC,GAAD,CACEpE,MAAO,CACL6I,MAAO,GACPC,OAAQ,GACRnJ,gBAAiB5E,EAAOlI,MAAMT,OAAOuB,aAM7C,kBAAC,KAAKwP,KAAN,CACE7B,MAAM,oBACN8B,YAAY,4GACZ5B,QAAS,kBACP9E,EAAS5D,GAAQtD,SAAS,CAAC,yBAA0BrC,EAAMqB,OAAOyB,sBAAsBvB,UAE1F0P,KAAM,kBACJ,kBAACmN,GAAA,EAAD,CACE/P,QAAS,kBACP9E,EAAS5D,GAAQtD,SAAS,CAAC,yBAA0BrC,EAAMqB,OAAOyB,sBAAsBvB,UAE1F8c,OAAQre,EAAMqB,OAAOyB,sBAAsBvB,MACrC,UACA,iBAMZ,kBAAC,KAAKyO,KAAN,CACE7B,MAAM,SACN8B,YAAY,qEACZ5B,QAAS,kBACP9E,EAAS5D,GAAQtD,SAAS,CAAC,YAAarC,EAAMqB,OAAO0B,SAASxB,UAEhE0P,KAAM,kBACJ,kBAACmN,GAAA,EAAD,CACE/P,QAAS,kBACP9E,EAAS5D,GAAQtD,SAAS,CAAC,YAAarC,EAAMqB,OAAO0B,SAASxB,UAEhE8c,OAAQre,EAAMqB,OAAO0B,SAASxB,MACxB,UACA,mBASpB,I,MAAM0M,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACN+Y,SAAU,EACV/E,QAAS,OACTK,MAAO,QAETpT,MAAO,CACLmQ,aAAc,EACdiD,MAAO,QAET4R,UAAW,CACThF,YAAa,K,ykBC/NT3c,GAAYzE,EAAZyE,QACSF,GAAkBI,EAA3BF,QAEF4hB,GAAyBvY,cAAH,0TAqBtBwY,GAA2BxY,cAAH,22BA6Cf,SAASyY,KAAwB,IAAD,EACvCznB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMgI,gBACtCuI,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAC5C2B,EAAWb,KAGXmI,EADQyS,sBACSE,OAAQ3S,SACzB9C,EAAawJ,2BAP0B,EASnBjI,mBAAgBiY,GAAwB,CAChEhY,UAAW,CAAEiB,WAAYzM,OAAO8M,EAAS/M,OADnC4L,EATqC,EASrCA,KAAMC,EAT+B,EAS/BA,QAId0B,aAAgB,WAAO,IAAD,EACpB,MAAI3B,GAAJ,SAAIA,EAAMmB,WAAN,EAAgB/M,IAClByF,EAAS5D,GAAQ3C,YAAY0M,EAAKmB,aAEnC,OAACnB,GAAD,SAACA,EAAMmB,eAAP,EAAC,EAAgB/M,KAjByB,MAmBF8O,sBAAsB4U,IAnBpB,WAmBtCE,EAnBsC,KAmBd/P,EAnBc,KAqBvCqH,EAAS3N,eAAkB,iFAAA8B,EAAAC,OAAA,mDAC3B2L,GAAW,EADgB,EAEqE/e,EAAMqB,OAAlGxB,EAFuB,EAEvBA,KAAMgD,EAFiB,EAEjBA,OAAQd,EAFS,EAETA,WAAYrB,EAFH,EAEGA,aAAcC,EAFjB,EAEiBA,eAAgBmC,EAFjC,EAEiCA,sBAAuBC,EAFxD,EAEwDA,UAEnF,SAAClD,EAAK0B,SAAL,EAAY+K,SAAU,SAAAzM,EAAK0B,YAAL,IAAY+K,QAAS,KAC9CyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,wBAI9Bwc,EAX0B,6CAAA5L,EAAA,MAaNuU,EAAuB,CAC1CnY,UAAW,CACTzL,GAAIC,OAAM,MAAC8M,OAAD,EAACA,EAAU/M,IACrBjE,KAAMA,EAAK0B,MACXsB,OAAQA,EAAOtB,OAAS,KACxBb,aAAcA,EAAaa,MAC3BZ,eAAgBA,EAAeY,MAC/B2iB,aAAcngB,OAAM,MAAChC,GAAD,SAACA,EAAYR,YAAb,EAAC,EAAmBuC,IACxChB,wBAAyBA,EACzBC,WAAYA,MAtBW,UA0BrB,OAbA2Q,EAbqB,SA0B3B,SAAAA,EAAQhE,OAAR,WAAciY,iBAAd,WAA8B/T,cAA9B,EAA2C/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QACvD,OAAQ3H,GACN,IAAK,aACL,IAAK,gBACH,OAAOiH,EAAS5D,GAAQpD,cAAc,CAAC,aAAc0H,KACvD,IAAK,SACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,SAAU0H,KACnD,IAAK,gBACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,eAAgB0H,KACzD,IAAK,kBACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,iBAAkB0H,KAC3D,IAAK,2BACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,wBAAyB0H,KAClE,IAAK,OACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,OAAQ0H,KACjD,IAAK,YACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,WAAY0H,SA1C9B,MA6CvByJ,GA7CuB,SA6CvBA,EAAQhE,OA7Ce,SA6CvB,EAAciY,iBA7CS,SA6CvB,EAA8B9T,UAA9B,EAAsCvH,OA7Cf,0CA8ClB/C,EAASvD,GAAgB7E,aAAa,CAC3C8I,QAAO,MAAEyJ,GAAF,SAAEA,EAAQhE,OAAV,SAAE,EAAciY,qBAAhB,EAAE,EAA8B9T,OAAO,GAC9C3J,QAAS,YAhDc,QAkDhB,MAACwJ,GAAD,SAACA,EAAQhE,OAAT,SAAC,EAAciY,iBAAf,SAAC,EAA8B/T,cAA9B,EAA2CtH,QAErD,SAAIoH,EAAOhE,OAAX,SAAI,EAAaiY,iBAAb,EAA6B9W,WAC/BtH,EACE9D,GAAchF,YAAd,SACM8P,EAAYhR,iBAAmB,IADrC,MAEKmU,GAFL,SAEKA,EAAQhE,OAFb,SAEK,EAAciY,qBAFnB,EAEK,EAA8B9W,YAGrCtH,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,QAAUC,QAAS,aAErD6D,EAAWoR,UA9DY,0DAkE3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WAnEhC,mEAwE9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAUme,IAE5C,OACE,gCACA,gBAACxT,GAAA,EAAD,CAAaC,eAAa,EAACrF,MAAOyB,EAAY7Q,MAAMT,OAAOuB,OAAQkM,QAASiD,IAC5E,gBAAC4O,GAAD,CAAkBlD,sBAAuBpN,GAAOyQ,SAC9C,gBAAC,GAAD,MACA,gBAAC,GAAD,CAAM7R,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU3C,EAAShI,QAAStB,QAAS2Q,EAAQrP,QAASgI,EAAShI,SAAxF,WASR,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNM,gBAAiB,QACjB6I,QAAS,QAEXqJ,QAAS,CACPrJ,QAAS,OACT+E,SAAU,EACV5L,WAAY,SACZC,QAAS,IAEXN,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,MACPjD,aAAc,IAEhBnQ,MAAO,CACLmQ,aAAc,KC9MZoE,GAAe7H,aAAH,kQAiBH,SAAS4Y,KAAgB,IAAD,QAC/B5nB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UADP,EAEF0H,mBAAgBuH,GAAc,CAC/DtH,UAAW,CACTiB,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,OAFtC4L,EAF6B,EAE7BA,KAAMC,EAFuB,EAEvBA,QAASC,EAFc,EAEdA,QAKjB7B,EAAawJ,2BAEbuD,EAAYC,0BASlB,OAPA1J,aAAgB,WACVyJ,GACFlL,MAED,CAACkL,IAIF,gBAACyD,GAAD,CAAkBmH,eAAgB,gBAACC,GAAA,EAAD,CAAgBpK,WAAY5L,EAAS6L,UAAW5L,KAChF,gBAACsE,GAAA,EAAD,CAAaxH,QAASiD,EAASb,MAAO9O,EAAMN,MAAMT,OAAOuB,WAInD,MAACkP,GAAD,SAACA,EAAMqH,SAAN,EAAczK,SACb,gBAAC0I,GAAD,CACE7G,MAAM,aACN8G,SAAS,2DAKT,MAAJvF,GAAA,SAAAA,EAAMqH,aAAN,IAAczK,SACd,gBAACmN,GAAA,EAAD,KACE,gBAACA,GAAA,EAAUC,OAAX,KACE,gBAACD,GAAA,EAAUrF,MAAX,aACA,gBAACqF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,gBACA,gBAACF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,UAJJ,MAOIjK,GAPJ,SAOIA,EAAMqH,aAPV,EAOI,EAAclT,KAAI,SAACQ,GAAD,OAChB,gBAACoV,GAAA,EAAUG,IAAX,CACEC,cAAc,OACdxL,QAAS,kBAAMN,EAAW+N,SAAS,oBAAqB,CAAEzX,YAE1D,gBAACoV,GAAA,EAAUK,KAAX,KAAiBzV,EAAMxE,MACvB,gBAAC4Z,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAEtV,EAAMpB,cAC/B,gBAACwW,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GACpBtV,EAAMlB,eAOvB,gBAACyY,GAAA,EAAD,CACE/O,MAAOoB,GAAOqH,IACduG,OAAK,EACL1K,KAAK,OACL9C,QAAS,kBAAMN,EAAW+N,SAAS,sBACnC5J,MAAM,eAMd,I,GAAMjE,GAASlC,KAAWC,OAAO,CAC/B0S,QAAS,CACPtE,SAAU,GAEZ9E,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,GAEVP,MAAO,CACLhJ,KAAM,EACNsC,WAAY,SACZrC,eAAgB,SAChBuJ,MAAO,OACPC,OAAQ,UCrGJhQ,GAAYzE,EAAZyE,QAGFkiB,GAAe7Y,aAAH,0NAiBH,SAAS8Y,KAAkB,IAAD,UACjC9nB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMkI,kBACtCqB,EAAWb,KACX6H,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAHX,EAKSyJ,YAAe,GALxB,WAKhC0W,EALgC,KAKdC,EALc,OAMJ1Y,mBAAgBuY,GAAc,CAC/DtY,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,OAF5C4L,EAN+B,EAM/BA,KAN+B,EAMzBC,QANyB,EAMhBC,QAMvB,OACE,gCACE,gBAACoC,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAOxB,KAAK2B,MAC3BD,MAAOvB,EAAMqB,OAAOxB,KAAK0B,OAAS,GAClCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAEjE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOxB,KAAK2B,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOxB,KAAK2B,OAAS,qCAG/B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAOiC,KAAK9B,MAC3BD,MAAK,SAAEvB,EAAMqB,OAAOiC,OAAf,SAAE,EAAmB/B,YAArB,EAAE,EAA0B4Q,WACjCI,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQ0B,OAAOyO,SAExE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOiC,KAAK9B,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOiC,KAAK9B,OAAS,yCAE/B,gBAACwM,EAAA,EAAD,CAAMnB,MAAO,CAAE6I,MAAO,SAEtB,gBAAC5F,GAAA,EAAD,CACEnD,UAAW,kBAAMqb,GAAoB,IACrCtb,QAASqb,EAETlb,MAAO,CAAC0I,SAAS,WAAWlD,MAAM,MAAMpB,KAAK,MAAO/E,KAAM,GAC1D6D,OACE,gBAAC,KAAKC,KAAN,CACE3B,QAAS,WACP2Z,GAAoB,IAEtB7Z,MACEnO,EAAMqB,OAAOkC,SAAShC,OAAS,CAAC,IAAM,MAAOuP,SAAS9Q,EAAMqB,OAAOkC,SAAShC,OAC1E,CACE,KAAS,SACT,IAAQ,aACRvB,EAAMqB,OAAOkC,SAAShC,MAAM4Q,YAC9B,SAEJtF,MAAO,CAAE6I,MAAO,OAAQxJ,KAAM,GAC9BmG,MAAQ,kBACN,gBAAC,KAAKnB,KAAN,CAAWC,KAAMnR,EAAMqB,OAAOkC,SAAShC,OAAS,CAAC,IAAM,MAAOuP,SAAS9Q,EAAMqB,OAAOkC,SAAShC,OAC3F,CACE,KAAS,WACT,IAAQ,aACRvB,EAAMqB,OAAOkC,SAAShC,MAAM4Q,YAC9B,oBAKN,gBAAC,KAAKnC,KAAN,CACE3B,QAAS,WACP9E,EAAS5D,GAAQtD,SAAS,CAAC,WAAY,OACvC2lB,GAAoB,IAEtB7Z,MAAM,YACNkE,MAAO,kBAAM,gBAAC,KAAKnB,KAAN,CAAWC,KAAK,iBAE/B,gBAAC,KAAKnB,KAAN,CACE3B,QAAS,WACP9E,EAAS5D,GAAQtD,SAAS,CAAC,WAAY,QACvC2lB,GAAoB,IAEtB7Z,MAAM,SACNkE,MAAO,kBAAM,gBAAC,KAAKnB,KAAN,CAAWC,KAAK,wBAE/B,gBAAC,KAAKnB,KAAN,CACE3B,QAAS,WACP9E,EAAS5D,GAAQtD,SAAS,CAAC,WAAY,OACvC2lB,GAAoB,IAEtB7Z,MAAM,QACNkE,MAAO,kBAAM,gBAAC,KAAKnB,KAAN,CAAWC,KAAK,oBAK/BnR,EAAMqB,OAAOkC,SAAShC,QAAU,CAAC,IAAM,MAAOuP,SAAS9Q,EAAMqB,OAAOkC,SAAShC,SAC7E,gBAACyQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,kBACN1Q,QAASxB,EAAMqB,OAAOkC,SAAS/B,MAC/BD,MAAK,SAAEvB,EAAMqB,OAAOkC,WAAf,SAAE,EAAuBhC,YAAzB,EAAE,EAA8B4Q,WACrCI,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,WAAY0B,OAAOyO,SAKhF,gBAAC4L,GAAA,EAASpO,KAAV,CACEkC,MAAM,SACNrF,MAAO,CAAE6I,MAAO,QAChB2I,OAAUre,EAAMqB,OAAOoC,SAASlC,MAC5B,UACA,YAEJ8M,QACE,kBAAM9E,EAAS5D,GAAQtD,SAAS,CAAC,YAAarC,EAAMqB,OAAOoC,SAASlC,YAGxE,gBAACiQ,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOoC,SAASjC,MAAQ,QAAU,QACxDxB,EAAMqB,OAAOoC,SAASjC,OAAS,kEAGnC,gBAAC4c,GAAA,EAASpO,KAAV,CACEkC,MAAM,qBACNrF,MAAO,CAAE6I,MAAO,QAChB2I,OAAUre,EAAMqB,OAAOmC,qBAAqBjC,MACxC,UACA,YAEJ8M,QACE,kBAAM9E,EAAS5D,GAAQtD,SAAS,CAAC,wBAAyBrC,EAAMqB,OAAOmC,qBAAqBjC,YAIhG,gBAACiQ,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOmC,qBAAqBhC,MAAQ,QAAU,QACpExB,EAAMqB,OAAOmC,qBAAqBhC,OAAS,uDAG/C,gBAACuQ,GAAA,EAAD,MACA,gBAAC,KAAKlC,UAAN,+BAvGA,MAyGEH,OAzGF,EAyGEA,EAAMhM,OAAOG,KAAI,SAACsF,GAAD,aACf,gBAACiV,GAAA,EAASpO,KAAV,CACEkC,MAAO/I,EAAMtJ,KACbwe,OAAQ,SAAAre,EAAMqB,OAAOqC,OAAOnC,QAApB,EAA2BsC,KAAI,qBAAGC,MAAagN,SAAS3H,EAAMrF,IAClE,UACA,YAEJuK,QACE,0BAAM9E,EACJ5D,GAAQtD,SAAS,CACf,SACA,SAAArC,EAAMqB,OAAOqC,OAAOnC,QAApB,EAA2BsC,KAAI,qBAAGC,MAAagN,SAAS3H,EAAMrF,IAA9D,SACE9D,EAAMqB,OAAOqC,OAAOnC,YADtB,EACE,EAA2B8D,QAAO,qBAAGvB,KAAgBqF,EAAMrF,MAD7D,eAEM9D,EAAMqB,OAAOqC,OAAOnC,OAF1B,CAEkC4H,eAapD,I,GAAM8E,GAASlC,KAAWC,OAAO,CAC/B1J,MAAO,CACLmQ,aAAc,EACdiD,MAAO,UC1LH/P,GAAYzE,EAAZyE,QAIFsiB,IAH6BpiB,EAA3BF,QAG4BqJ,cAAH,omBAiClB,SAASkZ,KAA0B,IAAD,EACQtf,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EACvCkI,eAA+BqI,EADQ,EAChB3I,OACzB2B,EAAWb,KAEXqF,EAAawJ,2BAJ4B,EAMN3E,sBAAsBqV,IANhB,WAMxCE,EANwC,KAMdzY,EANc,KAOzCoL,EAAYC,0BAClB1J,aAAgB,WACVyJ,GACFvR,EAAS5D,GAAQ7D,WAElB,CAACgZ,IAEJ,IAAM/H,EAAW1B,eAAkB,WACjC,IAAI0N,GAAW,EAsBf,QArBK/e,EAAMqB,OAAOxB,KAAK0B,OAASvB,EAAMqB,OAAOxB,KAAK0B,MAAM+K,OAAS,KAC/DyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,wBAI/BvC,EAAMqB,OAAOiC,KAAK/B,MAAS,IAC7Bwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,+BAI9BvC,EAAMqB,OAAOkC,SAAShC,QACzBwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,WAAY,kCAI/Bwc,IACP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,iEAAA8B,EAAAC,OAAA,qDAC0CpT,EAAMqB,OAAvExB,EADuB,EACvBA,KAAMyD,EADiB,EACjBA,KAAME,EADW,EACXA,qBAAsBD,EADX,EACWA,SAAUG,EADrB,EACqBA,OAAQD,EAD7B,EAC6BA,UAIxDsP,IAL2B,6CAAAI,EAAA,MAONgV,EAAyB,CAC5C5Y,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDjE,KAAMA,EAAK0B,MACX+B,KAAMA,EAAK/B,MACXgC,SAAUA,EAAShC,MACnBiC,qBAAsBA,EAAqBjC,MAC3C+R,SAAQ,MAAE5P,GAAF,SAAEA,EAAQnC,YAAV,EAAE,EAAesC,KAAI,qBAAGC,MAChCL,WAAYA,EAASlC,UAfE,UAmBrB,OAZAmS,EAPqB,SAmB3B,SAAAA,EAAQhE,OAAR,WAAc0Y,mBAAd,WAAgCxU,cAAhC,EAA6C/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QACzD,OAAQ3H,GACN,IAAK,OACH,OAAOiH,EAAS5D,GAAQpD,cAAc,CAAC,OAAQ0H,KACjD,IAAK,WACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,WAAY0H,KACrD,IAAK,OACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,OAAQ0H,KACjD,IAAK,yBACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,uBAAwB0H,KACjE,IAAK,SACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,SAAU0H,SA9B5B,MAkCvByJ,GAlCuB,SAkCvBA,EAAQhE,OAlCe,SAkCvB,EAAc0Y,mBAlCS,SAkCvB,EAAgCvU,UAAhC,EAAwCvH,OAlCjB,yCAmClB/C,EACLvD,GAAgB7E,aAAa,CAC3B8I,QAAO,MAAEyJ,GAAF,SAAEA,EAAQhE,OAAV,SAAE,EAAc0Y,uBAAhB,EAAE,EAAgCvU,OAAO,GAChD3J,QAAS,YAtCY,OA2C3B,SAAIwJ,EAAOhE,OAAX,SAAI,EAAa0Y,mBAAb,EAA+B3jB,aACjC8E,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,QAAUC,QAAS,aAErD6D,EAAWoR,UA/Cc,kDAkD3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WAnDhC,mEAwD9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAU4e,IAE5C,OACE,gBAAC5J,GAAD,CAAkBlD,sBAAuB,CAAE+B,kBAAmB,KAC1D,gBAACgC,GAAA,EAAD,CAAwBvf,KAAK,SAASwf,KAAM,IAAKvQ,MAAM,UAAUjC,MAAO,CAAEyS,UAAW,YACrF,gBAACwI,GAAD,MACA,gBAAC,GAAD,CAAMjb,MAAOoB,GAAOtI,SAClB,gBAAC4O,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAhF,UAQV,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/B+J,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAET/P,QAAS,CACPqQ,eAAgB,GAChBN,MAAO,UC5JH/P,GAAYzE,EAAZyE,QAIF4f,IAH6B1f,EAA3BF,QAG4BqJ,cAAH,moBAmClB,SAASqZ,KAA0B,IAAD,EACQzf,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EACvCkI,eACFqB,GAFyC,EAChB3B,OACdc,MAEXqF,EAAawJ,2BAEb9S,EADQ6e,sBACWE,OAAQ/e,WAEjC4M,aAAgB,WACd9H,EAAS5D,GAAQ3C,YAAYyB,MAC5B,OAACA,OAAD,EAACA,EAAYX,KAV+B,MAYN8O,sBAAsB2S,IAZhB,WAYxCE,EAZwC,KAYd/V,EAZc,KAczCqD,EAAW1B,eAAkB,WACjC,IAAI0N,GAAW,EAsBf,QArBK/e,EAAMqB,OAAOxB,KAAK0B,OAASvB,EAAMqB,OAAOxB,KAAK0B,MAAM+K,OAAS,KAC/DyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,wBAI/BvC,EAAMqB,OAAOiC,KAAK/B,MAAS,IAC7Bwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,+BAI9BvC,EAAMqB,OAAOkC,SAAShC,QACzBwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,WAAY,kCAI/Bwc,IACP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,+DAAA8B,EAAAC,OAAA,qDAC0CpT,EAAMqB,OAAvExB,EADuB,EACvBA,KAAMyD,EADiB,EACjBA,KAAME,EADW,EACXA,qBAAsBD,EADX,EACWA,SAAUG,EADrB,EACqBA,OAAQD,EAD7B,EAC6BA,UAIxDsP,IAL2B,6CAAAI,EAAA,MAONsS,EAAyB,CAC5ClW,UAAW,CACTzL,GAAIC,OAAO/D,EAAM4C,SAAUkB,IAC3BjE,KAAMA,EAAK0B,MACX+B,KAAMA,EAAK/B,MACXgC,SAAUA,EAAShC,MACnBiC,qBAAsBA,EAAqBjC,MAC3C+R,SAAQ,MAAE5P,GAAF,SAAEA,EAAQnC,YAAV,EAAE,EAAesC,KAAI,qBAAGC,MAChCL,WAAYA,EAASlC,UAfE,UAoBrB,OAbAmS,EAPqB,SAoB3B,SAAAA,EAAQhE,OAAR,WAAc4Y,mBAAd,WAAgC1U,cAAhC,EAA6C/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QACzD,OAAQ3H,GACN,IAAK,OACH,OAAOiH,EAAS5D,GAAQpD,cAAc,CAAC,OAAQ0H,KACjD,IAAK,WACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,WAAY0H,KACrD,IAAK,OACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,OAAQ0H,KACjD,IAAK,yBACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,uBAAwB0H,KACjE,IAAK,SACH,OAAOV,EAAS5D,GAAQpD,cAAc,CAAC,SAAU0H,SA/B5B,MAmCvByJ,GAnCuB,SAmCvBA,EAAQhE,OAnCe,SAmCvB,EAAc4Y,mBAnCS,SAmCvB,EAAgCzU,UAAhC,EAAwCvH,OAnCjB,yCAoClB/C,EACLvD,GAAgB7E,aAAa,CAC3B8I,QAAO,MAAEyJ,GAAF,SAAEA,EAAQhE,OAAV,SAAE,EAAc4Y,uBAAhB,EAAE,EAAgCzU,OAAO,GAChD3J,QAAS,YAvCY,OA4C3B,SAAIwJ,EAAOhE,OAAX,SAAI,EAAa4Y,mBAAb,EAA+B7jB,aACjC8E,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,QAAUC,QAAS,aAErD6D,EAAWoR,UAhDc,kDAmD3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WApDhC,mEAyD9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAUkc,IAE5C,OACE,gBAAClH,GAAD,CAAkBlD,sBAAuB,CAAE+B,kBAAmB,KAC1D,gBAACgC,GAAA,EAAD,CAAwBvf,KAAK,SAASwf,KAAM,IAAKvQ,MAAM,UAAUjC,MAAO,CAAEyS,UAAW,YACrF,gBAACwI,GAAD,MACA,gBAAC,GAAD,CAAMjb,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAhF,UAQV,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,UAEdL,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,OACPM,eAAgB,IAElB1T,MAAO,CACLmQ,aAAc,K,UC9KV9M,GAAYzE,EAAZyE,QAGF0K,GAAqBrB,aAAH,0QAmBT,SAASuZ,KAAa,IAAD,MAC5BvoB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMmI,aACtCoB,EAAWb,KACX6H,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAHhB,EAIC0H,mBAAgBe,GAAoB,CACrEd,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,OAF5C4L,EAJ0B,EAI1BA,KAJ0B,EAIpBC,QAJoB,EAIXC,QAMvB,OACE,gCACE,gBAACoC,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAOxB,KAAK2B,MAC3BD,MAAOvB,EAAMqB,OAAOxB,KAAK0B,MACzBgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAEjE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOxB,KAAK2B,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOxB,KAAK2B,OAAS,IAG/B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAOiC,KAAK9B,MAC3BD,MAAK,SAAEvB,EAAMqB,OAAOiC,OAAf,SAAE,EAAmB/B,YAArB,EAAE,EAA0B4Q,WACjCI,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQ0B,OAAOyO,SAExE,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOiC,KAAK9B,MAAQ,QAAU,QACpDxB,EAAMqB,OAAOiC,KAAK9B,OAAS,IAG/B,gBAACwM,EAAA,EAAD,CAAMnB,MAAO,CAAE6I,MAAO,SACpB,gBAAC,KAAK7F,UAAN,2BADF,MAKIH,OALJ,EAKIA,EAAM9L,YAAYC,KAAI,SAAC2kB,GAAD,OACpB,gBAACpK,GAAA,EAASpO,KAAV,CACEkC,MAAOsW,EAAO3oB,KACdwe,OAAQre,EAAMqB,OAAOsC,cAAcpC,MAAMuP,SAAS/M,OAAOykB,EAAO1kB,KAC5D,UACA,YAEJuK,QACE,kBAAM9E,EAAS5D,GAAQtD,SAAS,CAAC,gBAAiBomB,eAAIzoB,EAAMqB,OAAOsC,cAAcpC,MAAO,CAACwC,OAAOykB,EAAO1kB,iBAUvH,I,GAAMmK,GAASlC,KAAWC,OAAO,CAC/B3K,OAAQ,CACNqU,MAAO,OACPxJ,KAAM,GAGR5J,MAAO,CACLmQ,aAAc,EACdiD,MAAO,UCrFH/P,GAAYzE,EAAZyE,QAIF+iB,IAH6B7iB,EAA3BF,QAGsBqJ,cAAH,wgBA+BZ,SAAS2Z,KAAqB,IAAD,EACQ/f,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EAClCmI,UAA0BoI,EADQ,EAChB3I,OACpB2B,EAAWb,KAEXqF,EAAawJ,2BACbuD,EAAYC,0BAClB1J,aAAgB,WACVyJ,GACFvR,EAAS5D,GAAQ7D,WAElB,CAACgZ,IAVsC,MAYNlI,sBAAsB8V,IAZhB,WAYnCE,EAZmC,KAYdlZ,EAZc,KAcpCqD,EAAW1B,eAAkB,WACjC,IAAI0N,GAAW,EAgBf,OAfI/e,EAAMqB,OAAOxB,KAAK0B,MAAM+K,OAAS,IACnCyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,wBAI/BwB,OAAO/D,EAAMqB,OAAOiC,KAAK/B,OAAS,IACpCwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,8BAK3Bwc,IACP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,2CAAA8B,EAAAC,OAAA,qDACOpT,EAAMqB,OAApCxB,EADuB,EACvBA,KAAMyD,EADiB,EACjBA,KAAMK,EADW,EACXA,eAIhBoP,IAL2B,6CAAAI,EAAA,MAONyV,EAAoB,CACvCrZ,UAAW,CACTiB,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDjE,KAAMA,EAAK0B,MACX+B,KAAMA,EAAK/B,MACXoC,cAAeA,EAAcpC,UAZN,OAOrBmS,EAPqB,OAgB3B,SAAIA,EAAOhE,OAAX,SAAI,EAAamZ,cAAb,EAA0B1f,QACpBA,EAAUuK,EAAOhE,KAAKmZ,YAAtB1f,MACRI,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,eAAgBd,EAAMtJ,KAAQqK,QAAS,aAEzE6D,EAAWoR,UArBc,gDAwB3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WAzBhC,kEA8B9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAUqf,IAE5C,OACE,gBAACrK,GAAD,CAAkBlD,sBAAuB,CAAE+B,kBAAmB,KAC1D,gBAACgC,GAAA,EAAD,CAAwBvf,KAAK,iBAAiBwf,KAAM,IAAKvQ,MAAM,UAAUjC,MAAO,CAAEyS,UAAW,YAC7F,gBAACiJ,GAAD,MACA,gBAAC,GAAD,CAAM1b,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAhF,UAQV,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,UAEdL,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,OACPjD,aAAc,IAEhBnQ,MAAO,CACLoT,MAAO,OACPjD,aAAc,KCtIV9M,GAAYzE,EAAZyE,QAIFmjB,IAH6BjjB,EAA3BF,QAGsBqJ,cAAH,uiBAiCZ,SAAS+Z,KAAqB,IAAD,EACQngB,IAAe,SAAA5I,GAAK,OAAIA,KAAvDA,EADuB,EAClCmI,UAA0BoI,EADQ,EAChB3I,OACpB2B,EAAWb,KAEXqF,EAAawJ,2BAEbpO,EADQma,sBACME,OAAQra,MAE5BkI,aAAgB,WACd9H,EAAS5D,GAAQ3C,YAAYmG,MAC5B,OAACA,OAAD,EAACA,EAAOrF,KAV+B,MAYN8O,sBAAsBkW,IAZhB,WAYnCE,EAZmC,KAYdtZ,EAZc,KAcpCqD,EAAW1B,eAAkB,WACjC,IAAI0N,GAAW,EAgBf,OAfI/e,EAAMqB,OAAOxB,KAAK0B,MAAM+K,OAAS,IACnCyS,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,wBAI/BwB,OAAO/D,EAAMqB,OAAOiC,KAAK/B,OAAS,IACpCwd,GAAW,EACXxV,EACE5D,GAAQpD,cAAc,CAAC,OAAQ,8BAK3Bwc,IAEP,CAACpU,KAAKC,UAAU5K,EAAMqB,QAASkI,IAE5ByV,EAAS3N,eAAkB,yCAAA8B,EAAAC,OAAA,qDACOpT,EAAMqB,OAApCxB,EADuB,EACvBA,KAAMyD,EADiB,EACjBA,KAAMK,EADW,EACXA,eAIhBoP,IAL2B,6CAAAI,EAAA,MAON6V,EAAoB,CACvCzZ,UAAW,CACTzL,GAAIC,OAAO/D,EAAM4C,SAAUkB,IAC3B0M,WAAYzM,OAAM,SAACwM,EAAYhR,sBAAb,EAAC,EAA6BuE,IAChDjE,KAAMA,EAAK0B,MACX+B,KAAMA,EAAK/B,MACXoC,cAAeA,EAAcpC,UAbN,OAOrBmS,EAPqB,OAiB3B,SAAIA,EAAOhE,OAAX,SAAI,EAAauZ,cAAb,EAA0B9f,QAC5BI,EACE2V,GAAS/d,aAAa,CAAE8I,QAAQ,QAAUC,QAAS,aAErD6D,EAAWoR,UArBc,gDAwB3B5V,EACE2V,GAAS/d,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WAzBhC,kEA8B9B,CAACS,KAAKC,UAAU5K,EAAMqB,QAASkI,EAAUyf,IAE5C,OACE,gBAACzK,GAAD,CAAkBlD,sBAAuB,CAAE+B,kBAAmB,KAC1D,gBAACgC,GAAA,EAAD,CAAwBvf,KAAK,iBAAiBwf,KAAM,IAAKvQ,MAAM,UAAUjC,MAAO,CAAEyS,UAAW,YAC7F,gBAACiJ,GAAD,MACA,gBAAC,GAAD,CAAM1b,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CAAQtC,KAAK,YAAYqI,SAAU5K,EAAKC,QAAStB,QAAS2Q,EAAQrP,QAASD,EAAKC,SAAhF,UAQV,I,GAAM1B,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,GAERiC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,OACPjD,aAAc,IAEhBnQ,MAAO,CACLmQ,aAAc,KCzIZ6S,GAAoBtW,aAAH,2OAkBR,SAASka,KAAgB,IAAD,MAC/BlpB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UADP,EAEF0H,mBAAgBgW,GAAmB,CACpE/V,UAAW,CACTiB,WAAYzM,OAAM,SAAC/D,EAAMT,sBAAP,EAAC,EAAuBuE,OAFtC4L,EAF6B,EAE7BA,KAAMC,EAFuB,EAEvBA,QAKR5B,GAP+B,EAEd6B,QAKJ2H,4BACL+L,sBASd,OACE,gCACA,gBAACpP,GAAA,EAAD,CAAaxH,QAASiD,EAASwE,eAAa,EAACrF,MAAO9O,EAAMN,MAAMT,OAAOuB,SACvE,gBAAC,GAAD,CAAMqM,MAAOoB,GAAOhC,WAClB,gBAACwN,GAAA,EAAD,KACE,gBAACA,GAAA,EAAUC,OAAX,KACE,gBAACD,GAAA,EAAUrF,MAAX,aACA,gBAACqF,GAAA,EAAUrF,MAAX,CAAiBuF,SAAO,GAAxB,SAHJ,MAMIjK,GANJ,SAMIA,EAAMhM,aANV,EAMI,EAAcG,KAAI,SAACsF,GAAD,OAClB,gBAACsQ,GAAA,EAAUG,IAAX,KACE,gBAACH,GAAA,EAAUK,KAAX,CAAgBzL,QAAS,kBAAMN,EAAW+N,SAAS,oBAAqB,CAAE3S,YAAWA,EAAMtJ,MAC3F,gBAAC4Z,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAExQ,EAAM7F,YAIlCqM,KAAW,MAACD,GAAD,SAACA,EAAMhM,SAAN,EAAc4I,SACzB,gBAAC0I,GAAD,CACE7G,MAAM,mBACN8G,SAAS,mFAIf,gBAAC2G,GAAA,EAAD,CACE/O,MAAOoB,GAAOqH,IACduG,OAAK,EACL1K,KAAK,OACL9C,QAAS,kBAAMN,EAAW+N,SAAS,sBACnC5J,MAAM,uBAOd,I,GAAMjE,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNuC,QAAS,EACT4G,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,GAEVP,MAAO,CACLhJ,KAAM,EACNsC,WAAY,SACZrC,eAAgB,SAChBuJ,MAAO,OACPC,OAAQ,UC/DNwT,GAAW5I,eAEF,SAAS6I,KACtB,OACE,gBAACD,GAAS1I,UAAV,CACEC,cAAe,CACbC,aAAa,EACbC,OAAQ,SAAC1R,GAAD,OAAW,gBAAC,GAAWA,IAC/B2R,UAAW,CACT3U,KAAM,KAIV,gBAACid,GAASrI,OAAV,CAAiBjhB,KAAK,iBAAiBkhB,UAAWoE,GAAgB3H,QAAS,CAAErP,MAAO,cACpF,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,yBAAyBkhB,UAAWsE,KAC1D,gBAAC8D,GAASrI,OAAV,CAAiBjhB,KAAK,uBAAuBkhB,UAAW0G,KACxD,gBAAC0B,GAASrI,OAAV,CAAiBjhB,KAAK,eAAekhB,UAAW6G,GAAcpK,QAAS,CAAErP,MAAO,YAChF,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,oBAAoBkhB,UAAWiF,GAAmBxI,QAAS,CAAErP,MAAO,eAC1F,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,oBAAoBkhB,UAAWoF,GAAmB3I,QAAS,CAAErP,MAAO,gBAC1F,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,oBAAoBkhB,UAAWsI,GAA0B7L,QAAS,CAAErP,MAAO,kBACjG,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,yBAAyBkhB,UAAWmH,GAAwB1K,QAAS,CAAErP,MAAO,qBACpG,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,yBAAyBkhB,UAAWsH,GAAwB7K,QAAS,CAAErP,MAAO,sBACpG,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,oBAAoBkhB,UAAW4H,GAAmBnL,QAAS,CAAErP,MAAO,0BAC1F,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,oBAAoBkhB,UAAWgI,GAAmBvL,QAAS,CAAErP,MAAO,0BAC1F,gBAACgb,GAASrI,OAAV,CAAiBjhB,KAAK,eAAekhB,UAAWmI,GAAc1L,QAAS,CAAErP,MAAO,qBCjDtF,IAAM8H,GAAuBjH,aAAH,gcA2BX,SAASsa,KAAe,IAAD,gBACL1gB,IAAe,SAAA5I,GAAK,OAAIA,KAAhD4H,EAD6B,EAC7BA,OAAQS,EADqB,EACrBA,YACTkB,EAAWb,KAFmB,EAIV4G,mBAAgB2G,GAAsB,CAC9D1G,UAAW,CACTiB,WAAYzM,OAAM,SAAC6D,EAAOrI,sBAAR,EAAC,EAAwBuE,IAC3CylB,OAAQlhB,EAAY5F,cAHhBiN,EAJ4B,EAI5BA,KAAMC,EAJsB,EAItBA,QAOR5B,EAAawJ,2BAEbuD,EAAYC,0BAOlB,OANA1J,aAAgB,WACVhJ,EAAY7F,iBACd+G,EAASzD,GAAanD,kBAAiB,MAExC,CAACmY,IAGF,gBAAC,GAAD,CAAMjO,MAAOoB,GAAOhC,WAClB,gBAACiI,GAAA,EAAD,CAAaC,eAAa,EAACrF,MAAOlH,EAAOlI,MAAMT,OAAOuB,OAAQkM,QAASiD,MAErE,MAACD,GAAD,SAACA,EAAMmB,WAAP,SAAC,EAAgBuF,gBAAjB,SAAC,EAA+BC,QAA/B,EAAsC/J,SACvC,gBAAC0I,GAAD,CAAW7G,MAAM,WAAW8G,SAAS,KAJzC,MAOIvF,GAPJ,SAOIA,EAAMmB,WAPV,SAOI,EAAgBuF,gBAPpB,SAOI,EAA+BC,YAPnC,EAOI,EAAsCxS,KAAI,SAACyS,GAAD,iBAC1C,gBAAC,KAAKtG,KAAN,CACE7B,MAAK,MAAEmI,GAAF,SAAEA,EAAMC,WAAR,EAAE,EAAY7R,KAAK7E,KACxBoQ,YAAW,MAAEqG,GAAF,SAAEA,EAAMC,OAAR,SAAE,EAAY3R,WAAd,EAAE,EAAkB/E,KAC/BoR,KAAM,kBAAM,gBAAC,KAAKC,KAAN,CAAWC,KAAK,aAC5B9C,QAAS,wBAAMN,EAAW+N,SAAS,oBAAqB,CAAErM,OAAM,MAAE6G,GAAF,SAAEA,EAAMC,WAAR,EAAE,EAAYzS,YAQxF,IAAMmK,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,GAERiC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,S,UC/CX,I,GAAMzH,GAASlC,KAAWC,OAAO,CAC/Bwd,eAAgB,CACdpP,SAAU,GAEZqP,MAAO,CACLjd,gBAAiB,cACjBmJ,OAAQ,OACR7G,MAAO,QACP4a,YAAa,QAEfvY,KAAM,CACJgF,iBAAkB,KAIPsJ,GA5Cf,YAA4H,IAA1G1R,EAAyG,EAAzGA,WAAY2R,EAA6F,EAA7FA,SAAUC,EAAmF,EAAnFA,MAAOgK,EAA4E,EAA5EA,SAAUlnB,EAAkE,EAAlEA,WAAYmnB,EAAsD,EAAtDA,cAAejnB,EAAuC,EAAvCA,iBAAuC,EACtFiG,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAGjE,OAJyH,EACjHrI,gBADiH,EAChGG,MACRgJ,KAGf,kBAACuX,GAAA,EAAOvG,OAAR,KACGgG,EAAW,kBAACO,GAAA,EAAOC,WAAR,CAAmB7R,QAASN,EAAWoR,SAAa,KAC/DyK,EAAgB,kBAAC3J,GAAA,EAAOC,WAAR,CAAmB7R,QAAS,kBAAM1L,GAAiB,MAAa,KAChFinB,EACG,kBAAC5b,EAAA,EAAD,CAAMnB,MAAOoB,GAAOub,gBAClB,kBAACxX,GAAA,EAAD,CACEnF,MAAOoB,GAAOwb,MACdloB,MAAOkB,EACP8P,aAAc,SAACnH,GAAD,OAAUue,EAASve,OAGrC,kBAAC6U,GAAA,EAAO5L,QAAR,CAAgBlG,MAAOwR,EAAMQ,WAAW3C,QAAQrP,QAEpD,kBAAC0b,GAAA,EAAD,CACEhqB,KAAK,SACLwO,QAAS,kBAAM1L,GAAkBinB,IACjC9a,MAAM,UACNuQ,KAAM,GACNxS,MAAOoB,GAAOkD,SC7BP,SAAS2Y,GAAkB5a,GAAwB,IAAD,gBAEzD6a,EAAarZ,GAAe,qBAElC,OAAI,SAAAxB,EAAMlC,SAAN,EAAcgd,WAAyC,YAA5B,SAAA9a,EAAMlC,aAAN,IAAcgd,WAEzC,kBAAChY,GAAA,EAAD,CACEC,KAAK,WACLqI,UAAWyP,EACXld,MAAO,CAAEmJ,eAAgB,GACzBzU,MAAO2N,EAAM3N,MACbgR,aAAc,SAACnH,GAAD,OAAU8D,EAAMiS,SAAS/V,IACvC8G,MAAOhD,EAAMlC,OAAOnN,MAAQ,KAGvB,SAAAqP,EAAMlC,SAAN,EAAcgd,WAAyC,aAA5B,SAAA9a,EAAMlC,aAAN,IAAcgd,WAEhD,kBAAC5L,GAAA,EAASpO,KAAV,CACEkC,MAAOhD,EAAMlC,OAAOnN,MAAQ,GAC5Bya,UAAWyP,EACXld,MAAO,CAAEmJ,eAAgB,GACzBqI,OAAwB,SAAhBnP,EAAM3N,MACV,UACA,YAEJ8M,QACE,kBAAMa,EAAMiS,SAAyB,SAAhBjS,EAAM3N,MAAmB,QAAU,WAIrD,SAAA2N,EAAMlC,SAAN,EAAcgd,WAAyC,aAA5B,SAAA9a,EAAMlC,aAAN,IAAcgd,WAEhD,kBAAChY,GAAA,EAAD,CACEsI,UAAWyP,EACXxoB,MAAO2N,EAAM3N,MACb0Q,KAAK,WACLM,aAAc,SAACnH,GAAD,OAAU8D,EAAMiS,SAAS/V,IACvC8G,MAAOhD,EAAMlC,OAAOnN,MAAQ,GAC5BuS,aAAa,aACbvF,MAAO,CAAEmJ,eAAgB,KAGpB,SAAA9G,EAAMlC,SAAN,EAAcgd,WAAyC,UAA5B,SAAA9a,EAAMlC,aAAN,IAAcgd,WAEhD,kBAAChJ,GAAD,CACE1G,UAAWyP,EACX3I,UAAWrd,OAAOmL,EAAM3N,OACxB4f,SAAU,SAACM,GAAD,OAAUvS,EAAMiS,SAASM,EAAKtP,aACxCD,MAAOhD,EAAMlC,OAAOnN,MAAQ,KAK3B,KCrDT,IAAMoqB,GAAuBjb,aAAH,8RAgBX,SAASwS,KAAW,IAAD,UAC0B5Y,IAAe,SAAA5I,GAAK,OAAIA,KAAlEuQ,EADgB,EACxB3I,OAAwC5H,EADhB,EACH+G,kBAEvBwC,EAAWb,KAHe,EAIN4G,mBAAgB2a,GAAsB,CAC9D1a,UAAW,CACTiB,WAAYzM,OAAM,MAACwM,GAAD,SAACA,EAAahR,sBAAd,EAAC,EAA8BuE,OAF7C4L,EAJwB,EAIxBA,KAJwB,EAIlBC,QAMd,OACE,sCAEID,GAFJ,SAEIA,EAAMmB,WAFV,SAEI,EAAgBqZ,yBAFpB,SAEI,EAAwCC,qBAF5C,EAEI,EAAwDtmB,KAAI,SAACyB,GAC3D,IAAM8kB,EAAepqB,EAAMqB,OAAOgpB,MAAK,SAAC9oB,GAAD,OAAgB,MAALA,OAAA,EAAAA,EAAOgE,cAAczB,MAAOwB,EAAKxB,MAEnF,OACE,gBAACgmB,GAAD,CACE9c,OAAQ1H,EACR/D,OAAmB,MAAZ6oB,OAAA,EAAAA,EAAc7oB,QAAS,GAC9B4f,SAAU,SAAC5f,GAAD,OACRgI,EACExC,GAAkB3B,QAAQ,CAAEG,cAAeD,EAAM/D,QAAOuC,IAAgB,MAAZsmB,OAAA,EAAAA,EAActmB,KAAM,eAWnFiI,KAAWC,OAAO,CAC/B3K,OAAQ,CACN6K,KAAM,GAER5J,MAAO,CACLmQ,aAAc,KALlB,I,SCjDM6X,GAAwBtb,aAAH,wmBAgCrBub,GAAiCvb,aAAH,+qBA2C9Bwb,GAAqBxb,aAAH,gkBAgCT,SAASyb,KAAuB,IAAD,UACc7hB,IAAe,SAAA5I,GAAK,OAAIA,KAAlEuQ,EAD4B,EACpC3I,OAAwC5H,EADJ,EACf+G,kBACvBwC,EAAWb,KAF2B,EAG9B4a,sBACwBE,OAA9Bhf,EAJoC,EAIpCA,IAAKue,EAJ+B,EAI/BA,eAJ+B,EAKlBzT,mBAAgBgb,GAAuB,CAC/D/a,UAAW,CACTiB,WAAYzM,OAAOwM,EAAYhR,gBAAiBuE,IAChDif,eAAgBA,KAHZrT,EALoC,EAKpCA,KAOFqa,GAZsC,EAK9Bpa,QAOKe,GAAe,sBAZU,EAaNkC,sBAAsB2X,IAArDG,EAbqC,cAcjB9X,sBAAsB4X,IAA1CG,EAdqC,YAgB5CtZ,aAAgB,WAAO,IAAD,MACpB,SAAI3B,GAAJ,SAAIA,EAAMmB,WAAV,SAAI,EAAgB+S,eAApB,SAAI,EAA8BgH,iBAA9B,EAA8C/gB,MAAK,SAACghB,GAAD,aAAgB,SAAAA,EAAWrmB,UAAX,IAAgBV,GAAGqO,cAAe3N,EAAIV,GAAGqO,cAAa,CAAC,IAAD,MACrH0Y,EAAU,MAAGnb,GAAH,SAAGA,EAAMmB,WAAT,SAAG,EAAgB+S,eAAnB,SAAG,EAA8BgH,qBAAjC,EAAG,EAA8CP,MAAK,SAACQ,GAAD,aAAgB,SAAAA,EAAWrmB,UAAX,IAAgBV,MAAOU,EAAIV,MACjHyD,QAAQC,IAAI,CAAEqjB,eACdthB,EACExC,GAAkB/D,YAChB6nB,OAIL,CAAClgB,KAAKC,UAAL,MAAe8E,GAAf,SAAeA,EAAMmB,WAArB,SAAe,EAAgB+S,mBAA/B,EAAe,EAA8BgH,kBAEjD,IAAME,EAAsBzZ,eAAkB,mCAAA8B,EAAAC,OAAA,4DAEtC2X,EAFsC,SAEpB/qB,EAAM4C,eAFc,EAEpB,EAAgBkB,GAFI,mCAAAqP,EAAA,MAInBuX,EAA4B,CAC/Cnb,UAAW,CAAEiB,WAAYzM,OAAOwM,EAAYhR,gBAAiBuE,IAAK0P,MAAOzP,OAAOS,EAAIV,QAL9C,OAIlC4P,EAJkC,OAQxCqX,EAAe,MAAGrX,GAAH,SAAGA,EAAQhE,OAAX,SAAG,EAAcob,0BAAjB,EAAG,EAAmCE,cAAelnB,GAR5B,0BAAAqP,EAAA,MAWpC8X,QAAQC,IACZlrB,EAAMqB,OAAOwC,KAAI,SAACvB,GAAD,OACfqoB,EAAiB,CACfpb,UAAW,CACTwb,gBAAiBhnB,OAAOgnB,GACxBI,gBAAiBpnB,OAAOzB,EAAMiD,cAAczB,IAC5CvC,MAAOe,EAAMf,cAjBqB,yDAsB1CgI,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAS,KAAMA,QAASC,QAAS,WAtB/B,mEAwB3C,CAACS,KAAKC,UAAU5K,EAAMqB,QAAtB,MAA+BrB,GAA/B,SAA+BA,EAAO4C,eAAtC,EAA+B,EAAiBkB,GAAhD,MAAoDyM,GAApD,SAAoDA,EAAahR,sBAAjE,EAAoD,EAA8BuE,KAErF,OACE,gBAACya,GAAD,KACE,gBAACnF,GAAA,EAAD,CAAMvM,MAAO,CAAE6I,MAAO,SACpB,gBAAC0D,GAAA,EAAKhF,MAAN,CAAYjG,MAAM,QAClB,gBAACiL,GAAA,EAAK/E,QAAN,KACE,gBAAC,KAAKrE,KAAN,CACE7B,MAAM,OACN8B,YAAazL,EAAIO,OAEnB,gBAAC,KAAKiL,KAAN,CACE7B,MAAM,QACN8B,YAAazL,EAAIQ,QAEnB,gBAAC,KAAKgL,KAAN,CACE7B,MAAM,SACN8B,YAAazL,EAAIS,SAEnB,gBAAC,KAAK+K,KAAN,CACE7B,MAAM,aACN8B,YACK,MAAHzL,KAAKU,gBAAkBmc,aAA6B,IAAtB7c,EAAIU,gBAAwB,cAAgB,QAMlF,gBAACkU,GAAA,EAAD,CAAMvM,MAAO,CAAE6I,MAAO,SACpB,gBAAC0D,GAAA,EAAKhF,MAAN,CAAYjG,MAAM,eAElB,gBAACiL,GAAA,EAAK/E,QAAN,KACE,gBAAC,GAAD,OAGF,gBAAC+E,GAAA,EAAK9E,QAAN,KACE,gBAACC,GAAA,EAAD,CAAQ+F,UAAWyP,EAAY9X,KAAK,YAAY5D,QAAS,kBAAMyc,KAAuBje,MAAO,CAAE6I,MAAO,SAAtG,wBC/LV,IAAMyT,GAAW5I,eAEF,SAAS6I,KAAe,IAAD,EACIxgB,IAAe,SAAA5I,GAAK,OAAIA,EAAMqI,eAA9D7F,EAD4B,EAC5BA,gBAAiBC,EADW,EACXA,WACnB8G,EAAWb,KAEjB,OACE,gBAAC,GAAS+X,UAAV,CACEC,cAAe,CACbC,aAAa,EACbC,OAAQ,SAAC1R,GAAD,OACN,gBAAC,GAAD,QACMA,EADN,CAEEzM,WAAYA,EACZmnB,cAAepnB,EACfG,iBAAkB,SAAC+J,GAAD,OAAanD,EAASzD,GAAanD,iBAAiB+J,KACtEid,SAAU,SAACve,GAAD,OAAU7B,EAASzD,GAAapD,cAAc0I,SAE5DyV,UAAW,CACT3U,KAAM,KAIV,gBAAC,GAAS4U,OAAV,CAAiBjhB,KAAK,cAAckhB,UAAWuI,GAAa9L,QAAS,CAAErP,MAAO,oBAC9E,gBAAC,GAAS2S,OAAV,CAAiBjhB,KAAK,oBAAoBkhB,UAAWzT,GAAekQ,QAAS,CAAErP,MAAO,UACtF,gBAAC,GAAS2S,OAAV,CAAiBjhB,KAAK,sBAAsBkhB,UAAW0J,GAAqBjN,QAAS,CAAErP,MAAO,iBCjBpG,IAAMid,GAAYC,eAEH,SAASC,KACtB,IAAM5rB,EAAQ6rB,eAERC,EAAe9a,GAAe,YAE9B+a,GADiB/a,GAAe,iBACZA,GAAe,mBAEzC,OACE,gBAAC0a,GAAU3K,UAAX,CACEiL,iBAAiB,WACjBC,cAAe,CACbC,gBAAiB,UACjBC,wBAAyBnsB,EAAMT,OAAOqB,QACtCwrB,sBAAuBpsB,EAAMT,OAAOqB,QACpCyrB,kBAAmB,UACnBC,WAAW,IAGb,gBAACZ,GAAUtK,OAAX,CACEjhB,KAAK,WACLkhB,UAAWP,GACXhD,QAAS,CACPyO,WAAY,cAAGC,QAAH,IAAYpd,EAAZ,EAAYA,MAAOuQ,EAAnB,EAAmBA,KAAnB,OAA8B,gBAACD,GAAA,EAAD,CAAwBvf,KAAK,WAAWiP,MAAOA,EAAOuQ,KAAMA,KACtG8M,eAAe,KAGnB,gBAACf,GAAUtK,OAAX,CACEjhB,KAAK,UACLkhB,UAAWkE,GACXzH,QAAS,CACPyO,WAAY,gBAAG5M,EAAH,EAAGA,KAAMvQ,EAAT,EAASA,MAAT,EAAgBod,QAAhB,OAA8B,gBAAC9M,GAAA,EAAD,CAA6BC,OAAMvQ,QAASjP,KAAK,oBAC3FssB,eAAe,MAGjB,EAUAX,GACA,gBAACJ,GAAUtK,OAAX,CACEjhB,KAAK,QACLkhB,UAAWqL,GACX5O,QAAS,CACPyO,WAAY,gBAAG5M,EAAH,EAAGA,KAAMvQ,EAAT,EAASA,MAAT,EAAgBod,QAAhB,OAA8B,gBAAC9M,GAAA,EAAD,CAA6BC,OAAMvQ,QAASjP,KAAK,mBAC3FssB,eAAe,KAKnBV,GACA,gBAACL,GAAUtK,OAAX,CACEjhB,KAAK,WACLkhB,UAAWqI,GACX5L,QAAS,CACPyO,WAAY,gBAAG5M,EAAH,EAAGA,KAAMvQ,EAAT,EAASA,MAAT,EAAgBod,QAAhB,OAA8B,gBAAC9M,GAAA,EAAD,CAA6BC,OAAMvQ,QAASjP,KAAK,qB,iBC1EjG2f,GAAkBxQ,aAAH,gdA4BN,SAASvB,KAAmB,IAAD,EAClClE,EAAWb,KADuB,EAEL4G,mBAAgBkQ,IAA3C9P,EAFgC,EAEhCA,KAAMC,EAF0B,EAE1BA,QAASC,EAFiB,EAEjBA,QACjB7B,EAAawJ,2BAGnB,OACE,gBAAC,GAAD,CAAM1K,MAAOoB,GAAOhC,WAClB,gBAACogB,GAAA,EAAD,CACE3c,MAAU,MAAJA,GAAA,SAAAA,EAAM2Q,gBAAN,IAAiBhK,QAAS,GAChCiF,WAAY,EAEZC,WAAY5L,EACZ6L,UAAW,kBAAM5L,KACjB/C,MAAO,CAAEX,KAAM,GACfmP,sBAAuB,CAAEjB,SAAU,GACnCkS,mBAAoB,kBAClB,gBAAC,GAAD,CAAMzf,MAAOoB,GAAOiH,OAClB,gBAACd,GAAA,EAAD,sBACA,gBAACe,GAAA,EAAD,8BAKJsG,WAAY,oBAAGnW,EAAH,EAAGA,KAAH,OACV,gBAAC8T,GAAA,EAAD,CACEvM,MAAO,CACL6I,MAAQwF,KAAWC,IAAI,UAAUzF,MAAQ,EAAK,GAC9CF,OAAQ,GAEVnH,QAAS,qBAAA8E,EAAAC,OAAA,gDACP,MAAI9N,KAAMiR,MACRhN,EACE9D,GAAchF,YAAY6E,EAAKiR,OAH5B,8DAQT,gBAAC6C,GAAA,EAAKgO,MAAN,CAAYC,OAAQ,CAAEre,IAAG,MAAE1D,GAAF,SAAEA,EAAMiR,WAAR,EAAE,EAAY1T,UACvC,gBAACuW,GAAA,EAAK/E,QAAN,KACE,gBAACD,GAAA,EAAD,WAAQ9O,GAAR,SAAQA,EAAMiR,WAAd,EAAQ,EAAY1W,WAM5B,gBAAC+b,GAAA,EAAD,CACE/O,MAAOoB,GAAOqH,IACduG,OAAK,EACL1K,KAAK,OACL9C,QAAS,kBAAMN,EAAW+N,SAAS,yBACnC5J,MAAM,qBAMd,I,GAAMjE,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNuC,QAAS,EACT4G,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRnD,MAAO,EACPoD,OAAQ,GAEVP,MAAO,CACLhJ,KAAM,EACNsC,WAAY,SACZrC,eAAgB,SAChBuJ,MAAO,OACPC,OAAQ,UC5FL,SAAS4W,GAAWtiB,GACzB,MAAO,CACLA,UACAuiB,QAAS,SAmBN,SAASC,GAAwBxiB,EAAiByiB,GACvD,MAAO,CACLziB,UACAyiB,YAIG,SAASC,GACdhV,EACA6F,GAcC,IACOC,EAAwCD,EAAxCC,WAAYmP,EAA4BpP,EAA5BoP,cAAeH,EAAajP,EAAbiP,UAEnC,OAAO,SAAwB/O,GAAgF,IACrGmP,EAAqCnP,EAArCmP,aAAc/Y,EAAuB4J,EAAvB5J,UAAWpK,EAAYgU,EAAZhU,QAD2E,EAGlEkJ,sBAAY+E,GAHsD,WAGrGmV,EAHqG,YAG3Fpd,EAH2F,EAG3FA,KAAMC,EAHqF,EAGrFA,QAHqF,EAG5EnO,MA0EhC,MAAO,CACLmO,UACAmd,OAzEe9Z,uBAAY,SAAOzD,GAAP,0BAAA4D,EAAAC,OAAA,8DAIzB,IAAIH,GAAY,EA4BhB,OA1BIwZ,GACFM,OAAOC,KAAKzd,GAAW0d,SAAQ,SAACC,GAC9B,IAE2C,EAFrCC,EAAWD,EAEbC,KAAa3P,EAAQiP,WAAa,MACpC,SAAAA,EAAUU,KAAV,EAAqBF,SAAQ,SAACG,GACxBA,EAAUZ,QACPY,EAAUZ,QAAQ5H,KAAlB,GAA0BrV,EAAU4d,MACvCla,GAAY,EAER4Z,GACFA,EAAaM,EAAoBC,EAAUnjB,UAGtCmjB,EAAUV,WAAaU,EAAUV,SAASnd,KACnD0D,GAAY,EACR4Z,GACFA,EAAaM,EAAoBC,EAAUnjB,kBAS/CgJ,EAGLF,GAnCsB,6EAAAI,EAAA,MAuCJ2Z,EAAO,CAC1Bvd,eAxCuB,UAuCnBmE,EAvCmB,OA6ClB,OAFDxT,EAAUud,EAAW/J,EAAOhE,QAElC,SAAAxP,EAAS0T,cAAT,EAAsB/P,KAAI,YAAyB,IAAtBvB,EAAqB,EAArBA,MAAO2H,EAAc,EAAdA,QAC5BojB,EAAY/qB,KAAUsqB,GAAiB,IAAMpP,EAASoP,cAAetqB,GAASA,EAEhFob,EAAKmP,cACPnP,EAAKmP,aAAL,GAAqBQ,EAAapjB,MAI3B,MAAP/J,GAAA,SAAAA,EAAS2T,UAAT,EAAiBvH,SAAU5C,EArDN,wBAsDvB,SAAAxJ,EAAQ2T,SAAR,EAAgBhQ,KAAI,SAACoG,GAAD,OAAaP,EAAQO,MAtDlB,kCAyDrB,MAAC/J,GAAD,SAACA,EAAS0T,cAAT,EAAsBtH,QACzBwH,EAAU5T,GA1Da,kBA6DlBA,GA7DkB,kCA+DrBwJ,GACFA,EAAQ,KAAMO,SAhES,qGAqE1B,CAAC4iB,EAAcnjB,EAASoK,EAAxB,CAAoCgZ,EAAQrP,EAAY9S,KAAKC,UAAU8E,OC5IvE,IAsBQid,MAtByB3d,aAAH,yVA2BT,CACxByO,WAAY,SAAC/J,GAAD,OAAYA,EAAO4Z,gBAC/BV,cAAe,CACb7qB,WAAY,gBAEd0qB,UAAW,CACT5sB,KAAM,CACJ0sB,GAAW,wBCvBX5mB,GAAYzE,EAAZyE,QACSF,GAAkBI,EAA3BF,QAKO,SAAS4nB,KACtB,IAAMvtB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAMgI,gBACtCuB,EAAWb,KAIX4kB,GAFa/V,2BAEIiW,GAA0B,CAC/C9jB,QAAS,SAAC+jB,GAAD,OAAelkB,EAASvD,GAAgB7E,aAAa,CAAE8I,QAASwjB,EAAGvjB,QAAS,YACrF2iB,aAAc,SAACvqB,EAAOd,GAAR,OACZ+H,EAAS5D,GAAQpD,cAAc,CAACD,EAAiBd,MACnDsS,UAAW,SAAC5T,GAAD,OAAaqJ,EAAS9D,GAAchF,YAAYP,EAAQ2Q,eAGrE,OACE,gBAAC0N,GAAD,CAAkBlD,sBAAuB,CAAE+B,kBAAmB,KAC1D,gBAAC,GAAD,MACA,gBAAC,GAAD,CAAMvQ,MAAOoB,GAAO5M,QAClB,gBAACkT,GAAA,EAAD,CACEtC,KAAK,YACLqI,SAAUgT,EAAe3d,QACzBA,QAAS2d,EAAe3d,QACxBtB,QAAS,kBACPif,EAAeR,OAAO,CACpBjtB,KAAMG,EAAMqB,OAAOxB,KAAK0B,MACxBsB,OAAQ7C,EAAMqB,OAAOwB,OAAOtB,MAC5B2iB,aAAcngB,OAAO/D,EAAMqB,OAAOU,WAAWR,MAAOuC,QAR1D,UAmBV,IAAMmK,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,UAEdL,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,QAETpT,MAAO,CACLmQ,aAAc,KCrEZib,GAAQnN,eAEC,SAAS/S,KACtB,OACE,gBAACkgB,GAAMjN,UAAP,CACEC,cAAe,CACbC,aAAa,EACbE,UAAW,CACT3U,KAAM,IAGVwf,iBAAiB,aAEjB,gBAACgC,GAAM5M,OAAP,CAAcjhB,KAAK,kBAAkBkhB,UAAWtT,KAChD,gBAACigB,GAAM5M,OAAP,CAAcjhB,KAAK,uBAAuBkhB,UAAWrT,M,gBCRnD/H,GAAYzE,EAAZyE,QAEFgoB,GAAkB3e,cAAH,wYAsBN,SAASpB,KACtB,IAAM5N,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM8H,SACtCyB,EAAWb,KACXqF,EAAawJ,2BAHiB,EAIN3E,sBAAsB+a,IAJhB,WAI7BC,EAJ6B,KAIdle,EAJc,KAM9Bme,EAAU7a,uBACd,uCAAAG,EAAAC,OAAA,mDACQsR,EAAa,IAAIC,OAAO,0JAC1B5F,GAAW,EAEV/e,EAAMqB,OAAOC,MAAMC,QACtBwd,GAAW,EACXxV,EACE5D,GAAQ/D,cAAc,uBAIrB5B,EAAMqB,OAAOI,SAASF,QACzBwd,GAAW,EACXxV,EACE5D,GAAQ9D,iBAAiB,0BAIxB6iB,EAAWE,KAAK5kB,EAAMqB,OAAOC,MAAMC,SACtCwd,GAAW,EACXxV,EACE5D,GAAQ/D,cAAc,gCAIrBmd,EAzBP,6CAAA5L,EAAA,MA2B2Bya,EAAc,CACjCre,UAAW,CACTjO,MAAOtB,EAAMqB,OAAOC,MAAMC,MAC1BE,SAAUzB,EAAMqB,OAAOI,SAASF,UA9B1C,OA2BYmS,EA3BZ,OAkCMnM,QAAQC,IAAI,CAAEkM,WAEJ,MAANA,GAAA,SAAAA,EAAQhE,OAAR,WAAcoe,YAAd,EAAyBC,iBAAzB,MAA4Cra,GAA5C,SAA4CA,EAAQhE,OAApD,SAA4C,EAAcoe,YAAd,EAAyBruB,cACvE8J,EACE9D,GAAc1F,eAAe2T,EAAOhE,KAAKoe,UAAUruB,cAErD8J,EACE9D,GAActF,QAAQuT,EAAOhE,KAAKoe,UAAUC,mBAzCtD,kDA6CMxkB,EAASvD,GAAgB7E,aAAa,CAAE8I,QAAS,KAAEA,QAASC,QAAS,WA7C3E,mEAiDA,CAAC0jB,EAAejjB,KAAKC,UAAU5K,EAAMqB,UAGvC,OACE,kBAAC,GAAD,CAAMwL,MAAOoB,GAAOhC,WAClB,kBAAC,GAAD,CAAMY,MAAOoB,GAAOE,OAApB,WAEA,kBAAC,GAAD,CAAMtB,MAAOoB,GAAO5M,QAClB,kBAAC2Q,GAAA,EAAD,CACEE,MAAM,QACND,KAAK,WACL1Q,MAAOvB,EAAMqB,OAAOC,MAAMC,MAC1BgR,aAAc,SAACC,GACbjJ,EAAS5D,GAAQjE,SAAS8Q,OAG9B,kBAAChB,GAAA,EAAD,CAAYC,KAAK,SACdzR,EAAMqB,OAAOC,MAAME,OAAS,KAG/B,kBAACwQ,GAAA,EAAD,CACEE,MAAM,WACND,KAAK,WACL1Q,MAAOvB,EAAMqB,OAAOI,SAASF,MAC7BysB,iBAAe,EACfzb,aAAc,SAACC,GACbjJ,EAAS5D,GAAQhE,YAAY6Q,KAE/BhR,QAASxB,EAAMqB,OAAOI,SAASD,QAEjC,kBAACgQ,GAAA,EAAD,CAAYC,KAAK,SACdzR,EAAMqB,OAAOI,SAASD,OAAS,KAElC,kBAAC+S,GAAA,EAAD,CAAQtC,KAAK,YAAYpF,MAAOoB,GAAOsR,OAAQlR,QAASwf,EAASle,QAASD,EAAKC,SAA/E,UAIA,kBAAC4E,GAAA,EAAD,CAAQ1H,MAAOoB,GAAOsR,OAAQlR,QAAS,kBAAMN,EAAW+N,SAAS,kBAAjE,aAQR,I,GJ7GwB7R,GI6GlBgE,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNoR,aAAc,IAEhB8M,OAAQ,CACN3Q,UAAW,GACX8G,MAAO,UCnHIiX,MAtCqB3d,aAAH,urBAuCT,CACpByO,WAAY,SAAC/J,GAAD,OAAYA,EAAOua,YAC/BrB,cAAe,CACbzqB,QAAS,aAEXsqB,UAAW,CACT5sB,KAAM,CACJ0sB,GAAW,qBAEbjrB,MAAO,ELxBW2I,GKyBR,6BLxBP,CACLA,WACAuiB,QAAS,IAAI7H,OAAO,6JKwBlB3iB,qBAAsB,CACpByqB,GACE,qFACA,SAACprB,GAAD,MAAY,mDAAmDujB,KAAKvjB,EAAOW,yBAE7EyqB,GACE,yBACA,SAACprB,GAAD,OAAYA,EAAOI,WAAaJ,EAAOW,4BClDzC2D,GAAYzE,EAAZyE,QACSF,GAAkBI,EAA3BF,QAGO,SAAS4nB,KAAgB,IAAD,IAC/BvtB,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM+H,UACtCwB,EAAWb,KAFoB,EAICwlB,GAAkB,CACtDpa,UAAW,SAAC5T,GACNA,EAAQT,cACV8J,EACE9D,GAAc1F,eAAeG,EAAQT,cAEvC8J,EACE9D,GAActF,QAAQD,EAAQ6tB,oBAIpClB,aAAc,SAACvqB,EAAOf,GAAR,OACZgI,EACE5D,GAAQpD,cAAc,CAACD,EAAcf,QAbnCoO,EAJ6B,EAI7BA,QAAiBwe,EAJY,EAIpBrB,OAmBjB,OACE,gBAACvO,GAAD,CAAkB1R,MAAOoB,GAAOhC,WAC9B,gBAAC,GAAD,CAAMY,MAAOoB,GAAOE,OAApB,WACA,gBAAC,GAAD,CAAMtB,MAAOoB,GAAO5M,QAClB,gBAAC2Q,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,OACN1Q,QAASxB,EAAMqB,OAAOxB,KAAK2B,MAC3BD,MAAOvB,EAAMqB,OAAOxB,KAAK0B,MACzBgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,OAAQmQ,QAEjE,gBAAChB,GAAA,EAAD,CAAYC,KAAK,SACbzR,EAAMqB,OAAOxB,KAAK2B,OAAS,IAG/B,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,cACN1Q,QAASxB,EAAMqB,OAAOY,WAAWT,MACjCD,OAAO,SAAAvB,EAAMqB,OAAOY,aAAb,WAAyBV,YAAzB,IAAgC4Q,aAAc,GACrDC,aAAa,0BACbC,MAAO,kBAAM,gBAACL,GAAA,EAAUM,MAAX,CAAiBlH,KAAK,QACnCmH,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,aAAcyiB,WAAWtS,SAGlF,gBAAChB,GAAA,EAAD,CAAYC,KAAQzR,EAAMqB,OAAOY,WAAWT,MAAQ,QAAU,QAC1DxB,EAAMqB,OAAOY,WAAWT,OAAS,IAGrC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAOC,MAAME,MAC5BD,MAAOvB,EAAMqB,OAAOC,MAAMC,MAC1BgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,QAASmQ,QAGlE,gBAAChB,GAAA,EAAD,CAAYC,KAAK,SACbzR,EAAMqB,OAAOC,MAAME,OAAS,IAGhC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,QACN1Q,QAASxB,EAAMqB,OAAOa,MAAMV,MAC5BD,MAAOvB,EAAMqB,OAAOa,MAAMX,MAC1BgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,QAASmQ,QAElE,gBAAChB,GAAA,EAAD,CAAYC,KAAK,SACbzR,EAAMqB,OAAOa,MAAMV,OAAS,IAGhC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,WACN1Q,MAAO+Y,QAAQva,EAAMqB,OAAOI,SAASD,OAASxB,EAAMqB,OAAOW,qBAAqBR,OAChF4sB,gBAAgB,cAChBJ,iBAAe,EACfK,cAAc,mEACd9sB,MAAOvB,EAAMqB,OAAOI,SAASF,MAC7BgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,WAAYmQ,QAGrE,gBAAChB,GAAA,EAAD,CAAYC,KAAK,SACbzR,EAAMqB,OAAOI,SAASD,OAAS,IAGnC,gBAACwQ,GAAA,EAAD,CACEnF,MAAOoB,GAAO3L,MACd2P,KAAK,WACLC,MAAM,kBACN1Q,MAAO+Y,QAAQva,EAAMqB,OAAOI,SAASD,OAASxB,EAAMqB,OAAOW,qBAAqBR,OAChF4sB,gBAAgB,cAChBJ,iBAAe,EACfK,cAAc,mEACd9sB,MAAOvB,EAAMqB,OAAOW,qBAAqBT,MACzCgR,aAAc,SAACC,GAAD,OAAcjJ,EAAS5D,GAAQtD,SAAS,CAAC,uBAAwBmQ,QAEjF,gBAAChB,GAAA,EAAD,CAAYC,KAAK,SACbzR,EAAMqB,OAAOW,qBAAqBR,OAAS,IAG/C,gBAAC+S,GAAA,EAAD,CACEtC,KAAK,YACL5D,QAAS,0BACP8f,EAAS,CACP7sB,MAAOtB,EAAMqB,OAAOC,MAAMC,MAC1B1B,KAAMG,EAAMqB,OAAOxB,KAAK0B,MACxBU,WAAYjC,EAAMqB,OAAOY,WAAWV,MACpCE,SAAUzB,EAAMqB,OAAOI,SAASF,MAChCS,qBAAsBhC,EAAMqB,OAAOW,qBAAqBT,MACxDsjB,UAAW9gB,OAAM,SAAC/D,EAAMqB,OAAOc,UAAd,SAAC,EAAsBZ,YAAvB,EAAC,EAA6BuC,KAAO,KACtD5B,MAAOlC,EAAMqB,OAAOa,MAAMX,SAG9BoO,QAASA,GAbX,aAsBR,IAAM1B,GAASlC,KAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNsC,WAAY,SACZrC,eAAgB,UAElBgC,MAAO,CACLO,SAAU,GACVC,WAAY,QAEdoH,UAAW,CACTC,eAAgB,GAChBL,OAAQ,EACRD,MAAO,OAETrU,OAAQ,CACNqU,MAAO,OAETpT,MAAO,CACLmQ,aAAc,KC/JZib,GAAQnN,eAEC,SAAS5S,KACtB,OACE,gBAAC,GAAM8S,UAAP,CACEC,cAAe,CACbC,aAAa,EACbE,UAAW,CACT3U,KAAM,IAGVwf,iBAAiB,eAEjB,gBAAC,GAAM5K,OAAP,CAAcjhB,KAAK,cAAckhB,UAAWnT,KAC5C,gBAAC,GAAMkT,OAAP,CAAcjhB,KAAK,eAAekhB,UAAWlT,MCJnD,IAAM6f,GAAQnN,eAEC,SAAS+N,KACtB,IAAM/d,EAAc3H,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAGlD,OACE,gBAAC,GAAM6Y,UAAP,CACEC,cAAe,CACbC,aAAa,EACbE,UAAW,CACT3U,KAAM,KAKRqE,EAAY9Q,YAER8Q,EAAYhR,gBACR,gBAAC,GAAMuhB,OAAP,CAAcjhB,KAAK,gBAAgBkhB,UAAWwN,KAC9C,gBAAC,GAAMzN,OAAP,CAAcjhB,KAAK,YAAYkhB,UAAWyN,KAE9C,gBAAC,GAAM1N,OAAP,CAAcjhB,KAAK,kBAAkBkhB,UAAW0N,KAGtD,gBAAC,GAAM3N,OAAP,CAAcjhB,KAAK,WAAWkhB,UAAWjT,GAAgB0P,QAAS,CAAErP,MAAO,YCvBjF,SAASkG,KACP,IAAMrU,EAAQ4I,IAAe,SAAA5I,GAAK,OAAIA,EAAM4H,UAC5C,OACE,kBAACyB,GAAD,KACE,kBAAC,IAAD,CAAkB3J,MAAOM,EAAMN,OAC7B,kBAAC,IAAD,KACE,kBAACgvB,EAAA,EAAD,CACEC,QAASC,GACTlvB,MAAOM,EAAMN,OACb,kBAAC4uB,GAAD,OAGF,kBAACO,EAAA,EAAD,MACA,kBAACC,GAAD,SAMK,SAASC,KAItB,OCvCa,WAA+B,IAAD,EACK1d,YAAe,GADpB,WACpC2d,EADoC,KACjBC,EADiB,KA0B3C,OAtBA5d,aAAgB,WACd,GAAA8B,EAAAC,OAAA,gEAEI8b,OAFJ,YAAA/b,EAAA,MAKUgc,KAAA,SACDC,KAASC,MADR,IAEJ,aAAcC,EAAQ,SAP5B,sDAWI/nB,QAAQgoB,KAAR,MAXJ,uBAaIN,GAAmB,GACnBC,OAdJ,mFAmBC,IAEIF,EDUmBQ,GAOtB,kBAAC,IAAD,CAAUlnB,MAAOA,IACb,kBAAC,IAAD,CACEE,UAAWA,GACXmH,QACE,kBAAC3B,EAAA,EAAD,CAAMnB,MAAO,CAAEX,KAAM,EAAGC,eAAgB,SAAUqC,WAAY,WAC5D,kBAACihB,EAAA,EAAD,CAAmBpQ,KAAK,YAG5B,kBAAChL,GAAD,QAXD,O,0DE7CXqb,EAAOC,QAAU,IAA0B,iC","file":"static/js/app.1dd7fd4f.chunk.js","sourcesContent":["import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n\ninterface IGlobalState {\n  currentUser: User | null;\n  credentials: Credential | null;\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nconst initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  permissions: [],\n  credentials: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone>) => {\n      state.currentDropzone = action.payload;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport default createSlice({\n  name: 'notifications',\n  initialState: {\n    queue: []\n  } as INotificationState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nconst initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'usersScreen',\n  initialState,\n  reducers: {\n    \n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<Dropzone>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nconst initialState: IPlaneEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IPlaneEditState, action: PayloadAction<Plane>) => {\n      state.original = action.payload;\n      state.fields.hours.value = action.payload.hours!;\n      state.fields.minSlots.value = action.payload.minSlots!;\n      state.fields.maxSlots.value = action.payload.maxSlots!;\n      state.fields.name.value = action.payload.name!;\n      state.fields.registration.value = action.payload.registration!;\n      state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nconst initialState: ITicketTypeEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'ticketTypeForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ITicketTypeEditState, action: PayloadAction<TicketType>) => {\n      state.original = action.payload;\n      state.fields.altitude.value = action.payload.altitude!;\n      state.fields.cost.value = action.payload.cost!;\n      state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nconst initialState: IExtraEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'ExtraForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IExtraEditState, action: PayloadAction<Extra>) => {\n      state.original = action.payload;\n      state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n      state.fields.cost.value = action.payload.cost;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ILoadEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'loadForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ILoadEditState, action: PayloadAction<Load>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"user\"\n  | \"exitWeight\"\n  | \"extras\"\n>;\n\ninterface ISlotEditState {\n  original: Slot | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Slot[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    user: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<Slot>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IUserEditState = {\n  original: null,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'userForm',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IUserEditState, action: PayloadAction<User>) => {\n      state.original = action.payload;\n      state.federation.value = action.payload.license?.federation!;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"credits\"\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneUserEditState = {\n  original: null,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    credits: {\n      value: 0,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'dropzoneUserForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IDropzoneUserEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IRigEditState = {\n  original: null,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'rigForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IRigEditState, action: PayloadAction<Rig>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, ChecklistValue } from \"../../../graphql/schema\";\n\ntype FieldItem = Pick<ChecklistValue, \"checklistItem\" | \"value\"> & { id?: string | null}\n\n\ninterface IRigInspectionEditState {\n  original: RigInspection | null;\n  fields: FieldItem[],\n}\n\nconst initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'rigInspectionForm',\n  initialState,\n  reducers: {\n    setItem: (state: IRigInspectionEditState, action: PayloadAction<FieldItem>) => {\n      state.fields = [\n        ...state.fields.filter((item) => item.checklistItem.id !== action.payload.checklistItem.id),\n        action.payload\n      ]\n    },\n\n    setOriginal: (state: IRigInspectionEditState, action: PayloadAction<RigInspection>) => {\n      state.original = action.payload;\n      state.fields = action.payload.checklistValues;\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport MMKV from \"react-native-mmkv-storage\";\nimport { persistStore, persistCombineReducers } from \"redux-persist\";\nimport storage from 'redux-persist/lib/storage';\n\nimport globalSlice from \"./global\";\nimport { Platform } from \"react-native\";\nimport notificationSlice from \"../components/notifications/slice\";\n\nimport loginSlice from \"../screens/unauthenticated/login/slice\";\nimport signUpSlice from \"../screens/unauthenticated/signup/slice\";\nimport usersSlice from \"../screens/authenticated/users/slice\";\nimport dropzoneFormSlice from \"../components/forms/dropzone/slice\";\nimport planeFormSlice from \"../components/forms/plane/slice\";\nimport ticketTypeFormSlice from \"../components/forms/ticket_type/slice\";\nimport extraFormSlice from \"../components/forms/extra/slice\";\nimport loadFormSlice from \"../components/forms/load/slice\";\nimport slotFormSlice from \"../components/forms/slot/slice\";\nimport userFormSlice from \"../components/forms/user/slice\";\nimport dropzoneUserFormSlice from \"../components/forms/dropzone_user/slice\";\nimport rigFormSlice from \"../components/forms/rig/slice\";\nimport rigInspectionFormSlice from \"../components/forms/rig_inspection/slice\";\n\n// Re-export actions:\nexport const { actions: loginActions } = loginSlice;\nexport const { actions: signUpActions } = signUpSlice;\nexport const { actions: globalActions } = globalSlice;\nexport const { actions: usersActions } = usersSlice;\nexport const { actions: snackbarActions } = notificationSlice;\nexport const { actions: planeForm } = planeFormSlice;\nexport const { actions: dropzoneForm } = dropzoneFormSlice;\nexport const { actions: ticketTypeForm } = ticketTypeFormSlice;\nexport const { actions: extraForm } = extraFormSlice;\nexport const { actions: loadForm } = loadFormSlice;\nexport const { actions: slotForm } = slotFormSlice;\nexport const { actions: userForm } = userFormSlice;\nexport const { actions: dropzoneUserForm } = dropzoneUserFormSlice;\nexport const { actions: rigForm } = rigFormSlice;\nexport const { actions: rigInspectionForm } = rigInspectionFormSlice;\n\nconst persistConfig = {\n  key: 'root',\n  storage: Platform.OS === \"web\" ? storage : MMKV(),\n  whitelist: [\"global\", \"notifications\"],\n};\n\nconsole.log({ localStorage, MMKV });\n\nconst reducer = persistCombineReducers(persistConfig, {\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    login: loginSlice.reducer,\n    signup: signUpSlice.reducer,\n    dropzoneForm: dropzoneFormSlice.reducer,\n    planeForm: planeFormSlice.reducer,\n    ticketTypeForm: ticketTypeFormSlice.reducer,\n    extraForm: extraFormSlice.reducer,\n    loadForm: loadFormSlice.reducer,\n    slotForm: slotFormSlice.reducer,\n    userForm: userFormSlice.reducer,\n    dropzoneUserForm: dropzoneUserFormSlice.reducer,\n    rigForm: rigFormSlice.reducer,\n    rigInspectionForm: rigInspectionFormSlice.reducer,\n    usersScreen: usersSlice.reducer,\n  });\n\nexport const store = configureStore({\n  reducer\n});\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport React, { useCallback, useMemo } from 'react';\nimport Constants from \"expo-constants\";\nimport { globalActions, snackbarActions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `Session expires`, variant: \"error\" })\n        )\n        dispatch(\n          globalActions.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          dispatch(\n            snackbarActions.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n          )\n        );\n      if (networkError) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\nconst successColor = \"#00C851\";\nconst errorColor = \"#ff4444\";\nconst warningColor = \"#FF8800\";\nconst infoColor = \"#0099CC\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default MyComponent;","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"dz://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { JumpType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nconst QUERY_JUMP_TYPES = gql`\n  query JumpTypes($allowedForUserId: Int) {\n    jumpTypes(allowedForUserId: $allowedForUserId) {\n      id\n      name\n    }\n  }\n`;\n\nexport default function JumpTypeSelect(props: IJumpTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_JUMP_TYPES, {\n    variables: {\n      allowedForUserId: props.userId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      Jump type\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select jump type\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.jumpTypes?.map((jumpType) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(jumpType);\n            }}\n            title={\n              jumpType.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { TicketType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  allowManifestingSelf?: boolean | null;\n  onSelect(jt: TicketType): void;\n}\n\nconst QUERY_TICKET_TYPES = gql`\n  query TicketTypes($allowManifestingSelf: Boolean, $dropzoneId: Int!) {\n    ticketTypes(allowManifestingSelf: $allowManifestingSelf, dropzoneId: $dropzoneId) {\n      id\n      name\n\n      extras {\n        id\n        name\n        cost\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeSelect(props: ITicketTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      allowManifestingSelf: props.allowManifestingSelf,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.name || \"Please select ticket type\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.ticketTypes?.map((ticketType) => \n            <List.Item\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(ticketType);\n              }}\n              title={\n                ticketType.name || \"-\"\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useAppSelector } from \"../redux\";\n\nconst QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: string): boolean {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  return data?.dropzone?.currentUser?.permissions?.includes(permission as any) || false;\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Rig, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryRigs(\n    $dropzoneId: Int\n    $userId: Int\n  ) {\n    rigs(dropzoneId: $dropzoneId, userId: $userId) {\n      id\n      make\n      model\n      canopySize\n      serial\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_RIGS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.rigs?.map((rig) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            title={\n              `${props.value?.make} ${props.value?.model}`\n            }\n            description={\n              `${props.value?.canopySize} sqft`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport JumpTypeSelect from '../../JumpTypeSelect';\nimport TicketTypeSelect from '../../TicketTypeSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../RigSelect';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.slotForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.fields.user?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", Number(state.fields.user.value.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.user.value.rigs?.length) {\n        dispatch(\n          actions.setField([\"rig\", state.fields.user.value.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.user?.value?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.fields?.user?.value?.id === globalState.currentUser?.id;\n\n  \n  const allowedToManifestSelf = useRestriction(\n    isEdit ? \"updateSlot\" : \"createSlot\"\n  );\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? \"updateUserSlot\" : \"createUserSlot\"\n  )\n  console.log(\"Fields\", state.fields);\n\n  return ( \n    <> \n      <JumpTypeSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.user?.value?.id) || null}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeSelect\n        value={state.fields.ticketType.value}\n        required\n        allowManifestingSelf={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        state?.fields?.ticketType?.value?.extras?.length && (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      <RigSelect\n        value={state.fields.rig.value}\n        userId={Number(state.fields.user?.value?.id)}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { slotForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport SlotForm from \"../forms/slot/SlotForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $userId: Int\n    $exitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          userId: $userId\n          exitWeight: $exitWeight\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            ticketType {\n              id\n              name\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.slotForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          userId: Number(state.fields.user?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(slotForm.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(slotForm.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(slotForm.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(slotForm.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(slotForm.setFieldError([\"rig\", message]));\n          case \"user\":\n            return dispatch(slotForm.setFieldError([\"user\", message]));\n          case \"exit_weight\":\n            return dispatch(slotForm.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.user?.value?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <SlotForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(slotForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { Slot, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  slots: Slot[];\n  onSelect(user: User): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"parachute\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.user as User);\n            }}\n            title={\n              slot?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane-takeoff\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneChipSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport { useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Badge, Button, Card, DataTable, List, Menu, Paragraph, ProgressBar } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport GCAChip from '../../../components/GcaChip';\nimport LoadMasterChip from '../../../components/LoadMasterChip';\nimport PilotChip from '../../../components/PilotChip';\nimport PlaneChip from '../../../components/PlaneChip';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Plane, Slot } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { useAppSelector } from '../../../redux';\n\ninterface ILoadCard {\n  load: Load;\n  loadNumber: number;\n  canManifest: boolean;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nconst QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        user {\n          id\n          name\n        }\n        ticketType {\n          id\n          name\n          altitude\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const navigation = useNavigation();\n  const { load, loadNumber, onManifest, canManifest } = props;\n  const { data, loading } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const updatePilot = React.useCallback(async (pilot: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const canUpdateLoad = useRestriction(\"updateLoad\");\n  const canEditSelf = useRestriction(\"updateSlot\");\n  const canEditOthers = useRestriction(\"updateUserSlot\");\n\n  const getSlotPressAction = React.useCallback((slot: Slot) => {\n\n    if (slot?.user?.id !== state.currentUser?.id && !canEditOthers) {\n      return;\n    }\n    return () => {\n      if (slot.user?.id === state.currentUser?.id) {\n        if (canEditSelf) {\n          props.onSlotPress(slot);\n        }\n      } else if (canEditOthers) {\n        props.onSlotPress(slot);\n      }\n    }\n  }, [JSON.stringify(load), canEditOthers, props.onSlotPress]);\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  \n\n  return (\n  <Card style={{ margin: 16 }} elevation={3}>\n    <Card.Title\n      title={`Load ${data?.load?.loadNumber}`}\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal>\n          <PlaneChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.plane}\n            onSelect={updatePlane}\n          />\n          <GCAChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.gca?.user}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.pilot?.user}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.loadMaster?.user}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Exit weight</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              \n              return (\n                <DataTable.Row onPress={getSlotPressAction(slot)} pointerEvents=\"none\">\n                  <DataTable.Cell>{slot?.user?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.exitWeight}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.jumpType?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.ticketType?.altitude}</DataTable.Cell>\n                </DataTable.Row>\n              )\n            })\n          }\n          {\n            Array.from({length: (load?.maxSlots || 0) - (load?.slots?.length || 0)}, (v, i) => i).map(() =>\n              <DataTable.Row>\n                <DataTable.Cell>- Available -</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"#FF8800\", padding: 8 }}>\n          <Paragraph>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)}>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)}>\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button mode=\"outlined\" onPress={() => setDispatchOpen(true)}>\n                    Dispatch\n                  </Button>\n                }\n              >\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button style={{ marginLeft: 8 }} mode=\"contained\" onPress={() => onLanded()}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => onManifest()}\n                disabled={!canManifest || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport { startOfDay } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserDialog from '../../../components/dialogs/ManifestUserDialog';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { globalActions, slotForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\n\nconst QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"no-cache\"\n  });\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!data?.dropzone?.planes?.length;\n  const hasTicketTypes = !!data?.dropzone?.ticketTypes?.length;\n  const isPublic = !!data?.dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(globalActions.setDropzone(data.dropzone));\n    \n      dispatch(\n        globalActions.setUser({\n          ...state?.currentUser,\n          ...(data?.dropzone?.currentUser.user || {})\n        })\n      );\n    }\n  }, [JSON.stringify(data?.dropzone)]);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.primaryColor && data?.dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.primaryColor));\n    }\n\n    if (data?.dropzone?.secondaryColor && data?.dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.secondaryColor));\n    }\n  }, [\n    data?.dropzone?.primaryColor,\n    data?.dropzone?.secondaryColor\n  ])\n\n  const allowed = useRestriction(\"createSlot\");\n  const canCreateLoad = useRestriction(\"createLoad\");\n\n  return (\n    <>\n    \n    <ManifestUserDialog\n      open={isDialogOpen}\n      onClose={() => setDialogOpen(false)}\n      onSuccess={() => setDialogOpen(false)}\n    />\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (data?.dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={1}\n                        data={data?.dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              canManifest={allowed && edge?.node?.isOpen && !edge?.node?.isFull}\n                              loadNumber={(data?.dropzone?.loads?.edges?.length || 0) - index}\n                              onSlotPress={(slot) => {\n                                dispatch(slotForm.setOriginal(slot));\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                              onManifest={() => {\n                                dispatch(\n                                  slotForm.setField([\"user\", state.currentUser])\n                                );\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => navigation.navigate(\"CreateLoadScreen\")}\n            label=\"New load\"\n          />\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function LoadScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/LoadScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Plane, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  required?: boolean;\n  onSelect(plane: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneSelect(props: IPlaneSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"No plane selected\"\n          }\n          description={!props.required ? \"Optional\" : null}\n          right={() => <List.Icon icon=\"airplane\" />}\n        />\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane);\n            }}\n            title={\n              plane.name || \"-\"\n            }\n            description={\n              plane.registration\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { FieldError, Query } from \"../graphql/schema\";\nimport { snackbarActions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends {}, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            snackbarActions.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        onError!(error.message);\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import React, { useState } from \"react\";\nimport { List, Menu, Title } from \"react-native-paper\";\nimport useQueryDropzoneUsers from \"../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IDropzoneUserSelect {\n  dropzoneId: number;\n  requiredPermissions: string[];\n  value: DropzoneUser | null;\n  required?: boolean;\n  label: string;\n  onSelect(dzUser: DropzoneUser): void;\n}\n\n\n\n\nexport default function DropzoneUserSelect(props: IDropzoneUserSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: props.requiredPermissions\n    }\n  });\n\n  return (\n    <>\n      <Title>{props.label}</Title>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.user?.id ? props.value?.user.name : \"No user selected\"\n            }\n            style={{ width: \"100%\" }}\n            right={() => <List.Icon icon=\"account\" />}\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.edges?.map((edge) => \n            <List.Item\n              style={{ width: \"100%\" }}\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(edge?.node as DropzoneUser);\n              }}\n              title={\n                edge?.node?.user?.name || \"-\"\n              }\n              description={\n                edge?.node?.role?.name || null\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport PlaneSelect from '../../PlaneSelect';\nimport DropzoneUserSelect from '../../DropzoneUserSelect';\n\nconst { actions } = slice;\n\n\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.loadForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.setField([\"plane\", value]));\n            dispatch(actions.setField([\"maxSlots\", value.maxSlots]));\n          }}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <DropzoneUserSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.setField([\"gca\", dzUser]))}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.setField([\"pilot\", dzUser]))}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\nimport { useNavigation } from '@react-navigation/core';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/load/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport LoadForm from '../../../components/forms/load/LoadForm';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function CreateLoadScreen() {\n  const { loadForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateLoad, data] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(plane.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane-takeoff\" size={100} color=\"#999999\" style={{ alignSelf: \"center\", marginTop: 32 }} />\n        <LoadForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" style={styles.button} disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  button: {\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useState } from \"react\";\nimport { Appbar, Menu, Paragraph, Text, Button } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Dropzone, Query } from \"../graphql/schema\";\nimport { globalActions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { View, StyleSheet } from \"react-native\";\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzonesCompact {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\ninterface IAppBar extends StackHeaderProps {\n  searchEnabled: boolean;\n  searchVisible: boolean;\n  setSearchVisible(visible: boolean): void;\n}\n\n\nfunction AppBar({ navigation, previous, scene }: StackHeaderProps) {\n  const [dropzoneMenuOpen, setDropzoneMenuOpen] = useState(false);\n  const { data } = useQuery<Query>(QUERY_DROPZONES);\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  const hasRig = !!currentDropzone?.currentUser?.user?.rigs?.length;\n  const hasExitWeight = !!currentDropzone?.currentUser?.user?.exitWeight;\n\n  const showSetupWarning = !hasRig || !hasExitWeight;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} />\n      <Menu\n        onDismiss={() => setDropzoneMenuOpen(false)}\n        visible={dropzoneMenuOpen}\n        anchor={\n          <Text\n            onPress={() => setDropzoneMenuOpen(true)}\n            style={{ color: \"white\", marginRight: 8 }}\n          >\n            {currentDropzone?.name}\n          </Text>\n      }>\n        {\n          data?.dropzones?.edges?.map((edge) =>\n            <Menu.Item\n              title={edge?.node?.name}\n              onPress={() => {\n                dispatch(globalActions.setDropzone(edge?.node as Dropzone));\n                setDropzoneMenuOpen(false);\n              }}\n            />\n          )\n        }\n      </Menu>\n    </Appbar.Header>\n    { showSetupWarning && (\n      <View style={styles.warning}>\n        <Paragraph>\n          You need to complete your profile\n        </Paragraph>\n        <Button color=\"black\" mode=\"outlined\" onPress={() => navigation.navigate(\"Profile\")}>\n          Take me there\n        </Button>\n      </View>\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { useAppSelector } from '../../redux';\n\nimport ManifestScreen from '../../screens/authenticated/manifest/ManifestScreen';\nimport LoadScreen from '../../screens/authenticated/load/LoadScreen';\nimport CreateLoadScreen from '../../screens/authenticated/load/CreateLoadScreen';\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  LoadScreen: undefined;\n  CreateLoadScreen: undefined;\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Loads\" }}/>\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function PackingScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/PackingScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport PackingScreen from '../../screens/authenticated/packing/PackingScreen';\n\nexport type IPackingTabParams = {\n  PackingScreen: undefined;\n}\n\nconst Packing = createStackNavigator<IPackingTabParams>();\n\nexport default function PackingTab() {\n  return (\n    <Packing.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Packing.Screen name=\"PackingScreen\" component={PackingScreen} />\n    </Packing.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function RigForm() {\n  const state = useAppSelector(state => state.rigForm);\n  const dispatch = useAppDispatch();\n  const [isDatePickerOpen, setDatePickerOpen] = React.useState(false);\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport { result } from \"lodash\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { rigForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.rigForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"repackExpiresAt\", \"Required\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(rigForm.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(rigForm.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(rigForm.setFieldError([\"serial\", message]));\n          case \"canopySize\":\n            return dispatch(rigForm.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(rigForm.setFieldError([\"repackExpiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading || updateData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <RigForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(rigForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Query, UserRole } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport RoleSelect from '../../RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function DropzoneUserForm() {\n  const { dropzoneUserForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermission\");\n\n  return ( \n    <>\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Credits\"\n        error={!!state.fields.credits.error}\n        value={state.fields.credits.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"credits\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.credits.error ? \"error\" : \"info\"}>\n        { state.fields.credits.error || `Current balance: $${state.original?.credits || 0}` }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { dropzoneUserForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $credits: Float,\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          credits: $credits,\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.dropzoneUserForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.credits.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"credits\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          credits: state.fields.credits.value,\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(dropzoneUserForm.setFieldError([\"role\", message]));\n          case \"credits\":\n            return dispatch(dropzoneUserForm.setFieldError([\"credits\", message]));\n          case \"expires_at\":\n            return dispatch(dropzoneUserForm.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} dropzone user`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(dropzoneUserForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, FAB, List, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport RigDialog from '../../../components/dialogs/RigDialog';\nimport { dropzoneUserForm, globalActions, rigForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Query } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\nimport useRestriction from '../../../hooks/useRestriction';\n\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const [rigDialogOpen, setRigDialogOpen] = React.useState(false);\n  const [dropzoneUserDialogOpen, setDropzoneUserDialogOpen] = React.useState(false);\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = state.currentDropzone?.currentUser?.id === route.params.userId;\n\n  const canInspectRigs = useRestriction(\"actAsRigInspector\");\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      dropzoneUserId: Number(route.params.userId)\n    }\n  });\n\n  const getRigPressAction = React.useCallback((rig) => {\n    return () => {\n      if (!isSelf) {\n        dispatch(rigForm.setOriginal(rig));\n        setRigDialogOpen(true);\n      } else if (canInspectRigs) {\n        navigation.navigate(\"RigInspectionScreen\", {\n          dropzoneUserId: Number(route.params.userId),\n          rig\n        });\n      }\n    }\n  }, [dispatch, setRigDialogOpen]);\n\n  return (\n    <>\n    <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      \n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Basic information\" />\n          <Card.Content>\n            <List.Item\n              title=\"Name\"\n              left={() => <List.Icon icon=\"account-outline\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.name  || \"-\"}\n            />\n            <List.Item\n              title=\"Email\"\n              left={() => <List.Icon icon=\"at\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.email  || \"-\"}\n            />\n\n            <List.Item\n              title=\"Phone\"\n              left={() => <List.Icon icon=\"phone\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.phone  || \"-\"}\n            />\n\n            <List.Item\n              title=\"License\"\n              left={() => <List.Icon icon=\"ticket-account\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.license?.name || \"-\"}\n            />\n\n            <List.Item\n              title=\"Exit weight\"\n              left={() => <List.Icon icon=\"scale\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.exitWeight  || \"-\"}\n            />\n          </Card.Content>\n          {\n            isSelf && (\n              <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n                <Button\n                  icon=\"pencil\"\n                  onPress={() =>\n                    navigation.navigate(\"UpdateUserScreen\", { user: state.currentDropzone?.currentUser?.user })\n                  }\n                >\n                  Edit\n                </Button>\n              </Card.Actions>\n            )}\n        </Card>\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title={state.currentDropzone?.name} />\n          <Card.Content>\n            <List.Item\n              title=\"Role\"\n              description={data?.dropzone?.dropzoneUser?.role?.name}\n              left={() => <List.Icon icon=\"lock\" />}\n            />\n            <List.Item\n              title=\"Credits\"\n              description={data?.dropzone?.dropzoneUser?.credits}\n              left={() => <List.Icon icon=\"cash-multiple\" />}\n            />\n            <List.Item\n              title=\"Membership\"\n              description={\n                !data?.dropzone?.dropzoneUser?.expiresAt ?\n                  <span>Not a member</span>\n                : format((data?.dropzone?.dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")\n              }\n              left={() =>\n                <List.Icon\n                  icon=\"card-account-details\"\n                  color={\n                    data?.dropzone?.dropzoneUser?.expiresAt && (\n                      data?.dropzone?.dropzoneUser?.expiresAt * 1000 > new Date().getTime()\n                    ) ? undefined : \"#B00020\"}\n                />\n              }\n\n            />\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n            <Button\n              icon=\"pencil\"\n              onPress={() => {\n                dispatch(dropzoneUserForm.setOriginal(data?.dropzone?.dropzoneUser!));\n                setDropzoneUserDialogOpen(true);\n              }}\n            >\n              Edit\n            </Button>\n          </Card.Actions>\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Rigs\" />\n          <Card.Content>\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>\n                  Container\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Repack due\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Canopy size\n                </DataTable.Title>\n              </DataTable.Header>\n\n              {\n                data?.dropzone?.dropzoneUser?.user?.rigs?.map((rig) =>\n                  <DataTable.Row onPress={getRigPressAction(rig)} pointerEvents=\"none\">\n                    <DataTable.Cell>\n                      {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {`${rig?.canopySize}`}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                )\n              }\n            </DataTable>\n          </Card.Content>\n          {\n            isSelf && (\n            <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n              <Button onPress={() => setRigDialogOpen(true)}>\n                Add rig\n              </Button>\n            </Card.Actions>\n          )}\n        </Card>\n\n        { data?.dropzone?.dropzoneUser?.id === state.currentUser?.id && (\n          <Button color=\"#B00020\" onPress={() => dispatch(globalActions.logout())}>\n            Log out\n          </Button>\n        )}\n      \n      </ScrollableScreen>\n      \n      <RigDialog\n        onClose={() => setRigDialogOpen(false)}\n        onSuccess={() => setRigDialogOpen(false)}\n        userId={Number(data?.dropzone?.dropzoneUser?.user?.id)}\n        open={rigDialogOpen}\n      />\n      \n      <DropzoneUserDialog\n        onClose={() => setDropzoneUserDialogOpen(false)}\n        onSuccess={() => setDropzoneUserDialogOpen(false)}\n        open={dropzoneUserDialogOpen}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    alignItems: 'center',\n    flexGrow: 1,\n    paddingBottom: 56\n  },\n  card: {\n    margin: 8,\n    width: \"100%\",\n  },\n  fields: {\n    width: \"80%\",\n    display: \"flex\",\n  },\n  spacer: {\n    width: \"100%\",\n    height: 32,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function RigScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/RigScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { License, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseSelect(props: ILicenseSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      License\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select a license\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.licenses?.map((license) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(license);\n            }}\n            title={\n              license.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Federation, Query } from \"../graphql/schema\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select federation\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.federations?.map((federation) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport LicenseSelect from '../../LicenseSelect';\nimport FederationSelect from '../../FederationSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.userForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.original?.id === globalState.currentUser?.id;  \n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      \n      <FederationSelect\n        value={state?.fields?.license?.value?.federation || state.federation.value}\n        onSelect={(value) => dispatch(actions.setFederation(value))}\n        required\n      />\n\n      <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n        { state.federation.error || \"\" }\n      </HelperText>\n\n      { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n        <>\n          <LicenseSelect\n            value={state.fields.license.value}\n            federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n            onSelect={(value) => dispatch(actions.setField([\"license\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n            { state.fields.license.error || \"\" }\n          </HelperText>\n        </>\n      )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, userForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/user/slice\";\nimport { Mutation, User } from '../../../graphql/schema';\nimport UserForm from '../../../components/forms/user/UserForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        phone: $phone,\n        email: $email,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateUserScreen() {\n  const { userForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { user: User }}>();\n  const user = route.params!.user;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(user));\n  }, [user?.id]);\n\n  const [mutationUpdateUser, data] = useMutation<Mutation>(MUTATION_CREATE_USER);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            licenseId: !license.value?.id ? null : Number(license.value!.id),\n            phone: phone.value,\n            exitWeight: parseFloat(exitWeight.value!),\n            email: email.value,\n          }\n        });\n        \n        if (result.data?.updateUser?.user) {\n          const { fieldErrors, errors } = result.data.updateUser;\n\n          if (fieldErrors) {\n            fieldErrors?.map(({ field, message }) => {\n              switch (field) {\n                case \"name\":\n                  return dispatch(userForm.setFieldError([\"name\", message]));\n                case \"exit_weight\":\n                  return dispatch(userForm.setFieldError([\"exitWeight\", message]));\n                case \"license_id\":\n                  return dispatch(userForm.setFieldError([\"license\", message]));\n                case \"phone\":\n                  return dispatch(userForm.setFieldError([\"phone\", message]));\n                case \"email\":\n                  return dispatch(userForm.setFieldError([\"email\", message]));\n              }\n            });\n          } else if (errors?.length) {\n            errors.map((message) =>\n              dispatch(\n                snackbar.showSnackbar({ message: message, variant: \"error\" })\n              )\n            );\n          } else {\n            dispatch(\n              snackbar.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n            );\n            navigation.goBack();\n            dispatch(userForm.reset());\n          }\n\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <UserForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport ProfileScreen from '../../screens/authenticated/profile/ProfileScreen';\nimport RigScreen from '../../screens/authenticated/rig/RigScreen';\nimport UpdateUserScreen from '../../screens/authenticated/profile/UpdateUserScreen';\nimport AppBar from '../AppBar';\nimport { useAppSelector } from '../../redux';\n\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  RigScreen: undefined;\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentDropzone?.currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n      <Profile.Screen name=\"RigScreen\" component={RigScreen} options={{ title: \"Rig\" }} />\n    </Profile.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { View } from '../../../components/Themed';\nimport { useAppSelector } from '../../../redux';\n\n\n\n\nexport default function SettingsScreen() {\n  \n  const navigation = useNavigation();\n  const state = useAppSelector(state => state.global);\n \n\n  return (\n    <View style={styles.container}>\n      <List.Section title=\"Dropzone\">\n        <List.Item\n          title=\"Configuration\"\n          onPress={() => navigation.navigate(\"UpdateDropzoneScreen\", { dropzone: state.currentDropzone })}\n          left={() => <List.Icon color=\"#000\" icon=\"information-outline\" />}\n        />\n        <List.Item\n          title=\"Planes\"\n          onPress={() => navigation.navigate(\"PlanesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"airplane\" />}\n        />\n        <List.Item\n          title=\"Rigs\"\n          left={() => <List.Icon color=\"#000\" icon=\"parachute\" />}\n          description=\"Coming soon\"\n        />\n      </List.Section>\n\n      <List.Section title=\"Tickets\">\n        <List.Item\n          title=\"Ticket types\"\n          onPress={() => navigation.navigate(\"TicketTypesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"ticket\" />}\n          />\n        <List.Item\n          title=\"Ticket add-ons\"\n          onPress={() => navigation.navigate(\"ExtrasScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"plus\" />}\n        />\n      </List.Section>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function DropzoneSettingsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/DropzoneSettingsScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, RefreshControl } from 'react-native';\nimport { FAB, DataTable, ProgressBar, Switch } from 'react-native-paper';\nimport { Mutation, Query } from \"../../../graphql/schema\";\n\nimport { useAppSelector } from '../../../redux';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      altitude\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketTypePublic(\n    $id: Int!,\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function TicketTypesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n  const [mutationUpdateTicketType, mutation] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n  \n  React.useEffect(() => {\n    if (route.name === \"TicketTypesScreen\") {\n      refetch();\n    }\n  }, [route.name])\n  return (\n      <ScrollableScreen style={styles.container} contentContainerStyle={[styles.content, {  backgroundColor: \"white\" }]} refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Name</DataTable.Title>\n            <DataTable.Title numeric>Cost</DataTable.Title>\n            <DataTable.Title numeric>Altitude</DataTable.Title>\n            <DataTable.Title numeric>Public</DataTable.Title>\n          </DataTable.Header>\n\n          { data?.ticketTypes?.map((ticketType) =>\n            <DataTable.Row onPress={() => navigation.navigate(\"UpdateTicketTypeScreen\", { ticketType })} pointerEvents=\"none\">\n              <DataTable.Cell>{ticketType.name}</DataTable.Cell>\n              <DataTable.Cell numeric>${ticketType.cost}</DataTable.Cell>\n              <DataTable.Cell numeric>\n                {ticketType.altitude}\n              </DataTable.Cell>\n              <DataTable.Cell numeric>\n                <Switch\n                  onValueChange={() => {\n                    mutationUpdateTicketType({\n                      variables: {\n                        id: Number(ticketType.id),\n                        allowManifestingSelf: !ticketType.allowManifestingSelf\n                      }\n                    })\n                  }}\n                  value={!!ticketType.allowManifestingSelf}\n                />\n              </DataTable.Cell>\n            </DataTable.Row>\n            )}\n        </DataTable>\n        \n        <FAB\n          style={styles.fab}\n          small\n          icon=\"plus\"\n          onPress={() => navigation.navigate(\"CreateTicketTypeScreen\")}\n          label=\"New ticket type\"\n        />\n      </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport ScrollableScreen from '../../ScrollableScreen';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.planeForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreatePlane({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.createPlane?.plane) {\n          const { plane } = result.data.createPlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreatePlane]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <PlaneForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation, Plane } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { plane: Plane }}>();\n  const plane = route.params!.plane;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(plane));\n  }, [plane?.id]);\n\n  const [mutationUpdatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdatePlane({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.updatePlane?.plane) {\n          const { plane } = result.data.updatePlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdatePlane]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <PlaneForm />\n        <View style={styles.actions}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  actions: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={{ width: \"100%\", marginVertical: 16, paddingHorizontal: 16 }}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, ProgressBar } from 'react-native-paper';\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Dropzone, Mutation, Query } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\nconst QUERY_DROPZONE_DETAILS = gql`\n  query QueryDropzoneDetails($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateDropzoneScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const route = useRoute<{ key: string, name: string, params: { dropzone: Dropzone }}>();\n  const dropzone = route.params!.dropzone;\n  const navigation = useNavigation();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_DETAILS, {\n    variables: { dropzoneId: Number(dropzone.id)}\n  });\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(actions.setOriginal(data.dropzone));\n    }\n  }, [data?.dropzone?.id]);\n\n  const [mutationUpdateDropzone, mutation] = useMutation<Mutation>(MUTATION_UPDATE_DROPZONE);\n\n  const onSave = React.useCallback(async () => {\n    let hasError = false;\n    const { name, banner, federation, primaryColor, secondaryColor, isCreditSystemEnabled, isPublic } = state.fields;\n\n    if (!name.value?.length || name.value?.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (!hasError) {\n      try {\n        const result = await mutationUpdateDropzone({\n          variables: {\n            id: Number(dropzone?.id),\n            name: name.value,\n            banner: banner.value || null,\n            primaryColor: primaryColor.value,\n            secondaryColor: secondaryColor.value,\n            federationId: Number(federation?.value?.id),\n            isCreditSystemEnabled: !!isCreditSystemEnabled,\n            isPublic: !!isPublic\n          }\n        });\n\n        result?.data?.updateDropzone?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"federation\":\n            case \"federation_id\":\n              return dispatch(actions.setFieldError([\"federation\", message]));\n            case \"banner\":\n              return dispatch(actions.setFieldError([\"banner\", message]));\n            case \"primary_color\":\n              return dispatch(actions.setFieldError([\"primaryColor\", message]));\n            case \"secondary_color\":\n              return dispatch(actions.setFieldError([\"secondaryColor\", message]));\n            case \"is_credit_system_enabled\":\n              return dispatch(actions.setFieldError([\"isCreditSystemEnabled\", message]));\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"is_public\":\n              return dispatch(actions.setFieldError([\"isPublic\", message]));\n          }\n        });\n        if (result?.data?.updateDropzone?.errors?.length) {\n          return dispatch(snackbarActions.showSnackbar({\n            message: result?.data?.updateDropzone?.errors[0],\n            variant: \"error\"\n          }));\n        } else if (!result?.data?.updateDropzone?.fieldErrors?.length) {\n          // No errors:\n          if (result.data?.updateDropzone?.dropzone) {\n            dispatch(\n              globalActions.setDropzone({\n                ...(globalState.currentDropzone || {}),\n                ...result?.data?.updateDropzone?.dropzone,\n              })\n            );\n            dispatch(\n              snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n            );\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateDropzone]);\n\n  return (\n    <>\n    <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      <DropzoneForm />\n      <View style={styles.fields}>\n        <Button mode=\"contained\" disabled={mutation.loading} onPress={onSave} loading={mutation.loading}>\n          Save\n        </Button>\n      </View>\n    </ScrollableScreen>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n    display: \"flex\",\n  },\n  content: {\n    display: \"flex\",\n    flexGrow: 1,\n    alignItems: 'center',\n    padding: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, RefreshControl } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlanesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n \n\n  return (\n    <ScrollableScreen refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        \n\n          {\n            !data?.planes?.length && (\n              <NoResults\n                title=\"No planes?\"\n                subtitle=\"You need to have at least one plane to manifest loads\"\n              />\n            )\n          }\n\n          { data?.planes?.length && (\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>Name</DataTable.Title>\n                <DataTable.Title numeric>Registration</DataTable.Title>\n                <DataTable.Title numeric>Slots</DataTable.Title>\n              </DataTable.Header>\n              {\n                data?.planes?.map((plane) =>\n                  <DataTable.Row\n                    pointerEvents=\"none\"\n                    onPress={() => navigation.navigate(\"UpdatePlaneScreen\", { plane })}\n                  >\n                    <DataTable.Cell>{plane.name}</DataTable.Cell>\n                    <DataTable.Cell numeric>{plane.registration}</DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {plane.maxSlots}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n              )}\n            </DataTable>\n          )}\n          \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreatePlaneScreen\")}\n        label=\"New plane\"\n      />\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_EXTRAS = gql`\n  query QueryExtras(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeForm() {\n  const state = useAppSelector(state => state.ticketTypeForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_EXTRAS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"Name of the ticket users will see\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"Base cost without extra ticket addons\" }\n      </HelperText>\n      <View style={{ width: \"100%\" }}>\n\n      <Menu\n        onDismiss={() => setAltitudeMenuOpen(false)}\n        visible={altitudeMenuOpen}\n\n        style={{position:'absolute',right:'10%',left:'10%', flex: 1 }}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setAltitudeMenuOpen(true);\n            }}\n            title={\n              state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"Height\",\n                  \"4000\": \"Hop n Pop\",\n                }[state.fields.altitude.value.toString()] :\n                \"Custom\"\n            }\n            style={{ width: \"100%\", flex: 1 }}\n            right={ () =>\n              <List.Icon icon={state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"airplane\",\n                  \"4000\": \"parachute\",\n                }[state.fields.altitude.value.toString()] as string :\n                \"pencil-plus\" \n              } />\n            }\n          />\n        }>\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 4000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Hop n Pop\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 14000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Height\"\n            right={() => <List.Icon icon=\"airplane-takeoff\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 7000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Other\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n      </Menu>\n\n      {\n        (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Custom altitude\"\n            error={!!state.fields.altitude.error}\n            value={state.fields.altitude?.value?.toString()}\n            onChangeText={(newValue) => dispatch(actions.setField([\"altitude\", Number(newValue)]))}\n          />\n        )\n      }\n\n      <Checkbox.Item\n        label=\"Tandem\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.isTandem.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"isTandem\", !state.fields.isTandem.value]))\n        }\n      />\n      <HelperText type={!!state.fields.isTandem.error ? \"error\" : \"info\"}>\n        { state.fields.isTandem.error || \"Allow also manifesting a passenger when using this ticket type\" }\n      </HelperText>\n\n      <Checkbox.Item\n        label=\"Public manifesting\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.allowManifestingSelf.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"allowManifestingSelf\", !state.fields.allowManifestingSelf.value]))\n        }\n      />\n      \n      <HelperText type={!!state.fields.allowManifestingSelf.error ? \"error\" : \"info\"}>\n        { state.fields.allowManifestingSelf.error || \"Allow users to manifest themselves with this ticket\" }\n      </HelperText>\n\n      <Divider />\n      <List.Subheader>Enabled ticket add-ons</List.Subheader>\n      {\n        data?.extras.map((extra) =>\n          <Checkbox.Item\n            label={extra.name!}\n            status={state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(\n                actions.setField([\n                  \"extras\",\n                  state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n                  ? state.fields.extras.value?.filter(({ id }) => id !== extra.id)\n                  : [...state.fields.extras.value!, extra]\n                ])\n              )\n            }\n          />\n        )\n      }\n\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateTicketType, data] = useMutation<Mutation>(MUTATION_CREATE_TICKET_TYPE);\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateTicketType({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n        \n        result?.data?.createTicketType?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"altitude\":\n              return dispatch(actions.setFieldError([\"altitude\", message]));\n            case \"cost\":\n              return dispatch(actions.setFieldError([\"cost\", message]));\n            case \"allow_manifesting_self\":\n              return dispatch(actions.setFieldError([\"allowManifestingSelf\", message]));\n            case \"extras\":\n              return dispatch(actions.setFieldError([\"extras\", message]));\n          }\n        });\n\n        if (result?.data?.createTicketType?.errors?.length) {\n          return dispatch(\n            snackbarActions.showSnackbar({\n              message: result?.data?.createTicketType?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (result.data?.createTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateTicketType]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <TicketTypeForm />\n        <View style={styles.actions}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  actions: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation, TicketType } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { ticketType: TicketType }}>();\n  const ticketType = route.params!.ticketType;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(ticketType));\n  }, [ticketType?.id]);\n\n  const [mutationUpdateTicketType, data] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateTicketType({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n\n\n        result?.data?.updateTicketType?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"altitude\":\n              return dispatch(actions.setFieldError([\"altitude\", message]));\n            case \"cost\":\n              return dispatch(actions.setFieldError([\"cost\", message]));\n            case \"allow_manifesting_self\":\n              return dispatch(actions.setFieldError([\"allowManifestingSelf\", message]));\n            case \"extras\":\n              return dispatch(actions.setFieldError([\"extras\", message]));\n          }\n        });\n\n        if (result?.data?.updateTicketType?.errors?.length) {\n          return dispatch(\n            snackbarActions.showSnackbar({\n              message: result?.data?.updateTicketType?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (result.data?.updateTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateTicketType]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginVertical: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.extraForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <View style={{ width: \"100%\"}}>\n        <List.Subheader>\n          Compatible tickets\n        </List.Subheader>\n        {\n          data?.ticketTypes.map((ticket) =>\n            <Checkbox.Item\n              label={ticket.name!}\n              status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n                ? \"checked\"\n                : \"unchecked\"\n              }\n              onPress={\n                () => dispatch(actions.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n              }\n            />\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_EXTRA = gql`\n  mutation CreateExtra(\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    createExtra(input: {\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const [mutationCreateExtra, data] = useMutation<Mutation>(MUTATION_CREATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateExtra({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.createExtra?.extra) {\n          const { extra } = result.data.createExtra;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added extra ${extra.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateExtra]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket-percent\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation, Extra } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_EXTRA = gql`\n  mutation UpdateExtra(\n    $id: Int!,\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    updateExtra(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { extra: Extra }}>();\n  const extra = route.params!.extra;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(extra));\n  }, [extra?.id]);\n\n  const [mutationUpdateExtra, data] = useMutation<Mutation>(MUTATION_UPDATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateExtra({\n          variables: {\n            id: Number(state.original!.id!),\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.updateExtra?.extra) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateExtra]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket-percent\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport usePalette from '../../../hooks/usePalette';\nimport global from '../../../redux/global';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryExtra(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        altitude\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtrasScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // React.useEffect(() => {\n  //   if (route.name === \"PlanesScreen\") {\n  //     refetch();\n  //   }\n  // }, [route.name])\n \n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n    <View style={styles.container}>\n      <DataTable>\n        <DataTable.Header>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Cost</DataTable.Title>\n        </DataTable.Header>\n\n        { data?.extras?.map((extra) =>\n          <DataTable.Row>\n            <DataTable.Cell onPress={() => navigation.navigate(\"UpdateExtraScreen\", { extra })}>{extra.name}</DataTable.Cell>\n            <DataTable.Cell numeric>{extra.cost}</DataTable.Cell>\n          </DataTable.Row>\n        )}\n      </DataTable>\n      { !loading && !data?.extras?.length && (\n          <NoResults\n            title=\"No ticket addons\"\n            subtitle=\"You can add multiple addons to assign to tickets, e.g outside camera, or coach\"\n          />\n      )}\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateExtraScreen\")}\n        label=\"New ticket addon\"\n      />\n    </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport SettingsScreen from '../../screens/authenticated/settings/SettingsScreen';\nimport DropzoneSettingsScreen from '../../screens/authenticated/settings/DropzoneSettingsScreen';\nimport TicketTypeSettingsScreen from '../../screens/authenticated/ticket_types/TicketTypesScreen';\nimport CreatePlaneScreen from '../../screens/authenticated/planes/CreatePlaneScreen';\nimport UpdatePlaneScreen from '../../screens/authenticated/planes/UpdatePlaneScreen';\nimport UpdateDropzoneScreen from '../../screens/authenticated/dropzones/UpdateDropzoneScreen';\nimport PlanesScreen from '../../screens/authenticated/planes/PlanesScreen';\n\nimport CreateTicketTypeScreen from '../../screens/authenticated/ticket_types/CreateTicketTypeScreen';\nimport UpdateTicketTypeScreen from '../../screens/authenticated/ticket_types/UpdateTicketTypeScreen';\n\nimport CreateExtraScreen from '../../screens/authenticated/extras/CreateExtraScreen';\nimport UpdateExtraScreen from '../../screens/authenticated/extras/UpdateExtraScreen';\nimport ExtrasScreen from '../../screens/authenticated/extras/ExtrasScreen';\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  DropzoneSettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  CreateTicketTypeScreen: undefined;\n  UpdateTicketTypeScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"DropzoneSettingsScreen\" component={DropzoneSettingsScreen} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateTicketTypeScreen\" component={CreateTicketTypeScreen} options={{ title: \"New ticket type\" }} />\n      <Settings.Screen name=\"UpdateTicketTypeScreen\" component={UpdateTicketTypeScreen} options={{ title: \"Edit ticket type\" }}/>\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useNavigationState, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, ProgressBar } from 'react-native-paper';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport NoResults from '../../../components/NoResults';\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport { useAppDispatch, useAppSelector, usersActions } from '../../../redux';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function UsersScreen() {\n  const {global, usersScreen } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzone?.id),\n      search: usersScreen.searchText,\n    }\n  });\n\n  const navigation = useNavigation();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (usersScreen.isSearchVisible) {\n      dispatch(usersActions.setSearchVisible(false));\n    }\n  }, [isFocused]);\n\n  return (\n    <View style={styles.container}>\n      <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n      \n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n        <List.Item\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() => <List.Icon icon=\"account\" />}\n          onPress={() => navigation.navigate(\"UserProfileScreen\", { userId: edge?.node?.id })}\n        />\n      )}\n    </View>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import React from \"react\";\nimport { Appbar, List, TextInput } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql } from \"@apollo/client\";\nimport { useAppDispatch, useAppSelector } from \"../../../redux\";\nimport { StyleSheet, View } from \"react-native\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\n\n\n\ninterface ISearchableAppBar extends StackHeaderProps {\n  searchVisible: boolean;\n  searchText: string;\n  setSearchVisible(visible: boolean): void;\n  onSearch(text: string): void;\n}\n\n\nfunction AppBar({ navigation, previous, scene, onSearch, searchText, searchVisible, setSearchVisible }: ISearchableAppBar) {\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  return (\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      {searchVisible ? <Appbar.BackAction onPress={() => setSearchVisible(false)} /> : null}\n      {searchVisible\n        ? <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              value={searchText}\n              onChangeText={(text) => onSearch(text)}\n            />\n          </View>\n        : <Appbar.Content title={scene.descriptor.options.title} />\n      }\n      <MaterialIcons\n        name=\"search\"\n        onPress={() => setSearchVisible(!searchVisible)}\n        color=\"#FFFFFF\"\n        size={24}\n        style={styles.icon}\n      />\n    </Appbar.Header>\n  );\n}\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    flexGrow: 1\n  },\n  input: {\n    backgroundColor: \"transparent\",\n    height: \"100%\",\n    color: \"white\",\n    borderColor: \"none\"\n  },\n  icon: {\n    marginHorizontal: 8\n  },\n})\n\nexport default AppBar;","import React from \"react\";\nimport { Checkbox, TextInput } from \"react-native-paper\";\nimport { ChecklistItem } from \"../../../graphql/schema\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport DatePicker from '../../DatePicker';\n\ninterface IChecklistItem {\n  value: string;\n  onChange(value: string): void;\n  config: ChecklistItem;\n}\n\nexport default function RigInspectionItem(props: IChecklistItem) {\n\n  const canInspect = useRestriction(\"actAsRigInspector\");\n\n  if (props.config?.valueType && props.config?.valueType === \"string\") {\n    return (\n      <TextInput\n        mode=\"outlined\"\n        disabled={!canInspect}\n        style={{ marginVertical: 8 }}\n        value={props.value}\n        onChangeText={(text) => props.onChange(text)}\n        label={props.config.name || \"\"}\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"boolean\") {\n    return (\n      <Checkbox.Item\n        label={props.config.name || \"\"}\n        disabled={!canInspect}\n        style={{ marginVertical: 8 }}\n        status={props.value === \"true\"\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => props.onChange(props.value === \"true\" ? \"false\" : \"true\")\n        }\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"integer\") {\n    return (\n      <TextInput\n        disabled={!canInspect}\n        value={props.value}\n        mode=\"outlined\"\n        onChangeText={(text) => props.onChange(text)}\n        label={props.config.name || \"\"}\n        keyboardType=\"number-pad\"\n        style={{ marginVertical: 8 }}\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"date\") {\n    return (\n      <DatePicker\n        disabled={!canInspect}\n        timestamp={Number(props.value)}\n        onChange={(time) => props.onChange(time.toString())}\n        label={props.config.name || \"\"}\n        \n      />\n    )\n  }\n  return null;\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport { useAppSelector, useAppDispatch, rigInspectionForm } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport RigInspectionItem from './RigInspectionItem';\n\n\nconst QUERY_RIG_INSPECTION = gql`\n  query RigInspection($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      rigInspectionChecklist {\n        checklistItems {\n          id\n          isRequired\n          name\n          valueType\n          description\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigForm() {\n  const { global: globalState, rigInspectionForm: state } = useAppSelector(state => state);\n\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTION, {\n    variables: {\n      dropzoneId: Number(globalState?.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      {\n        data?.dropzone?.rigInspectionChecklist?.checklistItems?.map((item) => {\n          const currentValue = state.fields.find((value) => value?.checklistItem.id === item.id);\n\n          return (\n            <RigInspectionItem\n              config={item}\n              value={currentValue?.value || \"\"}\n              onChange={(value) =>\n                dispatch(\n                  rigInspectionForm.setItem({ checklistItem: item, value, id: currentValue?.id || null })\n                )\n              }\n            />\n          )\n        })\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useRoute } from '@react-navigation/core';\nimport { format } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Button, Card, List } from 'react-native-paper';\nimport RigInspectionForm from \"../../../components/forms/rig_inspection/RigInspectionForm\";\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { DropzoneUser, Mutation, Query, Rig } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { rigInspectionForm, snackbarActions, useAppDispatch, useAppSelector } from '../../../redux';\n\nconst QUERY_RIG_INSPECTIONS = gql`\n  query RigInspections($dropzoneUserId: Int!, $dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        rigInspections {\n          id\n          rig {\n            id\n          }\n          inspectedBy {\n            id\n            name\n          }\n          checklistValues {\n            id\n            value\n            checklistItem {\n              id\n              name\n              valueType\n              isRequired\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_CREATE_RIG_INSPECTION = gql`\n  mutation CreateRigInspection(\n    $dropzoneId: Int,\n    $rigId: Int,\n  ) {\n    createRigInspection(input: {\n      attributes: {\n        dropzoneId: $dropzoneId,\n        rigId: $rigId,\n      }\n    }) {\n      rigInspection {\n        id\n        inspectedBy {\n          id\n          name\n        }\n        rig {\n          id\n        }\n        checklistValues {\n          id\n          value\n          checklistItem {\n            id\n            name\n            valueType\n            isRequired\n            description\n          }\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\n\n\nconst MUTATION_SET_VALUE = gql`\n  mutation SetValue(\n    $checklistItemId: Int,\n    $rigInspectionId: Int,\n    $value: String,\n  ) {\n    updateChecklistValue(input: {\n      attributes: {\n        checklistItemId: $checklistItemId,\n        rigInspectionId: $rigInspectionId,\n        value: $value\n      }\n    }) {\n      checklistValue {\n        id,\n        value,\n        checklistItem {\n          id\n          name\n          valueType,\n          description\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function RigInspectionScreen() {\n  const { global: globalState, rigInspectionForm: state } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const route = useRoute<{ key: string, name: string, params: { rig: Rig, dropzoneUserId: number }}>();\n  const { rig, dropzoneUserId } = route.params;\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTIONS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone!.id),\n      dropzoneUserId: dropzoneUserId,\n    }\n  });\n\n  const canInspect = useRestriction(\"actAsRigInspector\");\n  const [mutationCreateRigInspection] = useMutation<Mutation>(MUTATION_CREATE_RIG_INSPECTION);\n  const [mutationSetValue] = useMutation<Mutation>(MUTATION_SET_VALUE);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.dropzoneUser?.rigInspections?.some((inspection) => inspection.rig?.id.toString() === rig.id.toString())) {\n      const inspection = data?.dropzone?.dropzoneUser?.rigInspections?.find((inspection) => inspection.rig?.id === rig.id);\n      console.log({ inspection });\n      dispatch(\n        rigInspectionForm.setOriginal(\n          inspection!\n        )\n      )\n    }\n  }, [JSON.stringify(data?.dropzone?.dropzoneUser?.rigInspections)]);\n\n  const createRigInspection = React.useCallback(async () => {\n    try {\n      let rigInspectionId = state.original?.id;\n      if (!rigInspectionId) {\n        const result = await mutationCreateRigInspection({\n          variables: { dropzoneId: Number(globalState.currentDropzone!.id), rigId: Number(rig.id) }\n        });\n\n        rigInspectionId = result?.data?.createRigInspection?.rigInspection!.id;\n      }\n\n      await Promise.all(\n        state.fields.map((field) =>\n          mutationSetValue({\n            variables: {\n              rigInspectionId: Number(rigInspectionId),\n              checklistItemId: Number(field.checklistItem.id),\n              value: field.value\n          }})\n        )\n      );\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    }\n  }, [JSON.stringify(state.fields), state?.original?.id, globalState?.currentDropzone?.id]);\n\n  return (\n    <ScrollableScreen>\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Rig\" />\n        <Card.Content>\n          <List.Item\n            title=\"Make\"\n            description={rig.make}\n          />\n          <List.Item\n            title=\"Model\"\n            description={rig.model}\n          />\n          <List.Item\n            title=\"Serial\"\n            description={rig.serial}\n          />\n          <List.Item\n            title=\"Repack due\"\n            description={\n              rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"\n            }\n          />\n        </Card.Content>\n      </Card>\n\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Inspection\" />\n\n        <Card.Content>\n          <RigInspectionForm />\n        </Card.Content>\n\n        <Card.Actions>\n          <Button disabled={!canInspect} mode=\"contained\" onPress={() => createRigInspection()} style={{ width: \"100%\"}}>\n            Mark as inspected\n          </Button>\n        </Card.Actions>\n      </Card>\n    </ScrollableScreen>\n  );\n}\n\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport UsersScreen from '../../screens/authenticated/users/UsersScreen';\nimport SearchableAppBar from '../../screens/authenticated/users/AppBar';\nimport RigInspectionScreen from '../../screens/authenticated/rig/RigInspectionScreen';\nimport { useAppDispatch, useAppSelector, usersActions } from '../../redux';\nimport ProfileScreen from '../../screens/authenticated/profile/ProfileScreen';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: undefined;\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.usersScreen);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(usersActions.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(usersActions.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { BottomNavigation, useTheme } from 'react-native-paper';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport * as React from 'react';\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport PackingTab from \"./tabs/packing\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useColorScheme from '../hooks/useColorScheme';\nimport useRestriction from '../hooks/useRestriction';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(\"readUser\");\n  const canCreatePacks = useRestriction(\"createPackjob\");\n  const canManageDropzone = useRestriction(\"updateDropzone\");\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n      { false && canCreatePacks && (\n        <BottomTab.Screen\n          name=\"Packing\"\n          component={PackingTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"parachute\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { canManageDropzone && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { globalActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation } from '@react-navigation/core';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) =>\n          <Card\n            style={{\n              width: (Dimensions.get(\"window\").width / 2) - 32,\n              margin: 8\n            }}\n            onPress={async ()=> {\n              if (item?.node) {\n                dispatch(\n                  globalActions.setDropzone(item.node)\n                );\n              }\n            }}\n          >\n            <Card.Cover source={{ uri: item?.node?.banner as string }} />\n            <Card.Content>\n              <Title>{item?.node?.name}</Title>\n            </Card.Content>\n          </Card>\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(snackbarActions.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(globalActions.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from '../../../components/notifications';\nimport { useAppSelector, useAppDispatch, globalActions, snackbarActions } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Mutation } from '../../../graphql/schema';\n\nconst { actions } = slice;\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              globalActions.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              globalActions.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(snackbarActions.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign in</Text>\n\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button style={styles.button} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 10,\n  },\n  button: {\n    marginTop: 10,\n    width: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"./slice\";\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.signup);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          globalActions.setCredentials(payload.credentials)\n        );\n        dispatch(\n          globalActions.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen style={styles.container}>\n      <Text style={styles.title}>Sign up</Text>\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", parseFloat(newValue)]))}\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          onPress={() =>\n            onSignUp({\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Notifications from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\n\n\n\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  return (\n    <Apollo>\n      <MaterialProvider theme={state.theme}>\n        <SafeAreaProvider>\n          <NavigationContainer\n            linking={LinkingConfiguration}\n            theme={state.theme}>\n            <RootNavigator />\n          </NavigationContainer>\n\n          <StatusBar />\n          <Notifications />\n        </SafeAreaProvider>\n    </MaterialProvider>\n    </Apollo>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}