{"version":3,"sources":["screens/authenticated/users/slice.ts","components/forms/rig_inspection/slice.tsx","components/forms/rig_inspection_template/slice.tsx","redux/store.ts","redux/global.ts","components/forms/dropzone/slice.tsx","constants/Colors.ts","components/notifications/slice.ts","screens/unauthenticated/login/slice.ts","screens/unauthenticated/signup/slice.ts","components/ScrollableScreen.tsx","hooks/useRestriction.ts","redux/index.ts","hooks/useColorScheme.web.ts","components/forms/plane/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","components/forms/user/slice.tsx","components/forms/slot/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/rig/slice.tsx","components/forms/credits/slice.tsx","components/forms/slots_multiple/slice.tsx","components/notifications/Notifications.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","hooks/usePalette.ts","components/forms/dropzone/DropzoneForm.tsx","components/Themed.tsx","graphql/Apollo.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","navigation/SetupWarning.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","screens/authenticated/packing/PackingScreen.tsx","navigation/tabs/packing.tsx","navigation/tabs/profile.tsx","navigation/tabs/settings.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/createMutation.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf"],"names":["initialState","isSearchVisible","isSelectEnabled","selectedUsers","searchText","createSlice","name","reducers","setSelectEnabled","state","action","payload","setSelected","setSearchText","setSearchVisible","reset","fields","ok","setOk","setField","index","item","console","log","map","field","idx","setFields","JSON","parse","error","message","original","setOriginal","definition","err","globalActions","loginSlice","actions","signUpSlice","globalSlice","usersActions","usersSlice","snackbarActions","notificationSlice","slotForm","planeFormSlice","dropzoneFormSlice","ticketTypeFormSlice","extraFormSlice","loadFormSlice","slotFormSlice","userForm","userFormSlice","dropzoneUserForm","dropzoneUserFormSlice","rigForm","rigFormSlice","rigInspectionForm","rigInspectionFormSlice","rigInspectionTemplateForm","rigInspectionTemplateSlice","creditsForm","creditsFormSlice","slotsMultipleForm","slotsMultipleFormSlice","persistConfig","key","storage","Platform","OS","require","default","AsyncStorage","whitelist","reducer","persistCombineReducers","global","notifications","login","signup","dropzoneForm","planeForm","ticketTypeForm","extraForm","loadForm","rigInspectionTemplate","usersScreen","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","colors","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","currentUser","currentDropzone","permissions","credentials","theme","isDarkMode","setCredentials","setUser","setPermissions","setPrimaryColor","primary","setAccentColor","accent","setDropzone","primaryColor","secondaryColor","toggleDarkMode","logout","typedKey","federation","value","banner","isCreditSystemEnabled","isPublic","setFieldError","successColor","warningColor","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","queue","hideSnackbar","slice","showSnackbar","push","email","password","setEmail","setPassword","setEmailError","setPasswordError","passwordConfirmation","exitWeight","phone","license","setFederation","ScrollableScreen","props","height","useWindowDimensions","keyboardDismissMode","keyboardShouldPersistTaps","contentInsetAdjustmentBehavior","style","styles","container","backgroundColor","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","QUERY_PERMISSIONS","gql","useRestriction","permission","data","useQuery","variables","dropzoneId","Number","id","fetchPolicy","dropzone","includes","useColorScheme","registration","minSlots","maxSlots","hours","nextMaintenanceHours","cost","altitude","allowManifestingSelf","isTandem","extras","ticketTypeIds","ticketTypes","gca","dispatchAt","isOpen","loadMaster","pilot","plane","rigs","jumpType","load","rig","ticketType","user","passengerName","passengerExitWeight","role","expiresAt","make","model","serial","repackExpiresAt","canopySize","amount","status","users","setFromSlots","slot","rigId","find","i","setDropzoneUsers","dzUser","availableRigs","MyComponent","dispatch","palette","usePalette","notification","length","variantStyle","visible","onDismiss","duration","variant","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","lightColor","darkColor","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","Colors","WebBrowser","developmentModeText","marginBottom","fontSize","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","marginTop","welcomeImage","width","resizeMode","marginLeft","marginHorizontal","marginVertical","codeHighlightText","color","borderRadius","paddingVertical","colorScheme","QUERY_FEDERATIONS","DropzoneForm","loading","useState","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","useEffect","federations","stringify","onPickImage","useCallback","a","async","getDocumentAsync","multiple","type","result","uri","Title","Content","padding","onColorSelected","sliderComponent","SliderComponent","defaultColor","undefined","hideSliders","Actions","disabled","current","next","maxHeight","Cover","source","justifyContent","Subheader","subheader","mode","label","onChangeText","newValue","anchor","Item","title","icon","left","description","display","paddingLeft","useThemeColor","colorName","colorFromProps","Text","otherProps","View","httpLink","createHttpLink","Constants","manifest","extra","url","Apollo","errorLink","useMemo","onError","graphQLErrors","networkError","some","extensions","code","locations","authLink","setContext","_","headers","accessToken","tokenType","client","ApolloClient","link","concat","cache","InMemoryCache","prefixes","Linking","config","screens","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","replace","linkText","fontWeight","Warning","Paragraph","Button","SetupWarning","credits","isRigSetUp","isExitWeightDefined","isMembershipInDate","isReserveInDate","isRigInspectionComplete","useNavigation","missing","filter","Boolean","join","navigate","flexDirection","QUERY_CURRENT_USER","AppBar","previous","scene","contextMenuOpen","setContextMenuOpen","Appbar","Header","BackAction","goBack","descriptor","options","titleStyle","Chip","Menu","IconButton","Divider","Date","getTime","isRigInspected","rigInspections","inspection","isRepackInDate","ManifestScreen","React","CreateLoadScreen","ManifestGroupScreen","Manifest","createStackNavigator","ManifestTab","globalState","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","separator","RigScreen","UpdateUserScreen","Profile","ProfileTab","initialParams","userId","SettingsScreen","DropzoneSettingsScreen","TicketTypeSettingsScreen","CreatePlaneScreen","UpdatePlaneScreen","UpdateDropzoneScreen","PlanesScreen","RigInspectionTemplateScreen","CreateTicketTypeScreen","UpdateTicketTypeScreen","CreateExtraScreen","UpdateExtraScreen","ExtrasScreen","Settings","SettingsTab","UsersScreen","SearchableAppBar","RigInspectionScreen","searchVisible","onSearch","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","canManageDropzone","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","size","MaterialCommunityIcons","unmountOnBlur","UsersTab","QUERY_DROPZONES","refetch","SafeAreaView","FlatList","dropzones","edges","numColumns","refreshing","onRefresh","ListEmptyComponent","empty","renderItem","Card","Dimensions","get","margin","node","FAB","fab","small","position","right","bottom","isRequired","pattern","validates","callback","createMutation","mutation","getPayload","fieldErrorMap","opts","onFieldError","onSuccess","useMutation","mutate","hasErrors","Object","keys","forEach","x","variable","validator","test","validate","fieldErrors","fieldName","errors","createDropzone","SignupScreen","useMutationCreateDropzone","e","federationId","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","emailRegex","RegExp","hasError","userLogin","authenticatable","TextInput","HelperText","secureTextEntry","button","userSignUp","useMutationSignUp","onSignUp","toString","keyboardType","Affix","parseFloat","textContentType","passwordRules","licenseId","maxWidth","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","fallback","ProgressBar","indeterminate","NavigationContainer","linking","LinkingConfiguration","StatusBar","Notifications","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","useCachedResources","ActivityIndicator","navigator","window","addEventListener","serviceWorker","register","scope","then","catch","module","exports"],"mappings":"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","file":"static/js/app.02177852.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  isSelectEnabled: boolean;\n  selectedUsers: DropzoneUser[]\n  searchText: string;\n}\n\nconst initialState: IUserScreenState = {\n  isSearchVisible: false,\n  isSelectEnabled: false,\n  selectedUsers: [],\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'usersScreen',\n  initialState,\n  reducers: {\n    setSelectEnabled: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSelectEnabled = action.payload;\n    },\n    setSelected: (state: IUserScreenState, action: PayloadAction<DropzoneUser[]>) => {\n      state.selectedUsers = action.payload;\n    },\n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FieldItem } from \"../rig_inspection_template/slice\";\n\n\n\ninterface IRigInspectionEditState {\n  fields: FieldItem[],\n  ok: boolean;\n}\n\nconst initialState: IRigInspectionEditState = {\n  fields: [],\n  ok: false\n};\n\n\nexport default createSlice({\n  name: 'rigInspectionForm',\n  initialState,\n  reducers: {\n\n    setOk: (state: IRigInspectionEditState, action: PayloadAction<boolean>) => {\n      state.ok = action.payload;\n    },\n    setField: (state: IRigInspectionEditState, action: PayloadAction<[number, FieldItem]>) => {\n      const [index, item] = action.payload;\n\n      console.log({ item, index, fields: state.fields });\n      state.fields = state.fields.map((field, idx) => idx === index ? item : field);\n    },\n\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<string>) => {\n      try {\n        state.fields = JSON.parse(action.payload)\n      } catch (error) {\n        console.error(\"Failed to read rig inspection template\", error.message, action.payload);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.ok = initialState.ok;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, FormTemplate } from \"../../../graphql/schema\";\n\n\nexport interface FieldItem {\n  label: string;\n  description?: string;\n  isRequired?: boolean;\n  valueType: \"integer\" | \"boolean\" | \"date\" | \"string\";\n  value?: number | boolean | string;\n}\n\ninterface IRigInspectionEditState {\n  original: FormTemplate | null;\n  fields: FieldItem[],\n}\n\nconst initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'rigInspectionTemplateForm',\n  initialState,\n  reducers: {\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<FieldItem[]>) => {\n      state.fields = action.payload;\n    },\n\n    setOriginal: (state: IRigInspectionEditState, action: PayloadAction<FormTemplate>) => {\n      state.original = action.payload;\n\n      try {\n        state.fields = JSON.parse(action.payload.definition!);\n      } catch(err) {\n        console.log(\"Invalid json: \", action.payload.definition);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport AsyncStorage from '@react-native-community/async-storage';\n\n\n\nimport { persistStore, persistCombineReducers } from \"redux-persist\";\n\n\nimport globalSlice from \"./global\";\nimport notificationSlice from \"../components/notifications/slice\";\n\nimport loginSlice from \"../screens/unauthenticated/login/slice\";\nimport signUpSlice from \"../screens/unauthenticated/signup/slice\";\nimport usersSlice from \"../screens/authenticated/users/slice\";\nimport dropzoneFormSlice from \"../components/forms/dropzone/slice\";\nimport planeFormSlice from \"../components/forms/plane/slice\";\nimport ticketTypeFormSlice from \"../components/forms/ticket_type/slice\";\nimport extraFormSlice from \"../components/forms/extra/slice\";\nimport loadFormSlice from \"../components/forms/load/slice\";\nimport slotFormSlice from \"../components/forms/slot/slice\";\nimport userFormSlice from \"../components/forms/user/slice\";\nimport dropzoneUserFormSlice from \"../components/forms/dropzone_user/slice\";\nimport rigFormSlice from \"../components/forms/rig/slice\";\nimport rigInspectionFormSlice from \"../components/forms/rig_inspection/slice\";\nimport rigInspectionTemplateSlice from \"../components/forms/rig_inspection_template/slice\";\nimport creditsFormSlice from \"../components/forms/credits/slice\";\nimport slotsMultipleFormSlice from \"../components/forms/slots_multiple/slice\";\n\n// Re-export actions:\nexport const { actions: loginActions } = loginSlice;\nexport const { actions: signUpActions } = signUpSlice;\nexport const { actions: globalActions } = globalSlice;\nexport const { actions: usersActions } = usersSlice;\nexport const { actions: snackbarActions } = notificationSlice;\nexport const { actions: planeForm } = planeFormSlice;\nexport const { actions: dropzoneForm } = dropzoneFormSlice;\nexport const { actions: ticketTypeForm } = ticketTypeFormSlice;\nexport const { actions: extraForm } = extraFormSlice;\nexport const { actions: loadForm } = loadFormSlice;\nexport const { actions: slotForm } = slotFormSlice;\nexport const { actions: userForm } = userFormSlice;\nexport const { actions: dropzoneUserForm } = dropzoneUserFormSlice;\nexport const { actions: rigForm } = rigFormSlice;\nexport const { actions: rigInspectionForm } = rigInspectionFormSlice;\nexport const { actions: rigInspectionTemplateForm } = rigInspectionTemplateSlice;\nexport const { actions: creditsForm } = creditsFormSlice;\nexport const { actions: slotsMultipleForm } = slotsMultipleFormSlice;\n\nconst persistConfig = {\n  key: 'root',\n  storage: Platform.OS === \"web\" ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\n\nconst reducer = persistCombineReducers(persistConfig, {\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    login: loginSlice.reducer,\n    signup: signUpSlice.reducer,\n    dropzoneForm: dropzoneFormSlice.reducer,\n    planeForm: planeFormSlice.reducer,\n    ticketTypeForm: ticketTypeFormSlice.reducer,\n    extraForm: extraFormSlice.reducer,\n    loadForm: loadFormSlice.reducer,\n    slotForm: slotFormSlice.reducer,\n    slotsMultipleForm: slotsMultipleFormSlice.reducer,\n    userForm: userFormSlice.reducer,\n    dropzoneUserForm: dropzoneUserFormSlice.reducer,\n    rigForm: rigFormSlice.reducer,\n    rigInspectionForm: rigInspectionFormSlice.reducer,\n    rigInspectionTemplate: rigInspectionTemplateSlice.reducer,\n    usersScreen: usersSlice.reducer,\n    creditsForm: creditsFormSlice.reducer,\n  });\n\nexport const store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n\ninterface IGlobalState {\n  currentUser: User | null;\n  credentials: Credential | null;\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nconst initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  permissions: [],\n  credentials: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone | null>) => {\n      state.currentDropzone = action.payload;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<Dropzone>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","export const tintColorLight = '#2f95dc';\nexport const tintColorDark = '#fff';\nexport const successColor = \"#00C851\";\nexport const errorColor = \"#ff4444\";\nexport const warningColor = \"#FF8800\";\nexport const infoColor = \"#0099CC\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\" | \"warning\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport default createSlice({\n  name: 'notifications',\n  initialState: {\n    queue: []\n  } as INotificationState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView keyboardDismissMode=\"on-drag\"\n    keyboardShouldPersistTaps=\"handled\"\n    contentInsetAdjustmentBehavior=\"always\" style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useAppSelector } from \"../redux\";\n\nconst QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: string): boolean {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  return data?.dropzone?.currentUser?.permissions?.includes(permission as any) || false;\n}","export * from \"./store\";","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nconst initialState: IPlaneEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IPlaneEditState, action: PayloadAction<Plane>) => {\n      state.original = action.payload;\n      state.fields.hours.value = action.payload.hours!;\n      state.fields.minSlots.value = action.payload.minSlots!;\n      state.fields.maxSlots.value = action.payload.maxSlots!;\n      state.fields.name.value = action.payload.name!;\n      state.fields.registration.value = action.payload.registration!;\n      state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nconst initialState: ITicketTypeEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'ticketTypeForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ITicketTypeEditState, action: PayloadAction<TicketType>) => {\n      state.original = action.payload;\n      state.fields.altitude.value = action.payload.altitude!;\n      state.fields.cost.value = action.payload.cost!;\n      state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nconst initialState: IExtraEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'ExtraForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IExtraEditState, action: PayloadAction<Extra>) => {\n      state.original = action.payload;\n      state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n      state.fields.cost.value = action.payload.cost;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ILoadEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'loadForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ILoadEditState, action: PayloadAction<Load>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IUserEditState = {\n  original: null,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'userForm',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IUserEditState, action: PayloadAction<User>) => {\n      state.original = action.payload;\n      state.federation.value = action.payload.license?.federation!;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"user\"\n  | \"exitWeight\"\n  | \"extras\"\n  | \"passengerExitWeight\"\n  | \"passengerName\"\n>\n\ninterface ISlotEditState {\n  original: Slot | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Fields[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    user: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n    passengerName: {\n      value: null,\n      error: null,\n    },\n    passengerExitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<Slot>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneUserEditState = {\n  original: null,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'dropzoneUserForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IDropzoneUserEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IRigEditState = {\n  original: null,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'rigForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IRigEditState, action: PayloadAction<Rig>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser, Transaction } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Transaction,\n  | \"amount\"\n  | \"status\"\n  | \"message\"\n>;\n\ninterface IDropzoneEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Transaction[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    amount: {\n      value: null,\n      error: null,\n    },\n    status: {\n      value: \"deposit\",\n      error: null,\n    },\n    message: {\n      value: \"\",\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'creditsForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { pick, pickBy } from \"lodash\";\nimport { SlotUser, Slot, DropzoneUser } from \"../../../graphql/schema\";\n\n\ninterface IFields extends Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"extras\"\n> {\n  users: SlotUser[];\n}\n\ninterface ISlotEditState {\n  original: IFields | null;\n  fields: {\n    [K in keyof IFields] - ?: {\n      value: IFields[K] | null;\n      error: string | null;\n    }\n  },\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    users: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotMultipleForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      \n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setFromSlots: (state: ISlotEditState, action: PayloadAction<Slot[]>) => {\n      state.fields.users.value = action.payload.map((slot) => ({\n          id: Number(slot.user?.id),\n          rigId: Number(slot.rig?.id),\n          exitWeight: Number(slot.exitWeight),\n        })\n      ) as SlotUser[];\n\n      state.fields.jumpType.value = action.payload.find(i => i)?.jumpType;\n      state.fields.load.value = action.payload.find(i => i)?.load!;\n      state.fields.extras.value = action.payload.find(i => i)?.extras;\n    },\n\n    setDropzoneUsers: (state: ISlotEditState, action: PayloadAction<DropzoneUser[]>) => {\n      state.fields.users.value = action.payload.map<SlotUser>((dzUser) => ({\n          id: Number(dzUser.user.id),\n          rigId: Number(dzUser?.availableRigs?.find(({ id }) => id)?.id),\n          exitWeight: Number(dzUser?.user.exitWeight),\n        })\n      ) as SlotUser[];\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<IFields>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\n\nexport default MyComponent;","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={{ width: \"100%\", marginVertical: 16, paddingHorizontal: 16 }}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport React, { useCallback, useMemo } from 'react';\nimport Constants from \"expo-constants\";\nimport { globalActions, snackbarActions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `Session expires`, variant: \"error\" })\n        )\n        dispatch(\n          globalActions.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          dispatch(\n            snackbarActions.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n          )\n        );\n      if (networkError) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"dz://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React from \"react\";\nimport { Paragraph, Button} from \"react-native-paper\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\n\n\ninterface ISetupWarning {\n  credits: number;\n  loading: boolean;\n  isRigSetUp: boolean;\n  isRigInspectionComplete: boolean;\n  isCreditSystemEnabled: boolean;\n  isExitWeightDefined: boolean;\n  isReserveInDate: boolean;\n  isMembershipInDate: boolean;\n}\n\nfunction Warning(props: { title: string, action?: () => void }) {\n  return (\n    <View style={styles.warning}>\n        <Paragraph>\n          {props.title}\n        </Paragraph>\n        {!props.action ? null : (\n          <Button color=\"black\" mode=\"outlined\" onPress={() => props.action!()}>\n            Take me there\n          </Button>\n        )}\n      </View>\n  );\n}\n\nexport default function SetupWarning(props: ISetupWarning) {\n  const { credits, loading, isCreditSystemEnabled, isRigSetUp, isExitWeightDefined, isMembershipInDate, isReserveInDate, isRigInspectionComplete } = props;\n\n  if (props.loading) {\n    return null;\n  }\n  \n  const navigation = useNavigation();\n\n  if (!isExitWeightDefined || !isRigSetUp) {\n    const missing = [\n      !isExitWeightDefined ? \"exit weight\" : null,\n      !isRigSetUp ? \"at least one rig\" : null,\n    ].filter(Boolean);\n\n    return (\n      <Warning\n        title={`You need to define ${missing.join(\"and\")} in your profile`}\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    );\n  } else if (!isMembershipInDate) {\n    return (\n      <Warning\n        title=\"Your membership seems to be out of date\"\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    )\n  } else if (!isRigInspectionComplete) {\n    return (\n      <Warning\n        title={`Your rig must be inspected before you can manifest at this dropzone`}\n      />\n    );\n  } else if (!isReserveInDate) {\n    return (\n      <Warning\n        title={`Your reserve repack is due. You cannot manifest if your repack is out of date.`}\n      />\n    );\n  } else if (isCreditSystemEnabled && !credits && !loading) {\n    return (\n      <Warning\n        title=\"You'll need to top up on credits before you can manifest\"\n      />\n    );\n  }\n\n  return null;\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n","import React, { useState } from \"react\";\nimport { Appbar, Menu, IconButton, Divider, Chip } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Query } from \"../graphql/schema\";\nimport { globalActions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { StyleSheet } from \"react-native\";\nimport SetupWarning from \"./SetupWarning\";\n\nconst QUERY_CURRENT_USER = gql`\n  query QueryDropzone($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      isCreditSystemEnabled\n\n      currentUser {\n        id\n        credits\n        expiresAt\n        \n        rigInspections {\n          id\n          rig {\n            id\n            repackExpiresAt\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nfunction AppBar({ navigation, previous, scene }: StackHeaderProps) {\n  const [contextMenuOpen, setContextMenuOpen] = useState(false);\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_CURRENT_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzone!.id)\n    }\n  });\n  \n  const showCredits = !!data?.dropzone?.isCreditSystemEnabled;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} titleStyle={{ fontWeight: \"bold\" }} />\n\n      <Chip mode=\"outlined\">\n        {`$${data?.dropzone?.currentUser?.credits || 0}`}\n      </Chip>\n      <Menu\n        onDismiss={() => setContextMenuOpen(false)}\n        visible={contextMenuOpen}\n        anchor={\n          <IconButton\n            icon=\"dots-vertical\"\n            color=\"#FFFFFF\"\n            onPress={() => setContextMenuOpen(true)}\n          />\n      }>\n        <Menu.Item\n          title=\"Change dropzone\"\n          icon=\"radar\"\n          onPress={() => {\n            dispatch(globalActions.setDropzone(null));\n            setContextMenuOpen(false);\n          }}\n        />\n        <Divider />\n        <Menu.Item\n          title=\"Log out\"\n          icon=\"logout\"\n          onPress={() => {\n            dispatch(globalActions.logout());\n            setContextMenuOpen(false);\n          }}\n        />\n      </Menu>\n    </Appbar.Header>\n    <SetupWarning\n      credits={data?.dropzone?.currentUser?.credits || 0}\n      loading={loading}\n      isCreditSystemEnabled={!!data?.dropzone?.isCreditSystemEnabled}\n      isExitWeightDefined={!!data?.dropzone?.currentUser?.user?.exitWeight}\n      isMembershipInDate={!!data?.dropzone?.currentUser?.expiresAt && data?.dropzone?.currentUser?.expiresAt > (new Date().getTime() / 1000)}\n      isReserveInDate={\n        !!data?.dropzone?.currentUser?.user?.rigs?.some((rig) => {\n          const isRigInspected = data.dropzone?.currentUser?.rigInspections?.map((inspection) => inspection?.rig?.id === rig.id);\n          const isRepackInDate = (rig.repackExpiresAt || 0) > (new Date().getTime() / 1000);\n          return isRigInspected && isRepackInDate;\n        })\n      }\n      isRigInspectionComplete={!!data?.dropzone?.currentUser?.rigInspections?.length}\n      isRigSetUp={!!data?.dropzone?.currentUser?.user?.rigs?.length}\n    />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { DropzoneUser, Slot } from '../../graphql/schema';\nimport { useAppSelector } from '../../redux';\n\nconst ManifestScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestScreen'));\nconst LoadScreen = React.lazy(() => import('../../screens/authenticated/load/LoadScreen'));\nconst CreateLoadScreen = React.lazy(() => import('../../screens/authenticated/load/CreateLoadScreen'));\nconst ManifestGroupScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupScreen'));\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  LoadScreen: undefined;\n  CreateLoadScreen: undefined;\n  ManifestGroupScreen: {\n    users?: DropzoneUser[];\n    slots?: Slot[]\n    loadId?: number\n  };\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Loads\" }}/>\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n      <Manifest.Screen name=\"ManifestGroupScreen\" component={ManifestGroupScreen} options={{ title: \"Manifest group\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function PackingScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/PackingScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport PackingScreen from '../../screens/authenticated/packing/PackingScreen';\n\nexport type IPackingTabParams = {\n  PackingScreen: undefined;\n}\n\nconst Packing = createStackNavigator<IPackingTabParams>();\n\nexport default function PackingTab() {\n  return (\n    <Packing.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Packing.Screen name=\"PackingScreen\" component={PackingScreen} />\n    </Packing.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\nimport { useAppSelector } from '../../redux';\n\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nconst RigScreen = React.lazy(() => import('../../screens/authenticated/rig/RigScreen'));\nconst UpdateUserScreen = React.lazy(() => import('../../screens/authenticated/profile/UpdateUserScreen'));\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  RigScreen: undefined;\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentDropzone?.currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n      <Profile.Screen name=\"RigScreen\" component={RigScreen} options={{ title: \"Rig\" }} />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst SettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/SettingsScreen'));\nconst DropzoneSettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneSettingsScreen'));\nconst TicketTypeSettingsScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/TicketTypesScreen'));\nconst CreatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/CreatePlaneScreen'));\nconst UpdatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/UpdatePlaneScreen'));\nconst UpdateDropzoneScreen = React.lazy(() => import('../../screens/authenticated/dropzones/UpdateDropzoneScreen'));\nconst PlanesScreen = React.lazy(() => import('../../screens/authenticated/planes/PlanesScreen'));\nconst RigInspectionTemplateScreen = React.lazy(() => import('../../screens/authenticated/settings/RigInspectionTemplateScreen'));\n\nconst CreateTicketTypeScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/CreateTicketTypeScreen'));\nconst UpdateTicketTypeScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/UpdateTicketTypeScreen'));\n\nconst CreateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/CreateExtraScreen'));\nconst UpdateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/UpdateExtraScreen'));\nconst ExtrasScreen = React.lazy(() => import('../../screens/authenticated/extras/ExtrasScreen'));\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  DropzoneSettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  CreateTicketTypeScreen: undefined;\n  UpdateTicketTypeScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n  RigInspectionTemplateScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"DropzoneSettingsScreen\" component={DropzoneSettingsScreen} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateTicketTypeScreen\" component={CreateTicketTypeScreen} options={{ title: \"New ticket type\" }} />\n      <Settings.Screen name=\"UpdateTicketTypeScreen\" component={UpdateTicketTypeScreen} options={{ title: \"Edit ticket type\" }}/>\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n      <Settings.Screen name=\"RigInspectionTemplateScreen\" component={RigInspectionTemplateScreen} options={{ title: \"Rig Inspection Form\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst UsersScreen = React.lazy(() => import('../../screens/authenticated/users/UsersScreen'));\nconst SearchableAppBar = React.lazy(() => import('../../screens/authenticated/users/AppBar'));\nconst RigInspectionScreen = React.lazy(() => import('../../screens/authenticated/rig/RigInspectionScreen'));\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nimport { useAppDispatch, useAppSelector, usersActions } from '../../redux';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: {\n    select?: boolean;\n    loadId: number;\n    onSelect?(): void;\n  };\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.usersScreen);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(usersActions.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(usersActions.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport PackingTab from \"./tabs/packing\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useRestriction from '../hooks/useRestriction';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(\"readUser\");\n  const canCreatePacks = useRestriction(\"createPackjob\");\n  const canManageDropzone = useRestriction(\"updateDropzone\");\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n        style: {\n          backgroundColor: theme.colors.primary,\n        }\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n      { false && canCreatePacks && (\n        <BottomTab.Screen\n          name=\"Packing\"\n          component={PackingTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"parachute\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { canManageDropzone && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { globalActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation } from '@react-navigation/core';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) =>\n          <Card\n            style={{\n              width: (Dimensions.get(\"window\").width / 2) - 32,\n              margin: 8\n            }}\n            onPress={async ()=> {\n              if (item?.node) {\n                dispatch(\n                  globalActions.setDropzone(item.node)\n                );\n              }\n            }}\n          >\n            <Card.Cover source={{ uri: item?.node?.banner as string }} />\n            <Card.Content>\n              <Title>{item?.node?.name}</Title>\n            </Card.Content>\n          </Card>\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 32,\n    right: 16,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(snackbarActions.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(globalActions.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Text, View } from '../../../components/Themed';\nimport { useAppSelector, useAppDispatch, globalActions, snackbarActions } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              globalActions.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              globalActions.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(snackbarActions.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign in</Text>\n\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button style={styles.button} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 10,\n    width: \"100%\",\n    padding: 96,\n  },\n  button: {\n    marginTop: 10,\n    width: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"./slice\";\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.signup);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          globalActions.setCredentials(payload.credentials)\n        );\n        dispatch(\n          globalActions.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen contentContainerStyle={{ padding: 48, alignItems: \"center\" }}>\n      <Text style={styles.title}>Sign up</Text>\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) =>\n            !newValue || /\\d+/.test(newValue) ? dispatch(actions.setField([\"exitWeight\", parseFloat(newValue || \"0\")])) : null\n          }\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          onPress={() =>\n            onSignUp({\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React, { Suspense } from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator, ProgressBar } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Notifications from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\n\n\n\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  return (\n    <Suspense\n      fallback={\n        <View style={{ flex: 1, flexGrow: 1 }}>\n          <ProgressBar indeterminate color={state?.theme?.colors?.accent} visible />\n        </View>\n      }\n    >\n      <Apollo>\n        <MaterialProvider theme={state.theme}>\n          <SafeAreaProvider>\n            <NavigationContainer\n              linking={LinkingConfiguration}\n              theme={state.theme}>\n              <RootNavigator />\n            </NavigationContainer>\n\n            <StatusBar />\n            <Notifications />\n          </SafeAreaProvider>\n        </MaterialProvider>\n      </Apollo>\n    </Suspense>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}