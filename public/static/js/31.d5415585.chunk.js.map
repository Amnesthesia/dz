{"version":3,"sources":["components/Themed.tsx","components/ScrollableScreen.tsx","components/NoResults.tsx","screens/authenticated/planes/PlanesScreen.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","ScrollableScreen","height","useWindowDimensions","useAppSelector","state","global","styles","container","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","NoResults","title","subtitle","empty","textAlign","padding","display","fab","position","margin","right","bottom","justifyContent","width","QUERY_PLANES","gql","PlanesScreen","useQuery","variables","dropzoneId","Number","currentDropzone","id","data","loading","refetch","navigation","useNavigation","isFocused","useIsFocused","React","refreshControl","refreshing","onRefresh","visible","accent","planes","length","Header","Title","numeric","map","plane","Row","pointerEvents","onPress","navigate","Cell","name","registration","maxSlots","small","icon","label"],"mappings":"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","file":"static/js/31.d5415585.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, RefreshControl } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlanesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n \n\n  return (\n    <ScrollableScreen refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        \n\n          {\n            !data?.planes?.length && (\n              <NoResults\n                title=\"No planes?\"\n                subtitle=\"You need to have at least one plane to manifest loads\"\n              />\n            )\n          }\n\n          { data?.planes?.length && (\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>Name</DataTable.Title>\n                <DataTable.Title numeric>Registration</DataTable.Title>\n                <DataTable.Title numeric>Slots</DataTable.Title>\n              </DataTable.Header>\n              {\n                data?.planes?.map((plane) =>\n                  <DataTable.Row\n                    pointerEvents=\"none\"\n                    onPress={() => navigation.navigate(\"UpdatePlaneScreen\", { plane })}\n                  >\n                    <DataTable.Cell>{plane.name}</DataTable.Cell>\n                    <DataTable.Cell numeric>{plane.registration}</DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {plane.maxSlots}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n              )}\n            </DataTable>\n          )}\n          \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreatePlaneScreen\")}\n        label=\"New plane\"\n      />\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}