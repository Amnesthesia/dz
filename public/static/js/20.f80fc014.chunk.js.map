{"version":3,"sources":["components/notifications/index.ts","graphql/createQuery.tsx","components/PlaneSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","components/DropzoneUserSelect.tsx","components/forms/load/LoadForm.tsx","screens/authenticated/load/CreateLoadScreen.tsx"],"names":["actions","slice","Notifications","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","loading","previousData","refetch","error","transformedData","useMemo","JSON","stringify","useEffect","message","showSnackbarErrors","snackbarActions","showSnackbar","variant","QUERY_PLANES","gql","PlaneSelect","props","useState","isMenuOpen","setMenuOpen","globalState","useAppSelector","state","global","dropzoneId","Number","currentDropzone","id","Menu","onDismiss","visible","anchor","Item","onPress","title","value","name","description","required","right","Icon","icon","planes","map","plane","key","onSelect","registration","QUERY_DROPZONE_USERS","dropzone","dropzoneUsers","DropzoneUserSelect","useQueryDropzoneUsers","permissions","requiredPermissions","Title","label","user","style","width","edges","edge","node","LoadForm","loadForm","TextInput","styles","field","mode","fields","placeholder","autoFocus","onChangeText","newValue","setField","HelperText","type","maxSlots","toString","View","Checkbox","status","isOpen","Divider","marginVertical","dzUser","gca","pilot","StyleSheet","create","flex","marginBottom","MUTATION_CREATE_LOAD","globalSlice","CreateLoadScreen","navigation","useNavigation","useMutation","mutationCreateLoad","validate","React","hasError","setFieldError","onSave","a","async","loadMaster","planeId","pilotId","gcaId","result","createLoad","fieldErrors","errors","length","snackbar","load","goBack","ScrollableScreen","contentContainerStyle","content","MaterialCommunityIcons","size","color","alignSelf","marginTop","Button","button","disabled","paddingHorizontal","fontSize","fontWeight","separator","height"],"mappings":"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","file":"static/js/20.f80fc014.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useEffect, useMemo } from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { snackbarActions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            snackbarActions.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        onError!(error.message);\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Plane, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  required?: boolean;\n  onSelect(plane: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneSelect(props: IPlaneSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"No plane selected\"\n          }\n          description={!props.required ? \"Optional\" : null}\n          right={() => <List.Icon icon=\"airplane\" />}\n        />\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            key={`plane-select-${plane.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane);\n            }}\n            title={\n              plane.name || \"-\"\n            }\n            description={\n              plane.registration\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import React, { useState } from \"react\";\nimport { List, Menu, Title } from \"react-native-paper\";\nimport useQueryDropzoneUsers from \"../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IDropzoneUserSelect {\n  dropzoneId: number;\n  requiredPermissions: string[];\n  value: DropzoneUser | null;\n  required?: boolean;\n  label: string;\n  onSelect(dzUser: DropzoneUser): void;\n}\n\n\n\n\nexport default function DropzoneUserSelect(props: IDropzoneUserSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: props.requiredPermissions\n    }\n  });\n\n  return (\n    <>\n      <Title>{props.label}</Title>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.user?.id ? props.value?.user.name : \"No user selected\"\n            }\n            style={{ width: \"100%\" }}\n            right={() => <List.Icon icon=\"account\" />}\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.edges?.map((edge) => \n            <Menu.Item\n              key={`user-select-${edge?.node!.id}`}\n              style={{ width: \"100%\" }}\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(edge?.node as DropzoneUser);\n              }}\n              title={\n                edge?.node?.user?.name || \"-\"\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport PlaneSelect from '../../PlaneSelect';\nimport DropzoneUserSelect from '../../DropzoneUserSelect';\n\nconst { actions } = slice;\n\n\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.loadForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        autoFocus\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.setField([\"plane\", value]));\n            dispatch(actions.setField([\"maxSlots\", value.maxSlots]));\n          }}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <DropzoneUserSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.setField([\"gca\", dzUser]))}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.setField([\"pilot\", dzUser]))}\n          dropzoneId={Number(globalState.currentDropzone?.id)}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\nimport { useNavigation } from '@react-navigation/core';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/load/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport LoadForm from '../../../components/forms/load/LoadForm';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function CreateLoadScreen() {\n  const { loadForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateLoad, data] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(plane.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane-takeoff\" size={100} color=\"#999999\" style={{ alignSelf: \"center\", marginTop: 32 }} />\n        <LoadForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" style={styles.button} disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  button: {\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}