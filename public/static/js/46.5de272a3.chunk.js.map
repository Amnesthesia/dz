{"version":3,"sources":["screens/authenticated/ticket_types/CreateTicketTypeScreen.tsx"],"names":["actions","slice","MUTATION_CREATE_TICKET_TYPE","globalSlice","gql","CreateTicketTypeScreen","useAppSelector","state","ticketTypeForm","globalState","global","dispatch","useAppDispatch","navigation","useNavigation","useMutation","mutationCreateTicketType","data","isFocused","useIsFocused","React","reset","validate","hasError","fields","name","value","length","setFieldError","cost","altitude","JSON","stringify","onSave","a","async","allowManifestingSelf","extras","isTandem","variables","dropzoneId","Number","currentDropzone","id","extraIds","map","result","createTicketType","fieldErrors","field","message","errors","snackbarActions","showSnackbar","variant","ticketType","snackbar","goBack","contentContainerStyle","paddingHorizontal","size","color","style","alignSelf","styles","mode","disabled","loading","onPress","StyleSheet","create","separator","marginVertical","height","width"],"mappings":"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","file":"static/js/46.5de272a3.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateTicketType, data] = useMutation<Mutation>(MUTATION_CREATE_TICKET_TYPE);\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateTicketType({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n        \n        result?.data?.createTicketType?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"altitude\":\n              return dispatch(actions.setFieldError([\"altitude\", message]));\n            case \"cost\":\n              return dispatch(actions.setFieldError([\"cost\", message]));\n            case \"allow_manifesting_self\":\n              return dispatch(actions.setFieldError([\"allowManifestingSelf\", message]));\n            case \"extras\":\n              return dispatch(actions.setFieldError([\"extras\", message]));\n          }\n        });\n\n        if (result?.data?.createTicketType?.errors?.length) {\n          return dispatch(\n            snackbarActions.showSnackbar({\n              message: result?.data?.createTicketType?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (result.data?.createTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateTicketType]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <TicketTypeForm />\n        <View style={styles.actions}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  actions: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n});\n"],"sourceRoot":""}