{"version":3,"sources":["components/Themed.tsx","components/ScrollableScreen.tsx","components/notifications/index.ts","components/forms/dropzone/DropzoneForm.tsx","screens/authenticated/dropzones/UpdateDropzoneScreen.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","ScrollableScreen","height","useWindowDimensions","useAppSelector","state","global","styles","container","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","actions","slice","Notifications","QUERY_FEDERATIONS","gql","DropzoneForm","dropzoneForm","dispatch","useAppDispatch","useQuery","data","loading","useState","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","useEffect","federations","length","fields","federation","value","setField","JSON","stringify","onPickImage","useCallback","a","async","getDocumentAsync","multiple","type","result","uri","console","log","visible","onDismiss","Title","Content","padding","onColorSelected","sliderComponent","SliderComponent","defaultColor","primaryColor","secondaryColor","undefined","hideSliders","Actions","onPress","disabled","current","accent","next","globalActions","setPrimaryColor","setAccentColor","width","maxHeight","marginVertical","Cover","source","banner","resizeMode","justifyContent","Subheader","subheader","field","mode","label","error","name","onChangeText","newValue","anchor","Item","title","icon","map","left","primary","description","isCreditSystemEnabled","status","isPublic","display","marginBottom","paddingLeft","globalSlice","QUERY_DROPZONE_DETAILS","MUTATION_UPDATE_DROPZONE","UpdateDropzoneScreen","globalState","dropzone","useRoute","params","navigation","useNavigation","variables","dropzoneId","Number","id","React","setOriginal","useMutation","mutationUpdateDropzone","mutation","onSave","hasError","setFieldError","federationId","updateDropzone","fieldErrors","message","errors","snackbarActions","showSnackbar","variant","setDropzone","currentDropzone","snackbar","goBack","indeterminate","fontSize","fontWeight","separator"],"mappings":"yOAMO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAQC,cACRC,EAAiBJ,EAAME,GAE7B,OAAIE,GAGKC,IAAOH,GAAOD,GAYlB,SAASK,EAAKN,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/BW,EAAQZ,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,QAEpE,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEI,SAASJ,IAAYG,IAG9C,SAASI,EAAKd,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/Be,EAAkBhB,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,cAE9E,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEQ,mBAAmBR,IAAYG,M,iCCvC/D,sFAQe,SAASM,EAAiBhB,GAA2B,IAE1DiB,EAAWC,cAAXD,OACAf,EAAUiB,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAAxCnB,MAGR,OACE,kBAAC,IAAD,CAAYK,MAAO,CAACe,EAAOC,UAAW,CAAER,gBAAiBb,EAAMsB,OAAOC,QAASR,OAAQA,EAAU,KAAWjB,EAAMO,OAAQmB,sBAAuB,CAACJ,EAAOK,QAAS3B,EAAM0B,wBACrK1B,EAAM4B,UAKb,IAAMN,EAASO,IAAWC,OAAO,CAC/BP,UAAW,CACTQ,KAAM,GAERJ,QAAS,CACPK,kBAAmB,GACnBC,WAAY,aACZC,SAAU,EACVC,cAAe,O,iCC7BnB,wDAGQC,EAAYC,IAAZD,QAGOE,EAAf,G,kSCSQF,E,OAAYC,EAAZD,QAEFG,EAAoBC,cAAH,qGAQR,SAASC,IAAgB,IAAD,UACGtB,aAAe,SAAAC,GAAK,OAAIA,KAA1CA,EADe,EAC7BsB,aAAqBrB,EADQ,EACRA,OACvBsB,EAAWC,cAFoB,EAGXC,mBAAgBN,GAAlCO,EAH6B,EAG7BA,KAH6B,KAGvBC,QACsCC,oBAAS,IAJxB,WAI9BC,EAJ8B,KAIVC,EAJU,OAKCF,mBAAyC,MAL1C,WAK9BG,EAL8B,KAKjBC,EALiB,KAOrCC,qBAAU,WAAO,IAAD,IACN,MAAJP,GAAA,SAAAA,EAAMQ,eAAN,EAAmBC,QAAU,SAACnC,EAAMoC,OAAOC,aAAb,EAAyBC,OACzDf,EACEP,EAAQuB,SAAS,CAAC,aAAcb,EAAKQ,YAAY,QAGpD,CAACM,KAAKC,UAAL,MAAef,OAAf,EAAeA,EAAMQ,eAEzB,IAAMQ,EAAcC,uBAClB,0BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEyBE,YAAiB,CACpCC,UAAU,EACVC,KAAM,WAJZ,OAEUC,EAFV,OAOI1B,EAASP,EAAQuB,SAAS,CAAC,SAAUU,EAAOC,OAPhD,gDASIC,QAAQC,IAAR,MATJ,kEAYA,CAAC7B,IAGH,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8B,UAAWtB,EACXuB,UAAW,kBAAMtB,EAAe,QAE9B,kBAAC,IAAOuB,MAAR,eAAsC,YAAhBxB,EAA4B,gBAAkB,mBACpE,kBAAC,IAAOyB,QAAR,CAAgBrE,MAAO,CAAEsE,QAAS,GAAI5D,OAAQ,MAC5C,kBAAC,IAAD,CACE6D,gBAAiB,SAAAnE,GACjBgC,EACkB,YAAhBQ,EACIf,EAAQuB,SAAS,CAAC,eAAgBhD,IAClCyB,EAAQuB,SAAS,CAAC,iBAAkBhD,MAG1CJ,MAAO,CAAEwB,KAAM,GACfgD,gBAAiBC,IACjBC,cAA+B,YAAhB9B,EAA4B/B,EAAMoC,OAAO0B,aAAaxB,MAAQtC,EAAMoC,OAAO2B,eAAezB,aAAU0B,EACnHC,aAAW,KAGf,kBAAC,IAAOC,QAAR,KACE,kBAAC,IAAD,CAAQC,QAAS,kBAAMnC,EAAe,QAAtC,UACA,kBAAC,IAAD,CACEoC,SACmB,YAAhBrC,IAA8B/B,EAAMoC,OAAO0B,aAAaxB,OACxC,cAAhBP,IAAgC/B,EAAMoC,OAAO2B,eAAezB,MAE/D6B,QAAS,WACPhB,QAAQC,IAAI,CACViB,QAASpE,EAAOnB,MAAMsB,OAAOkE,OAC7BC,KAAMvE,EAAMoC,OAAO2B,eAAezB,QAGlCf,EADkB,YAAhBQ,EAEAyC,IAAcC,gBAAgBzE,EAAMoC,OAAO0B,aAAaxB,OAIxDkC,IAAcE,eAAe1E,EAAMoC,OAAO2B,eAAezB,QAG7DN,EAAe,QAnBnB,WA2BR,kBAAC,IAAD,CAAM7C,MAAO,CAAEwF,MAAO,OAAQC,UAAW,IAAKC,eAAgB,KAC5D,kBAAC,IAAKC,MAAN,CACEC,OAAQ,CAAE7B,IAAKlD,EAAMoC,OAAO4C,OAAO1C,OAAS,6BAC5C2C,WAAW,UAEb,kBAAC,IAAKf,QAAN,CAAc/E,MAAO,CAAE+F,eAAgB,aACrC,kBAAC,IAAD,CAAQf,QAASzB,GAAjB,YAGJ,kBAAC,IAAD,CAAMvD,MAAO,CAAEwF,MAAO,OAAQE,eAAgB,GAAIjE,kBAAmB,KACnE,kBAAC,IAAKuE,UAAN,CAAgBhG,MAAOe,EAAOkF,WAA9B,YACA,kBAAC,IAAD,CACEjG,MAAOe,EAAOmF,MACdC,KAAK,WACLC,MAAM,OACNC,QAASxF,EAAMoC,OAAOqD,KAAKD,MAC3BlD,MAAOtC,EAAMoC,OAAOqD,KAAKnD,OAAS,GAClCoD,aAAc,SAACC,GAAD,OAAcpE,EAASP,EAAQuB,SAAS,CAAC,OAAQoD,QAEjE,kBAAC,IAAD,CAAY3C,KAAK,SACbhD,EAAMoC,OAAOqD,KAAKD,OAAS,IAK/B,kBAAC,IAAKL,UAAN,CAAgBhG,MAAOe,EAAOkF,WAA9B,cAEA,kBAAC,IAAD,CACE9B,UAAW,kBAAMxB,GAAsB,IACvCuB,QAASxB,EACT+D,OACE,kBAAC,IAAKC,KAAN,CACE1B,QAAS,kBAAMrC,GAAsB,IACrCgE,OAAO,SAAA9F,EAAMoC,SAAN,WAAcC,aAAd,WAA0BC,YAA1B,IAAiCmD,OAAQ,GAChDM,KAAK,eAPX,MAUIrE,GAVJ,SAUIA,EAAMQ,kBAVV,EAUI,EAAmB8D,KAAI,SAAC3D,GAAD,OACrB,kBAAC,IAAKwD,KAAN,CACEC,MAAOzD,EAAWoD,KAClBtB,QAAS,WACP5C,EAASP,EAAQuB,SAAS,CAAC,aAAcF,KACzCP,GAAsB,UAMhC,kBAAC,IAAD,CAAYkB,KAAK,SACbhD,EAAMoC,OAAOC,WAAWmD,OAAS,IAErC,kBAAC,IAAKL,UAAN,CAAgBhG,MAAOe,EAAOkF,WAA9B,YACA,kBAAC,IAAKS,KAAN,CACEC,MAAM,gBACN3B,QAAS,kBAAMnC,EAAe,YAC9BiE,KAAM,kBACJ,kBAAC,IAAD,CACE9G,MAAO,CACLwF,MAAO,GACP9E,OAAQ,GACRF,gBAAiBM,EAAOnB,MAAMsB,OAAO8F,cAK7C,kBAAC,IAAKL,KAAN,CACEC,MAAM,kBACN3B,QAAS,kBAAMnC,EAAe,cAC9BiE,KAAM,kBACJ,kBAAC,IAAD,CACE9G,MAAO,CACLwF,MAAO,GACP9E,OAAQ,GACRF,gBAAiBM,EAAOnB,MAAMsB,OAAOkE,aAM7C,kBAAC,IAAKuB,KAAN,CACEC,MAAM,oBACNK,YAAY,4GACZhC,QAAS,kBACP5C,EAASP,EAAQuB,SAAS,CAAC,yBAA0BvC,EAAMoC,OAAOgE,sBAAsB9D,UAE1F2D,KAAM,kBACJ,kBAAC,IAAD,CACE9B,QAAS,kBACP5C,EAASP,EAAQuB,SAAS,CAAC,yBAA0BvC,EAAMoC,OAAOgE,sBAAsB9D,UAE1F+D,OAAQrG,EAAMoC,OAAOgE,sBAAsB9D,MACrC,UACA,iBAMZ,kBAAC,IAAKuD,KAAN,CACEC,MAAM,SACNK,YAAY,qEACZhC,QAAS,kBACP5C,EAASP,EAAQuB,SAAS,CAAC,YAAavC,EAAMoC,OAAOkE,SAAShE,UAEhE2D,KAAM,kBACJ,kBAAC,IAAD,CACE9B,QAAS,kBACP5C,EAASP,EAAQuB,SAAS,CAAC,YAAavC,EAAMoC,OAAOkE,SAAShE,UAEhE+D,OAAQrG,EAAMoC,OAAOkE,SAAShE,MACxB,UACA,mBASpB,IAAMpC,EAASO,IAAWC,OAAO,CAC/B0B,OAAQ,CACNtB,SAAU,EACVyF,QAAS,OACT5B,MAAO,QAETU,MAAO,CACLmB,aAAc,EACd7B,MAAO,QAETS,UAAW,CACTqB,YAAa,M,+0BC/NTzF,EAAYC,IAAZD,QACSwD,EAAkBkC,IAA3B1F,QAEF2F,EAAyBvF,cAAH,uTAqBtBwF,EAA2BxF,cAAH,w2BA6Cf,SAASyF,IAAwB,IAAD,EACvC7G,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAMsB,gBACtCwF,EAAc/G,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAC5CsB,EAAWC,cAGXuF,EADQC,qBACSC,OAAQF,SACzBG,EAAaC,0BAP0B,EASnB1F,mBAAgBkF,EAAwB,CAChES,UAAW,CAAEC,WAAYC,OAAOP,EAASQ,OADnC7F,EATqC,EASrCA,KAAMC,EAT+B,EAS/BA,QAId6F,aAAgB,WAAO,IAAD,EACpB,MAAI9F,GAAJ,SAAIA,EAAMqF,WAAN,EAAgBQ,IAClBhG,EAASP,EAAQyG,YAAY/F,EAAKqF,aAEnC,OAACrF,GAAD,SAACA,EAAMqF,eAAP,EAAC,EAAgBQ,KAjByB,MAmBFG,sBAAsBd,GAnBpB,WAmBtCe,EAnBsC,KAmBdC,EAnBc,KAqBvCC,EAASL,eAAkB,gFAAA5E,EAAAC,OAAA,mDAC3BiF,GAAW,EADgB,EAEqE9H,EAAMoC,OAAlGqD,EAFuB,EAEvBA,KAAMT,EAFiB,EAEjBA,OAAQ3C,EAFS,EAETA,WAAYyB,EAFH,EAEGA,aAAcC,EAFjB,EAEiBA,eAAgBqC,EAFjC,EAEiCA,sBAAuBE,EAFxD,EAEwDA,UAEnF,SAACb,EAAKnD,SAAL,EAAYH,SAAU,SAAAsD,EAAKnD,YAAL,IAAYH,QAAS,KAC9C2F,GAAW,EACXvG,EACEP,EAAQ+G,cAAc,CAAC,OAAQ,wBAI9BD,EAX0B,4CAAAlF,EAAA,MAaN+E,EAAuB,CAC1CP,UAAW,CACTG,GAAID,OAAM,MAACP,OAAD,EAACA,EAAUQ,IACrB9B,KAAMA,EAAKnD,MACX0C,OAAQA,EAAO1C,OAAS,KACxBwB,aAAcA,EAAaxB,MAC3ByB,eAAgBA,EAAezB,MAC/B0F,aAAcV,OAAM,MAACjF,GAAD,SAACA,EAAYC,YAAb,EAAC,EAAmBiF,IACxCnB,wBAAyBA,EACzBE,WAAYA,MAtBW,UA0BrB,OAbArD,EAbqB,SA0B3B,SAAAA,EAAQvB,OAAR,WAAcuG,iBAAd,WAA8BC,cAA9B,EAA2ClC,KAAI,YAAyB,IAAtBX,EAAqB,EAArBA,MAAO8C,EAAc,EAAdA,QACvD,OAAQ9C,GACN,IAAK,aACL,IAAK,gBACH,OAAO9D,EAASP,EAAQ+G,cAAc,CAAC,aAAcI,KACvD,IAAK,SACH,OAAO5G,EAASP,EAAQ+G,cAAc,CAAC,SAAUI,KACnD,IAAK,gBACH,OAAO5G,EAASP,EAAQ+G,cAAc,CAAC,eAAgBI,KACzD,IAAK,kBACH,OAAO5G,EAASP,EAAQ+G,cAAc,CAAC,iBAAkBI,KAC3D,IAAK,2BACH,OAAO5G,EAASP,EAAQ+G,cAAc,CAAC,wBAAyBI,KAClE,IAAK,OACH,OAAO5G,EAASP,EAAQ+G,cAAc,CAAC,OAAQI,KACjD,IAAK,YACH,OAAO5G,EAASP,EAAQ+G,cAAc,CAAC,WAAYI,SA1C9B,MA6CvBlF,GA7CuB,SA6CvBA,EAAQvB,OA7Ce,SA6CvB,EAAcuG,iBA7CS,SA6CvB,EAA8BG,UAA9B,EAAsCjG,OA7Cf,0CA8ClBZ,EAAS8G,IAAgBC,aAAa,CAC3CH,QAAO,MAAElF,GAAF,SAAEA,EAAQvB,OAAV,SAAE,EAAcuG,qBAAhB,EAAE,EAA8BG,OAAO,GAC9CG,QAAS,YAhDc,QAkDhB,MAACtF,GAAD,SAACA,EAAQvB,OAAT,SAAC,EAAcuG,iBAAf,SAAC,EAA8BC,cAA9B,EAA2C/F,QAErD,SAAIc,EAAOvB,OAAX,SAAI,EAAauG,iBAAb,EAA6BlB,WAC/BxF,EACEiD,EAAcgE,YAAd,OACM1B,EAAY2B,iBAAmB,IADrC,MAEKxF,GAFL,SAEKA,EAAQvB,OAFb,SAEK,EAAcuG,qBAFnB,EAEK,EAA8BlB,YAGrCxF,EACEmH,IAASJ,aAAa,CAAEH,QAAQ,QAAUI,QAAS,aAErDrB,EAAWyB,UA9DY,0DAkE3BpH,EACEmH,IAASJ,aAAa,CAAEH,QAAS,KAAMA,QAASI,QAAS,WAnEhC,mEAwE9B,CAAC/F,KAAKC,UAAUzC,EAAMoC,QAASb,EAAUoG,IAE5C,OACE,gCACA,gBAAC,IAAD,CAAaiB,eAAa,EAACrJ,MAAOuH,EAAYhI,MAAMsB,OAAOkE,OAAQjB,QAAS1B,IAC5E,gBAAC,IAAD,CAAkBrB,sBAAuBJ,EAAOK,SAC9C,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAMpB,MAAOe,EAAOkC,QAClB,gBAAC,IAAD,CAAQkD,KAAK,YAAYlB,SAAUwD,EAASjG,QAASwC,QAAS0D,EAAQlG,QAASiG,EAASjG,SAAxF,WASR,IAAMzB,EAASO,IAAWC,OAAO,CAC/BP,UAAW,CACTQ,KAAM,EACNhB,gBAAiB,QACjB4G,QAAS,QAEXhG,QAAS,CACPgG,QAAS,OACTzF,SAAU,EACVD,WAAY,SACZ4C,QAAS,IAEXqC,MAAO,CACL+C,SAAU,GACVC,WAAY,QAEdC,UAAW,CACTlE,eAAgB,GAChBhF,OAAQ,EACR8E,MAAO,OAETvC,OAAQ,CACNuC,MAAO,MACP6B,aAAc,IAEhBnB,MAAO,CACLmB,aAAc","file":"static/js/26.1287426d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={{ width: \"100%\", marginVertical: 16, paddingHorizontal: 16 }}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, ProgressBar } from 'react-native-paper';\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Dropzone, Mutation, Query } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\nconst QUERY_DROPZONE_DETAILS = gql`\n  query QueryDropzoneDetails($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateDropzoneScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const route = useRoute<{ key: string, name: string, params: { dropzone: Dropzone }}>();\n  const dropzone = route.params!.dropzone;\n  const navigation = useNavigation();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_DETAILS, {\n    variables: { dropzoneId: Number(dropzone.id)}\n  });\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(actions.setOriginal(data.dropzone));\n    }\n  }, [data?.dropzone?.id]);\n\n  const [mutationUpdateDropzone, mutation] = useMutation<Mutation>(MUTATION_UPDATE_DROPZONE);\n\n  const onSave = React.useCallback(async () => {\n    let hasError = false;\n    const { name, banner, federation, primaryColor, secondaryColor, isCreditSystemEnabled, isPublic } = state.fields;\n\n    if (!name.value?.length || name.value?.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (!hasError) {\n      try {\n        const result = await mutationUpdateDropzone({\n          variables: {\n            id: Number(dropzone?.id),\n            name: name.value,\n            banner: banner.value || null,\n            primaryColor: primaryColor.value,\n            secondaryColor: secondaryColor.value,\n            federationId: Number(federation?.value?.id),\n            isCreditSystemEnabled: !!isCreditSystemEnabled,\n            isPublic: !!isPublic\n          }\n        });\n\n        result?.data?.updateDropzone?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"federation\":\n            case \"federation_id\":\n              return dispatch(actions.setFieldError([\"federation\", message]));\n            case \"banner\":\n              return dispatch(actions.setFieldError([\"banner\", message]));\n            case \"primary_color\":\n              return dispatch(actions.setFieldError([\"primaryColor\", message]));\n            case \"secondary_color\":\n              return dispatch(actions.setFieldError([\"secondaryColor\", message]));\n            case \"is_credit_system_enabled\":\n              return dispatch(actions.setFieldError([\"isCreditSystemEnabled\", message]));\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"is_public\":\n              return dispatch(actions.setFieldError([\"isPublic\", message]));\n          }\n        });\n        if (result?.data?.updateDropzone?.errors?.length) {\n          return dispatch(snackbarActions.showSnackbar({\n            message: result?.data?.updateDropzone?.errors[0],\n            variant: \"error\"\n          }));\n        } else if (!result?.data?.updateDropzone?.fieldErrors?.length) {\n          // No errors:\n          if (result.data?.updateDropzone?.dropzone) {\n            dispatch(\n              globalActions.setDropzone({\n                ...(globalState.currentDropzone || {}),\n                ...result?.data?.updateDropzone?.dropzone,\n              })\n            );\n            dispatch(\n              snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n            );\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateDropzone]);\n\n  return (\n    <>\n    <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      <DropzoneForm />\n      <View style={styles.fields}>\n        <Button mode=\"contained\" disabled={mutation.loading} onPress={onSave} loading={mutation.loading}>\n          Save\n        </Button>\n      </View>\n    </ScrollableScreen>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n    display: \"flex\",\n  },\n  content: {\n    display: \"flex\",\n    flexGrow: 1,\n    alignItems: 'center',\n    padding: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}