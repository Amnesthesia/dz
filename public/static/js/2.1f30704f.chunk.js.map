{"version":3,"sources":["DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","components/DatePicker.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/RigDialog.tsx","components/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","context.ts","internal.ts","MaterialCommunityIcon.tsx","TabsHeaderItem.tsx","TabsHeader.tsx","Swiper.tsx","Tabs.tsx","TabScreen.tsx","components/forms/credits/CreditsForm.tsx","components/dialogs/CreditsDialog.tsx","screens/authenticated/profile/ProfileScreen.tsx"],"names":["DataTableCell","rest","style","styles","numeric","numberOfLines","StyleSheet","container","flex","flexDirection","alignItems","right","justifyContent","DataTableHeader","borderBottomColor","color","theme","header","height","paddingHorizontal","borderBottomWidth","withTheme","DataTableTitle","spinAnim","React","Animated","sortDirection","current","toValue","duration","useNativeDriver","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","size","direction","I18nManager","disabled","onPress","alignContent","paddingVertical","cell","lineHeight","fontSize","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","paddingLeft","label","marginRight","borderStyle","minHeight","content","pointerEvents","DataTable","width","DatePicker","props","open","setOpen","date","onChange","getTime","onDismiss","visible","anchor","Item","title","description","timestamp","format","left","Icon","selectedDays","Date","onDayClick","actions","slice","RigForm","state","useAppSelector","rigForm","dispatch","useAppDispatch","View","TextInput","field","mode","error","fields","make","value","onChangeText","newValue","setField","HelperText","type","model","serial","canopySize","toString","keyboardType","Number","repackExpiresAt","time","create","marginBottom","MUTATION_CREATE_RIG","gql","MUTATION_UPDATE_RIG","RigDialog","globalState","global","useMutation","mutationCreateRig","createData","mutationUpdateRig","updateData","validate","useCallback","hasErrors","setFieldError","JSON","stringify","onSave","a","async","mutation","original","id","variables","userId","dropzoneId","response","result","data","updateRig","createRig","fieldErrors","map","message","errors","length","snackbarActions","showSnackbar","variant","onSuccess","Portal","Dialog","dismissable","ProgressBar","indeterminate","loading","colors","accent","Title","Content","Actions","Button","reset","onClose","QUERY_ROLES","RoleSelect","useState","isMenuOpen","setMenuOpen","useQuery","currentDropzone","refetch","Subheader","Menu","undefined","required","dropzone","roles","role","onSelect","DropzoneUserForm","dropzoneUserForm","canUpdateRole","useRestriction","newRole","expiresAt","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","dropzoneUserId","updateDropzoneUser","TabsContext","goTo","index","getIndicatorStyle","num","scaleX","translateX","roundToTwo","Math","MaterialCommunityIcons","require","isErrorLogged","test","e","console","selectable","backgroundColor","AnimatedText","TabsHeaderItem","showTextLabel","rippleColor","Color","active","opacity","useAnimatedText","position","offset","activeColor","tabIndex","childrenCount","key","tab","onLayout","onTabLayout","onPressIn","iconPosition","accessibilityTraits","accessibilityRole","accessibilityComponentType","accessibilityLabel","accessibilityState","selected","testID","accessibilityElementsHidden","importantForAccessibility","uppercase","tabRoot","tabRootFixed","touchableRipple","touchableRippleTop","touchableRippleInner","paddingRight","minWidth","maxWidth","touchableRippleInnerTop","iconContainer","text","textAlign","letterSpacing","Platform","web","transitionDuration","transitionProperty","default","textTop","marginTop","TabsHeader","dark","themeMode","elevation","restStyle","customBackground","isDarkTheme","overlay","hasPrimaryBackground","isDark","innerScrollSize","scrollX","scrollRef","layouts","indicatorRef","updateIndicator","cl","useIndicator","tabsLayout","children","onTabsLayout","setTabsLayout","event","layout","updateScroll","scrollType","tabsWidth","scrolledX","next","prev","relativeX","overflowLeft","overflowRight","x","y","animated","relative","ref","contentContainerStyle","onContentSizeChange","onScroll","scrollEventThrottle","horizontal","showsHorizontalScrollIndicator","alwaysBounceHorizontal","scrollEnabled","scrollablePadding","top","removeTopShadow","zIndex","tabs","tabsTopIcon","fixedContentContainerStyle","indicator","bottom","transformOrigin","willChange","root","defaultIndex","ind","setIndex","onChangeIndex","currentScreen","renderProps","showLeadingSpace","cache","c","set","k","get","createCache","getDefaultIndex","onInnerChangeIndex","newIndex","persistKey","TabScreen","CreditsForm","creditsForm","currentCredits","credits","amount","subtotal","status","paddingTop","Divider","Row","Cell","Text","MUTATION_CREATE_TRANSACTION","mutationCreateTransaction","QUERY_DROPZONE_USER","ProfileScreen","navigation","useNavigation","creditsDialogOpen","setCreditsDialogOpen","rigDialogOpen","setRigDialogOpen","dropzoneUserDialogOpen","setDropzoneUserDialogOpen","route","useRoute","isSelf","currentUser","params","ScrollableScreen","Card","card","dropzoneUser","user","email","phone","license","exitWeight","navigate","Header","rigs","rig","setOriginal","onLongPress","join","IconButton","rigInspections","some","insp","isOk","successColor","warningColor","transactions","edges","edge","node","fontStyle","createdAt","globalActions","logout","flexGrow","paddingBottom","margin","display","spacer","fab","separator","marginVertical"],"mappings":"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","file":"static/js/2.1f30704f.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\n\nconst { actions } = slice;\n\nexport default function RigForm() {\n  const state = useAppSelector(state => state.rigForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <View>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n      <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.repackExpiresAt.error || \"\" }\n      </HelperText>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport { result } from \"lodash\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { rigForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.rigForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"repackExpiresAt\", \"You must select a repack date in the future\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: Number(state.original?.id) } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(rigForm.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(rigForm.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(rigForm.setFieldError([\"serial\", message]));\n          case \"canopy_size\":\n            return dispatch(rigForm.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(rigForm.setFieldError([\"repackExpiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, mutationUpdateRig, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false}>\n        <ProgressBar indeterminate visible={createData.loading || updateData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <RigForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(rigForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Query, UserRole } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport RoleSelect from '../../RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function DropzoneUserForm() {\n  const { dropzoneUserForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermission\");\n\n  return ( \n    <>\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { dropzoneUserForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.dropzoneUserForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    \n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = response.data?.updateDropzoneUser;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(dropzoneUserForm.setFieldError([\"role\", message]));\n          case \"expires_at\":\n            return dispatch(dropzoneUserForm.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} dropzone user`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(dropzoneUserForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { useContext } from 'react';\n\nexport const TabsContext = React.createContext<{\n  goTo: (index: number) => void;\n  index: number;\n}>({\n  goTo: () => null,\n  index: 0,\n});\n\nexport function useTabNavigation() {\n  return useContext(TabsContext).goTo;\n}\nexport function useTabIndex() {\n  return useContext(TabsContext).index;\n}\n","import * as React from 'react';\nimport type { TextStyle, View, ViewStyle } from 'react-native';\nimport type {\n  AnimatedColorArgs,\n  IndicatorArgs,\n  IndicatorReturns,\n  OffsetScrollArgs,\n} from './utils';\n\nfunction getIndicatorStyle({\n  left,\n  width,\n}: {\n  left: number;\n  width: number;\n}): ViewStyle {\n  return {\n    transform: [\n      { scaleX: width },\n      { translateX: roundToTwo(left / width) || 0 },\n    ],\n  };\n}\n\nfunction roundToTwo(num: number) {\n  return Math.round(num * 100 + Number.EPSILON) / 100;\n}\n\nexport function useIndicator({\n  index,\n  layouts,\n}: IndicatorArgs): IndicatorReturns {\n  const indicatorRef = React.useRef<View>(null);\n  const updateIndicator = React.useCallback(() => {\n    if (!indicatorRef.current || !layouts.current) {\n      return;\n    }\n    const cl = layouts.current[index];\n    if (cl) {\n      indicatorRef.current.setNativeProps({\n        style: getIndicatorStyle({ left: cl.x, width: cl.width }),\n      });\n    }\n  }, [index, indicatorRef, layouts]);\n\n  return [indicatorRef, updateIndicator, null];\n}\n\nexport function useOffsetScroller(_: OffsetScrollArgs) {}\nexport function useAnimatedText({\n  activeColor,\n  active,\n  textColor,\n}: AnimatedColorArgs): TextStyle {\n  return React.useMemo(\n    () => ({\n      color: active ? activeColor : textColor,\n      opacity: active ? 1 : 0.6,\n    }),\n    [active, activeColor, textColor]\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet, Animated } from 'react-native';\n\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = Animated.createAnimatedComponent(\n    require('react-native-vector-icons/MaterialCommunityIcons').default\n  );\n} catch (e) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  // @ts-ignore\n  MaterialCommunityIcons = ({ name, ...rest }) => {\n    /* eslint-disable no-console */\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          e.message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from 'react-native-paper-tabs', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      <Animated.Text {...rest} selectable={false}>\n        □\n      </Animated.Text>\n    );\n  };\n}\n\nconst defaultIcon = ({ name, color, size, style, ...rest }: any) => (\n  <MaterialCommunityIcons\n    selectable={false}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        lineHeight: size,\n      },\n      styles.icon,\n      style,\n    ]}\n    {...rest}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n","import * as React from 'react';\nimport {\n  LayoutChangeEvent,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n  TextProps,\n} from 'react-native';\nimport { Text, TouchableRipple } from 'react-native-paper';\nimport type { ReactElement } from 'react';\nimport type { TabScreenProps } from './TabScreen';\nimport type { Theme } from 'react-native-paper/lib/typescript/types';\nimport Color from 'color';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport { useAnimatedText } from './internal';\nimport type { IconPosition, Mode } from './utils';\nconst AnimatedText = Animated.createAnimatedComponent<\n  React.ComponentType<TextProps>\n>(Text as any);\n\nexport default function TabsHeaderItem({\n  tab,\n  tabIndex,\n  active,\n  goTo,\n  onTabLayout,\n  activeColor,\n  textColor,\n  theme,\n  position,\n  offset,\n  childrenCount,\n  uppercase,\n  mode,\n  iconPosition,\n  showTextLabel,\n}: {\n  tab: ReactElement<TabScreenProps>;\n  tabIndex: number;\n  active: boolean;\n  goTo: (index: number) => void;\n  onTabLayout: (index: number, e: LayoutChangeEvent) => void;\n  activeColor: string;\n  textColor: string;\n  theme: Theme;\n  position: Animated.Value | undefined;\n  offset: Animated.Value | undefined;\n  childrenCount: number;\n  uppercase?: boolean;\n  iconPosition?: IconPosition;\n  showTextLabel?: boolean;\n  mode: Mode;\n}) {\n  const rippleColor = React.useMemo(\n    () =>\n      Color(activeColor as any)\n        .alpha(0.32)\n        .rgb()\n        .string(),\n    [activeColor]\n  );\n\n  const { color, opacity } = useAnimatedText({\n    active,\n    position,\n    offset,\n    activeColor,\n    textColor,\n    tabIndex,\n    childrenCount,\n  });\n\n  return (\n    <View\n      key={tab.props.label}\n      style={[styles.tabRoot, mode === 'fixed' && styles.tabRootFixed]}\n      onLayout={(e) => onTabLayout(tabIndex, e)}\n    >\n      <TouchableRipple\n        onPress={() => goTo(tabIndex)}\n        onPressIn={() => {}}\n        style={[\n          styles.touchableRipple,\n          iconPosition === 'top' && styles.touchableRippleTop,\n        ]}\n        rippleColor={rippleColor}\n        // @ts-ignore\n        accessibilityTraits={'button'}\n        accessibilityRole=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={tab.props.label}\n        accessibilityState={{ selected: active }}\n        testID={`tab_${tabIndex}`}\n      >\n        <View\n          style={[\n            styles.touchableRippleInner,\n            iconPosition === 'top' && styles.touchableRippleInnerTop,\n          ]}\n        >\n          {tab.props.icon ? (\n            <View\n              style={[\n                styles.iconContainer,\n                iconPosition !== 'top' && styles.marginRight,\n              ]}\n            >\n              <MaterialCommunityIcon\n                selectable={false}\n                accessibilityElementsHidden={true}\n                importantForAccessibility=\"no\"\n                name={tab.props.icon || ''}\n                style={{ color: color, opacity }}\n                size={24}\n              />\n            </View>\n          ) : null}\n          {showTextLabel ? (\n            <AnimatedText\n              selectable={false}\n              style={[\n                styles.text,\n                iconPosition === 'top' && styles.textTop,\n                { ...theme.fonts.medium, color, opacity },\n              ]}\n            >\n              {uppercase ? tab.props.label.toUpperCase() : tab.props.label}\n            </AnimatedText>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabRoot: { position: 'relative' },\n  tabRootFixed: { flex: 1 },\n  touchableRipple: {\n    height: 48,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchableRippleTop: {\n    height: 72,\n  },\n  touchableRippleInner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingRight: 16,\n    paddingLeft: 16,\n    minWidth: 90,\n    maxWidth: 360,\n  },\n  touchableRippleInnerTop: {\n    flexDirection: 'column',\n  },\n  iconContainer: {\n    width: 24,\n    height: 24,\n  },\n  text: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    ...Platform.select({\n      web: {\n        transitionDuration: '150ms',\n        transitionProperty: 'all',\n      },\n      default: {},\n    }),\n  },\n  textTop: { marginTop: 6 },\n  marginRight: { marginRight: 8 },\n});\n","import type { SwiperRenderProps } from './utils';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  Platform,\n  ScrollView,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\nimport { overlay, Surface } from 'react-native-paper';\nimport color from 'color';\nimport * as React from 'react';\nimport { useIndicator, useOffsetScroller } from './internal';\nimport TabsHeaderItem from './TabsHeaderItem';\n\nexport default function TabsHeader({\n  index,\n  goTo,\n  children,\n  position,\n  offset,\n  theme,\n  dark,\n  style,\n  iconPosition,\n  showTextLabel,\n  showLeadingSpace,\n  uppercase,\n  mode,\n}: SwiperRenderProps) {\n  const { colors, dark: isDarkTheme, mode: themeMode } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && themeMode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  let hasPrimaryBackground = colors.primary === backgroundColor;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : // @ts-ignore\n          !color(backgroundColor).isLight();\n  }\n  const textColor = isDark ? '#fff' : '#000';\n  const activeColor = hasPrimaryBackground ? textColor : theme.colors.primary;\n\n  const innerScrollSize = React.useRef<number | null>(null);\n  const scrollX = React.useRef<number>(0);\n  const scrollRef = React.useRef<ScrollView>(null);\n  const layouts = React.useRef<Record<string, LayoutRectangle> | null>(null);\n  const [tabsLayout, setTabsLayout] = React.useState<LayoutRectangle | null>(\n    null\n  );\n  const [indicatorRef, updateIndicator, indicatorStyle] = useIndicator({\n    tabsLayout,\n    layouts,\n    index,\n    offset,\n    position,\n    childrenCount: children.length,\n  });\n\n  const onTabsLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      setTabsLayout(e.nativeEvent.layout);\n    },\n    [setTabsLayout]\n  );\n\n  const onTabLayout = React.useCallback(\n    (tabIndex: number, event: LayoutChangeEvent) => {\n      layouts.current = {\n        ...layouts.current,\n        [tabIndex]: event.nativeEvent.layout,\n      };\n      updateIndicator();\n    },\n    [layouts, updateIndicator]\n  );\n\n  const updateScroll = React.useCallback(\n    (scrollType?: 'next' | 'prev') => {\n      if (!layouts.current || mode !== 'scrollable') {\n        return;\n      }\n      let cl = layouts.current[index];\n\n      if (!cl || !scrollRef.current || !tabsLayout) {\n        return;\n      }\n\n      const tabsWidth = tabsLayout.width;\n      let scrolledX = scrollX.current;\n      // console.log({ scrolledX, scrollType });\n      if (scrollType === 'next') {\n        const next = layouts.current?.[index + 1];\n        if (next) {\n          cl = next;\n        }\n      } else if (scrollType === 'prev') {\n        const prev = layouts.current?.[index - 1];\n        if (prev) {\n          cl = prev;\n        }\n      }\n      const relativeX = cl.x - scrolledX;\n      const overflowLeft = relativeX;\n      const overflowRight = -tabsWidth + relativeX + cl.width;\n\n      if (overflowRight > -50) {\n        scrollRef.current.scrollTo({\n          x: scrolledX + overflowRight + 50,\n          y: 0,\n          animated: true,\n        });\n      } else if (overflowLeft < 50) {\n        scrollRef.current.scrollTo({\n          x: scrolledX + overflowLeft - 50,\n          y: 0,\n          animated: true,\n        });\n      }\n    },\n    [mode, layouts, index, scrollRef, scrollX, tabsLayout]\n  );\n\n  // subscribes to offset on native devices to scroll tab bar faster when scrolling (iOS only since Android bugs)\n  useOffsetScroller({ updateScroll, index, offset, mode });\n\n  // updates scroll when index changes (updateScroll function changes to new reference when index changes)\n  React.useEffect(() => {\n    updateScroll();\n  }, [updateScroll]);\n\n  // update indicator when index changes (updateIndicator function changes to new reference when index changes)\n  React.useEffect(() => {\n    updateIndicator();\n  }, [updateIndicator]);\n\n  return (\n    <View style={styles.relative}>\n      <Surface\n        style={[\n          { backgroundColor, elevation },\n          restStyle,\n          styles.tabs,\n          iconPosition === 'top' && styles.tabsTopIcon,\n        ]}\n        onLayout={onTabsLayout}\n      >\n        <ScrollView\n          ref={scrollRef}\n          contentContainerStyle={\n            mode === 'fixed' ? styles.fixedContentContainerStyle : undefined\n          }\n          onContentSizeChange={(e) => {\n            innerScrollSize.current = e;\n          }}\n          onScroll={(e) => {\n            scrollX.current = e.nativeEvent.contentOffset.x;\n          }}\n          scrollEventThrottle={25}\n          horizontal={true}\n          showsHorizontalScrollIndicator={false}\n          alwaysBounceHorizontal={mode === 'scrollable'}\n          scrollEnabled={mode === 'scrollable'}\n        >\n          {mode === 'scrollable' && showLeadingSpace ? (\n            <View style={styles.scrollablePadding} />\n          ) : null}\n\n          {React.Children.map(children, (tab, tabIndex) => (\n            <TabsHeaderItem\n              theme={theme}\n              tabIndex={tabIndex}\n              tab={tab}\n              active={index === tabIndex}\n              onTabLayout={onTabLayout}\n              goTo={goTo}\n              activeColor={activeColor}\n              textColor={textColor}\n              position={position}\n              offset={offset}\n              childrenCount={children.length}\n              uppercase={uppercase}\n              iconPosition={iconPosition}\n              showTextLabel={showTextLabel}\n              mode={mode}\n            />\n          ))}\n          <Animated.View\n            ref={indicatorRef}\n            pointerEvents=\"none\"\n            style={[\n              styles.indicator,\n              {\n                backgroundColor: activeColor,\n              },\n              indicatorStyle,\n            ]}\n          />\n        </ScrollView>\n        <Animated.View\n          style={[\n            styles.removeTopShadow,\n            {\n              height: elevation,\n              backgroundColor,\n              top: -elevation,\n            },\n          ]}\n        />\n      </Surface>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  relative: { position: 'relative' },\n  removeTopShadow: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    zIndex: 2,\n  },\n  scrollablePadding: {\n    width: 52,\n  },\n  tabs: {\n    height: 48,\n  },\n  tabsTopIcon: {\n    height: 72,\n  },\n  fixedContentContainerStyle: {\n    flex: 1,\n  },\n  indicator: {\n    position: 'absolute',\n    height: 2,\n    width: 1,\n    left: 0,\n    bottom: 0,\n    ...Platform.select({\n      web: {\n        backgroundColor: 'transparent',\n        transitionDuration: '150ms',\n        transitionProperty: 'all',\n        transformOrigin: 'left',\n        willChange: 'transform',\n      },\n      default: {},\n    }),\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport type { SwiperProps } from './utils';\nimport type { TabScreenProps } from './TabScreen';\nimport { TabsContext } from './context';\nimport TabsHeader from './TabsHeader';\n\nfunction Swiper(props: SwiperProps) {\n  const {\n    theme,\n    dark,\n    style,\n    defaultIndex,\n    onChangeIndex,\n    iconPosition,\n    showTextLabel,\n    showLeadingSpace,\n    uppercase,\n    mode,\n  } = props;\n  const [index, setIndex] = React.useState<number>(defaultIndex || 0);\n  const goTo = React.useCallback(\n    (ind: number) => {\n      setIndex(ind);\n      onChangeIndex(ind);\n    },\n    [setIndex, onChangeIndex]\n  );\n\n  let children: React.Component<TabScreenProps>[] = props.children;\n\n  const currentScreen = children[index];\n  if (!currentScreen || !currentScreen) {\n    return null;\n  }\n  const renderProps = {\n    index,\n    goTo,\n    children,\n    theme,\n    dark,\n    style,\n    offset: undefined,\n    position: undefined,\n    iconPosition,\n    showTextLabel,\n    showLeadingSpace,\n    uppercase,\n    mode,\n  };\n\n  return (\n    <View style={styles.root}>\n      <TabsHeader {...renderProps} />\n      <TabsContext.Provider value={{ goTo, index }}>\n        {currentScreen}\n      </TabsContext.Provider>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n  },\n});\n\nexport default Swiper;\n","import * as React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { withTheme } from 'react-native-paper';\nimport Swiper from './Swiper';\nimport type { Theme } from 'react-native-paper/lib/typescript/types';\n\nimport type { IconPosition, Mode } from './utils';\nimport { Platform } from 'react-native';\n\n// used to persist position on web\nconst cache = createCache();\n\nfunction Tabs({\n  onChangeIndex,\n  children,\n  persistKey,\n  theme,\n  dark,\n  style,\n  defaultIndex,\n  mode = 'fixed',\n  uppercase = true,\n  iconPosition = 'leading',\n  showTextLabel = true,\n  showLeadingSpace = true,\n}: {\n  children: any;\n  persistKey?: string;\n  theme: Theme;\n  dark?: boolean;\n  style?: ViewStyle;\n  defaultIndex?: number;\n  iconPosition?: IconPosition;\n  showTextLabel?: boolean;\n  showLeadingSpace?: boolean;\n  uppercase?: boolean;\n  mode?: Mode;\n  onChangeIndex?: (index: number) => void;\n}) {\n  const onInnerChangeIndex = React.useCallback(\n    (newIndex) => {\n      if (persistKey && Platform.OS === 'web') {\n        cache.set(persistKey, newIndex);\n      }\n      onChangeIndex?.(newIndex);\n    },\n    [persistKey, onChangeIndex]\n  );\n\n  return (\n    <Swiper\n      style={style}\n      dark={dark}\n      theme={theme}\n      defaultIndex={getDefaultIndex(defaultIndex, persistKey)}\n      onChangeIndex={onInnerChangeIndex}\n      uppercase={uppercase}\n      iconPosition={iconPosition}\n      showTextLabel={showTextLabel}\n      showLeadingSpace={showLeadingSpace}\n      mode={mode}\n    >\n      {children}\n    </Swiper>\n  );\n}\n\nfunction getDefaultIndex(\n  defaultIndex: number | undefined,\n  persistKey: string | undefined\n) {\n  if (persistKey) {\n    return cache.get(persistKey) || defaultIndex || 0;\n  }\n  return defaultIndex || 0;\n}\n// used to persist position on web\nfunction createCache() {\n  let c: { [k: string]: number } = {};\n  const set = (k: string, i: number) => {\n    c[k] = i;\n  };\n  const get = (key: string) => c[key];\n  return {\n    set,\n    get,\n  };\n}\n\nexport default withTheme(Tabs);\n","import * as React from 'react';\nimport type { IconSource } from 'react-native-paper/lib/typescript/components/Icon';\n\nexport interface TabScreenProps {\n  label: string;\n  icon?: IconSource;\n  children: any;\n  preload?: () => any;\n}\n\nexport default function TabScreen({ children }: TabScreenProps) {\n  return React.Children.only(children);\n}\n","import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TextInput, HelperText, List, Divider, Dialog, DataTable } from 'react-native-paper';\nimport { Tabs, TabScreen } from \"react-native-paper-tabs\";\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport useRestriction from '../../../hooks/useRestriction';\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\nexport default function CreditsForm() {\n  const { creditsForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermission\");\n\n  const currentCredits = (state.original?.credits || 0)\n  const amount = (state.fields.amount.value || 0);\n\n  const subtotal = state.fields.status.value === \"deposit\"\n    ? amount + currentCredits\n    : amount - currentCredits;\n  return ( \n    <>\n      <Tabs\n        defaultIndex={0} // default = 0\n        onChangeIndex={(newIndex) => {\n          dispatch(actions.setField([\"status\", newIndex === 1 ? \"withdrawal\" : \"deposit\"]));\n        }}\n        mode=\"fixed\"\n      >\n        <TabScreen label=\"Deposit\" icon=\"arrow-up\"><View /></TabScreen>\n        <TabScreen label=\"Withdraw\" icon=\"arrow-down\"><View /></TabScreen>\n      </Tabs>\n      <Dialog.Content style={{ paddingTop: 16 }}>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Message\"\n            error={!!state.fields.message.error}\n            value={state.fields.message.value?.toString() || \"\"}\n            keyboardType=\"number-pad\"\n            onChangeText={(newValue) => dispatch(actions.setField([\"message\", newValue]))}\n          />\n          <HelperText type={!!state.fields.message.error ? \"error\" : \"info\"}>\n            { state.fields.message.error || \"\" }\n          </HelperText>\n          { state.fields.status.value === \"deposit\" \n            ? (\n                <View>\n                  \n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Add amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue) => dispatch(actions.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original?.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Deposit</DataTable.Title>\n                      <DataTable.Cell numeric>{`+$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            ) : (\n                <View>\n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Withdraw amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue) => dispatch(actions.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original!.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Withdraw</DataTable.Title>\n                      <DataTable.Cell numeric>{`-$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            )}\n      </Dialog.Content>\n      </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { creditsForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport CreditsForm from \"../forms/credits/CreditsForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_TRANSACTION = gql`\n  mutation CreatrTransaction(\n    $message: String,\n    $status: String,\n    $amount: Float,\n    $dropzoneUserId: Int,\n  ) {\n    createTransaction(\n      input: {\n        attributes: {\n          amount: $amount,\n          dropzoneUserId: $dropzoneUserId,\n          message: $message,\n          status: $status,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      transaction {\n        id\n        amount\n        message\n\n        dropzoneUser {\n          id\n          credits\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.creditsForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateTransaction, createData] = useMutation<Mutation>(MUTATION_CREATE_TRANSACTION);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.amount.value) {\n      hasErrors = true;\n      dispatch(\n        creditsForm.setFieldError([\"amount\", \"You must specify an amount\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationCreateTransaction({\n        variables: {\n          amount: state.fields.amount.value,\n          message: state.fields.message.value,\n          status: state.fields.status.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"amount\":\n            return dispatch(creditsForm.setFieldError([\"amount\", message]));\n          case \"message\":\n            return dispatch(creditsForm.setFieldError([\"message\", message]));\n          case \"status\":\n            return dispatch(creditsForm.setFieldError([\"status\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        dispatch(creditsForm.reset());\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateTransaction, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <CreditsForm />\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(creditsForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useQuery } from '@apollo/client';\nimport { successColor, warningColor } from \"../../../constants/Colors\";\nimport * as React from 'react';\nimport { StyleSheet, Text } from 'react-native';\nimport { Button, Card, DataTable, FAB, IconButton, List, ProgressBar, Title } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport gql from 'graphql-tag';\n\n\nimport RigDialog from '../../../components/dialogs/RigDialog';\nimport { creditsForm, dropzoneUserForm, globalActions, rigForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\nimport CreditsDialog from '../../../components/dialogs/CreditsDialog';\nimport useRestriction from '../../../hooks/useRestriction';\n\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n        rigInspections {\n          id\n          isOk\n          rig {\n            id\n          }\n        }\n\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              message\n              amount\n              createdAt\n            }\n          }\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const [creditsDialogOpen, setCreditsDialogOpen] = React.useState(false);\n  const [rigDialogOpen, setRigDialogOpen] = React.useState(false);\n  const [dropzoneUserDialogOpen, setDropzoneUserDialogOpen] = React.useState(false);\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = state.currentDropzone?.currentUser?.id === route.params.userId;\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      dropzoneUserId: Number(route.params.userId)\n    }\n  });\n\n  return (\n    <>\n    <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      \n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Basic information\" />\n          <Card.Content>\n            <List.Item\n              title=\"Name\"\n              left={() => <List.Icon icon=\"account-outline\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.name  || \"-\"}\n            />\n            <List.Item\n              title=\"Email\"\n              left={() => <List.Icon icon=\"at\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.email  || \"-\"}\n            />\n\n            <List.Item\n              title=\"Phone\"\n              left={() => <List.Icon icon=\"phone\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.phone  || \"-\"}\n            />\n\n            <List.Item\n              title=\"License\"\n              left={() => <List.Icon icon=\"ticket-account\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.license?.name || \"-\"}\n            />\n\n            <List.Item\n              title=\"Exit weight\"\n              left={() => <List.Icon icon=\"scale\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.exitWeight  || \"-\"}\n            />\n          </Card.Content>\n          {\n            isSelf && (\n              <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n                <Button\n                  icon=\"pencil\"\n                  onPress={() =>\n                    navigation.navigate(\"UpdateUserScreen\", { user: state.currentDropzone?.currentUser?.user })\n                  }\n                >\n                  <Text>Edit</Text>\n                </Button>\n              </Card.Actions>\n            )}\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Rigs\" />\n          <Card.Content>\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>\n                  Container\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Repack due\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Canopy size\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Inspected\n                </DataTable.Title>\n              </DataTable.Header>\n\n              {\n                data?.dropzone?.dropzoneUser?.user?.rigs?.map((rig) =>\n                  <DataTable.Row\n                    key={`rig-${rig!.id}`}\n                    onPress={() => {\n                      dispatch(rigForm.setOriginal(rig));\n                      setRigDialogOpen(true);\n                    }}\n                    onLongPress={() =>\n                      navigation.navigate(\"RigInspectionScreen\", {\n                        dropzoneUserId: Number(route.params.userId),\n                        rig\n                      })\n                    }\n                    pointerEvents=\"none\"\n                  >\n                    <DataTable.Cell>\n                      {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {`${rig?.canopySize}`}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <IconButton\n                        icon={\n                          data?.dropzone?.dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                          ? \"eye-check\"\n                          : \"eye-minus\"\n                        }\n                        color={\n                          data?.dropzone?.dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                          ? successColor\n                          : warningColor\n                        }\n                        onPress={() =>\n                          navigation.navigate(\"RigInspectionScreen\", {\n                            dropzoneUserId: Number(route.params.userId),\n                            rig\n                          })\n                        }\n                      />\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                )\n              }\n            </DataTable>\n          </Card.Content>\n          {\n            isSelf && (\n            <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n              <Button onPress={() => setRigDialogOpen(true)} icon=\"plus\">\n                <Text>Add rig</Text>\n              </Button>\n            </Card.Actions>\n          )}\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title={state.currentDropzone?.name} />\n          <Card.Content>\n            <List.Item\n              title=\"Role\"\n              description={data?.dropzone?.dropzoneUser?.role?.name}\n              left={() => <List.Icon icon=\"lock\" />}\n            />\n            <List.Item\n              title=\"Membership\"\n              description={\n                !data?.dropzone?.dropzoneUser?.expiresAt ?\n                  <Text>Not a member</Text>\n                : format((data?.dropzone?.dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")\n              }\n              left={() =>\n                <List.Icon\n                  icon=\"card-account-details\"\n                  color={\n                    data?.dropzone?.dropzoneUser?.expiresAt && (\n                      data?.dropzone?.dropzoneUser?.expiresAt * 1000 > new Date().getTime()\n                    ) ? undefined : \"#B00020\"}\n                />\n              }\n\n            />\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n            <Button\n              icon=\"pencil\"\n              onPress={() => {\n                dispatch(dropzoneUserForm.setOriginal(data?.dropzone?.dropzoneUser!));\n                setDropzoneUserDialogOpen(true);\n              }}\n            >\n              <Text>Edit</Text>\n            </Button>\n          </Card.Actions>\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Actions style={{ justifyContent: \"space-between\"}}>\n            <Title>{`Balance: $${data?.dropzone?.dropzoneUser?.credits}`}</Title>\n            <Button\n              icon=\"pencil\"\n              onPress={() => {\n                if (data?.dropzone?.dropzoneUser) {\n                  dispatch(creditsForm.setOriginal(data!.dropzone!.dropzoneUser!));\n                  setCreditsDialogOpen(true);\n                }\n              }}\n            >\n              <Text>New transaction</Text>\n            </Button>\n          </Card.Actions>\n          <Card.Content>\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>Time</DataTable.Title>\n                <DataTable.Title>Type</DataTable.Title>\n                <DataTable.Title>Message</DataTable.Title>\n                <DataTable.Title numeric>Amount</DataTable.Title>\n              </DataTable.Header>\n              {\n                data?.dropzone?.dropzoneUser?.transactions?.edges?.map((edge) => (\n                  <DataTable.Row key={`transaction-${edge?.node?.id}`}>\n                    <DataTable.Cell>\n                      <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{!edge?.node?.createdAt ? null : format(edge?.node?.createdAt * 1000, \"yyyy/MM/dd hh:mm\")}</Text>\n                    </DataTable.Cell>\n                    <DataTable.Cell>\n                      <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{edge?.node?.status}</Text>\n                    </DataTable.Cell>\n                    <DataTable.Cell>\n                      {edge?.node?.message}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {edge?.node?.amount}\n                    </DataTable.Cell>\n                    \n                    \n                  </DataTable.Row>\n                ))\n              }\n            </DataTable>\n            \n          </Card.Content>\n        </Card>\n\n        { data?.dropzone?.dropzoneUser?.id === state.currentUser?.id && (\n          <Button color=\"#B00020\" onPress={() => dispatch(globalActions.logout())}>\n            <Text>Log out</Text>\n          </Button>\n        )}\n      \n      </ScrollableScreen>\n      \n      <RigDialog\n        onClose={() => setRigDialogOpen(false)}\n        onSuccess={() => setRigDialogOpen(false)}\n        userId={Number(data?.dropzone?.dropzoneUser?.user?.id)}\n        open={rigDialogOpen}\n      />\n      \n      <DropzoneUserDialog\n        onClose={() => setDropzoneUserDialogOpen(false)}\n        onSuccess={() => setDropzoneUserDialogOpen(false)}\n        open={dropzoneUserDialogOpen}\n      />\n\n      <CreditsDialog\n        onClose={() => setCreditsDialogOpen(false)}\n        onSuccess={() => setCreditsDialogOpen(false)}\n        open={creditsDialogOpen}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    alignItems: 'center',\n    flexGrow: 1,\n    paddingBottom: 56\n  },\n  card: {\n    margin: 8,\n    width: \"100%\",\n  },\n  fields: {\n    width: \"80%\",\n    display: \"flex\",\n  },\n  spacer: {\n    width: \"100%\",\n    height: 32,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"sourceRoot":""}