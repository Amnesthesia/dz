{"version":3,"sources":["ListAccordionGroup.tsx","ListAccordion.tsx","ListIcon.tsx","ListItem.tsx","ListSubheader.tsx","ListSection.tsx","IconButton.tsx","Title.tsx","Caption.tsx","CardContent.tsx","CardActions.tsx","CardCover.tsx","CardTitle.tsx","Card.tsx","PortalConsumer.tsx","Portal.tsx","CheckboxIOS.tsx","CheckboxAndroid.tsx","Checkbox.tsx","CheckboxItem.tsx","index.ts","StyledText.tsx","Menu.tsx","CrossFadeIcon.tsx","constants.tsx","MenuItem.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","children","value","expandedIdProp","onAccordionPress","newExpandedId","setExpandedId","currentExpandedId","ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expandedProp","expanded","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","isExpanded","handlePress","id","onPress","setExpanded","style","styles","onLongPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","testID","borderless","pointerEvents","left","selectable","numberOfLines","description","right","name","size","direction","I18nManager","child","StyleSheet","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme","ListIcon","source","iconColor","width","ListItem","rest","marginVerticalNone","ellipsizeMode","renderDescription","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","ListSubheader","font","fonts","textColor","colors","paddingHorizontal","paddingVertical","ListSection","titleStyle","overflow","disabled","opacity","animated","customColor","rippleColor","IconComponent","buttonSize","centered","borderRadius","accessibilityLabel","accessibilityState","hitSlop","top","bottom","props","alpha","family","text","lineHeight","letterSpacing","CardContent","cover","index","prev","siblings","next","total","contentStyle","first","paddingTop","last","paddingBottom","only","CardActions","compact","CardCover","roundness","coverStyle","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","backgroundColor","image","CardTitle","subtitleNumberOfLines","minHeight","subtitle","marginBottom","rightStyle","titles","Card","elevation","cardElevation","Animated","current","delayPressIn","onPressIn","scale","animation","toValue","duration","useNativeDriver","dark","mode","onPressOut","accessible","innerContainer","flexGrow","flexShrink","a","async","this","Promise","key","manager","mount","componentDidUpdate","checkManager","update","componentWillUnmount","unmount","render","settings","Portal","PortalHost","CheckboxIOS","checked","status","indeterminate","checkedColor","icon","accessibilityLiveRegion","allowFontScaling","CheckboxAndroid","scaleAnim","isFirstRendering","ANIMATION_DURATION","uncheckedColor","checkboxColor","borderWidth","inputRange","outputRange","transform","borderColor","fillContainer","fill","Checkbox","Platform","CheckboxItem","checkboxProps","checkbox","label","Item","Android","IOS","textAlign","writingDirection","EASING","Easing","rendered","menuLayout","anchorLayout","opacityAnimation","scaleAnimation","x","y","anchor","resolve","el","focusableNode","findNodeHandle","node","e","BackHandler","Dimensions","document","windowLayout","requestAnimationFrame","easing","finished","prevProps","updateVisibility","removeListeners","overlayAccessibilityLabel","additionalVerticalValue","android","default","scaleTransforms","scaleX","scaleY","positionTransforms","translateX","scrollableMenuHeight","translateY","shadowMenuContainerStyle","positionStyle","isCoordinate","ref","collapsable","onDismiss","absoluteFill","accessibilityViewIsModal","visible","onAccessibilityEscape","nextProps","prevState","Menu","MenuItem","statusBarHeight","wrapper","position","shadowMenuContainer","fade","currentIcon","setPreviousIcon","setCurrentIcon","isValidIcon","isEqualIcon","previousIcon","opacityPrev","opacityNext","rotatePrev","rotateNext","rotate","estimatedStatusBarHeight","NativeModules","APPROX_STATUSBAR_HEIGHT","ios","useTheme","disabledColor","minWidth","maxWidth","marginHorizontal","widthWithIcon"],"mappings":"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","file":"static/js/13.e7b4b824.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n        borderless\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            {right ? (\n              right({\n                isExpanded: isExpanded,\n              })\n            ) : (\n              <MaterialCommunityIcon\n                name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                color={titleColor}\n                size={24}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            )}\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n","import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst ICON_SIZE = 24;\n\n/**\n * A component to show an icon in a list item.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/list-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <List.Icon color={Colors.blue500} icon=\"folder\" />\n *     <List.Icon color={Colors.blue500} icon=\"equal\" />\n *     <List.Icon color={Colors.blue500} icon=\"calendar\" />\n *   </>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListIcon = ({ icon, color: iconColor, style }: Props) => (\n  <View style={[styles.item, style]} pointerEvents=\"box-none\">\n    <Icon source={icon} size={ICON_SIZE} color={iconColor} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nListIcon.displayName = 'List.Icon';\n\nexport default ListIcon;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          <Text\n            selectable={false}\n            ellipsizeMode={titleEllipsizeMode}\n            numberOfLines={titleNumberOfLines}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const font = fonts.medium;\n  const textColor = color(colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <Text\n      numberOfLines={1}\n      {...rest}\n      style={[styles.container, { color: textColor, ...font }, style]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default withTheme(ListSubheader);\n","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport ListSubheader from './ListSubheader';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title text for the section.\n   */\n  title?: string;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to group list items.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/list-section.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Section>\n *     <List.Subheader>Some title</List.Subheader>\n *     <List.Item title=\"First Item\" left={() => <List.Icon icon=\"folder\" />} />\n *     <List.Item\n *       title=\"Second Item\"\n *       left={() => <List.Icon color=\"#000\" icon=\"folder\" />}\n *     />\n *   </List.Section>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListSection = ({\n  children,\n  title,\n  titleStyle,\n  style,\n  ...rest\n}: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {title ? <ListSubheader style={titleStyle}>{title}</ListSubheader> : null}\n    {children}\n  </View>\n);\n\nListSection.displayName = 'List.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n});\n\nexport default withTheme(ListSection);\n","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n","import * as React from 'react';\nimport { Text, StyleSheet } from 'react-native';\nimport StyledText from './StyledText';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  children: React.ReactNode;\n};\n\n// @component-group Typography\n\n/**\n * Typography component for showing a title.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/title.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Title } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Title>Title</Title>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Title = (props: Props) => (\n  <StyledText\n    {...props}\n    alpha={0.87}\n    family=\"medium\"\n    style={[styles.text, props.style]}\n  />\n);\n\nexport default Title;\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    marginVertical: 2,\n    letterSpacing: 0.15,\n  },\n});\n","import * as React from 'react';\nimport { Text, TextStyle, StyleSheet, StyleProp } from 'react-native';\nimport StyledText from './StyledText';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  style?: StyleProp<TextStyle>;\n  children: React.ReactNode;\n};\n\n// @component-group Typography\n\n/**\n * Typography component for showing a caption.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/caption.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Caption } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Caption>Caption</Caption>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Caption = (props: Props) => (\n  <StyledText\n    {...props}\n    alpha={0.54}\n    family=\"regular\"\n    style={[styles.text, props.style]}\n  />\n);\n\nexport default Caption;\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    lineHeight: 20,\n    marginVertical: 2,\n    letterSpacing: 0.4,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `Card.Content`.\n   */\n  children: React.ReactNode;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  /**\n   * @internal\n   */\n  siblings?: Array<string>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show content inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-content-example.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardContent = ({ index, total, siblings, style, ...rest }: Props) => {\n  const cover = 'withTheme(CardCover)';\n  const title = 'withTheme(CardTitle)';\n\n  let contentStyle, prev, next;\n\n  if (typeof index === 'number' && siblings) {\n    prev = siblings[index - 1];\n    next = siblings[index + 1];\n  }\n\n  if (\n    (prev === cover && next === cover) ||\n    (prev === title && next === title) ||\n    total === 1\n  ) {\n    contentStyle = styles.only;\n  } else if (index === 0) {\n    if (next === cover || next === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.first;\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    if (prev === cover || prev === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.last;\n    }\n  } else if (prev === cover || prev === title) {\n    contentStyle = styles.first;\n  } else if (next === cover || next === title) {\n    contentStyle = styles.last;\n  }\n\n  return <View {...rest} style={[styles.container, contentStyle, style]} />;\n};\n\nCardContent.displayName = 'Card.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  first: {\n    paddingTop: 16,\n  },\n  last: {\n    paddingBottom: 16,\n  },\n  only: {\n    paddingVertical: 16,\n  },\n});\n\nexport default CardContent;\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `CardActions`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a list of actions inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-actions.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardActions = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {React.Children.map(props.children, (child) =>\n      React.isValidElement(child)\n        ? React.cloneElement(child, {\n            compact: child.props.compact !== false,\n          })\n        : child\n    )}\n  </View>\n);\n\nCardActions.displayName = 'Card.Actions';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    padding: 8,\n  },\n});\n\nexport default CardActions;\n","import * as React from 'react';\nimport { StyleSheet, View, ViewStyle, Image, StyleProp } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { grey200 } from '../../styles/colors';\n\ntype Props = React.ComponentPropsWithRef<typeof Image> & {\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show a cover image inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-cover.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Image props https://reactnative.dev/docs/image#props\n */\nconst CardCover = ({ index, total, style, theme, ...rest }: Props) => {\n  const { roundness } = theme;\n\n  let coverStyle;\n\n  if (index === 0) {\n    if (total === 1) {\n      coverStyle = {\n        borderRadius: roundness,\n      };\n    } else {\n      coverStyle = {\n        borderTopLeftRadius: roundness,\n        borderTopRightRadius: roundness,\n      };\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    coverStyle = {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return (\n    <View style={[styles.container, coverStyle, style]}>\n      <Image {...rest} style={[styles.image, coverStyle]} />\n    </View>\n  );\n};\n\nCardCover.displayName = 'Card.Cover';\nconst styles = StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: grey200,\n    overflow: 'hidden',\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default withTheme(CardCover);\n\n// @component-docs ignore-next-line\nexport { CardCover };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport Caption from './../Typography/Caption';\nimport Title from './../Typography/Title';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Text for the title. Note that this will only accept a string or `<Text>`-based node.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the title.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Text for the subtitle. Note that this will only accept a string or `<Text>`-based node.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the subtitle.\n   */\n  subtitleNumberOfLines?: number;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the left element wrapper.\n   */\n  leftStyle?: StyleProp<ViewStyle>;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the right element wrapper.\n   */\n  rightStyle?: StyleProp<ViewStyle>;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst LEFT_SIZE = 40;\n\n/**\n * A component to show a title, subtitle and an avatar inside a Card.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-title-1.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Card, IconButton } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card.Title\n *     title=\"Card Title\"\n *     subtitle=\"Card Subtitle\"\n *     left={(props) => <Avatar.Icon {...props} icon=\"folder\" />}\n *     right={(props) => <IconButton {...props} icon=\"more-vert\" onPress={() => {}} />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardTitle = ({\n  title,\n  titleStyle,\n  titleNumberOfLines = 1,\n  subtitle,\n  subtitleStyle,\n  subtitleNumberOfLines = 1,\n  left,\n  leftStyle,\n  right,\n  rightStyle,\n  style,\n}: Props) => {\n  return (\n    <View\n      style={[\n        styles.container,\n        { minHeight: subtitle || left || right ? 72 : 50 },\n        style,\n      ]}\n    >\n      {left ? (\n        <View style={[styles.left, leftStyle]}>\n          {left({\n            size: LEFT_SIZE,\n          })}\n        </View>\n      ) : null}\n\n      <View style={[styles.titles]}>\n        {title ? (\n          <Title\n            style={[\n              styles.title,\n              { marginBottom: subtitle ? 0 : 2 },\n              titleStyle,\n            ]}\n            numberOfLines={titleNumberOfLines}\n          >\n            {title}\n          </Title>\n        ) : null}\n\n        {subtitle ? (\n          <Caption\n            style={[styles.subtitle, subtitleStyle]}\n            numberOfLines={subtitleNumberOfLines}\n          >\n            {subtitle}\n          </Caption>\n        ) : null}\n      </View>\n\n      <View style={rightStyle}>{right ? right({ size: 24 }) : null}</View>\n    </View>\n  );\n};\n\nCardTitle.displayName = 'Card.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 16,\n  },\n\n  left: {\n    justifyContent: 'center',\n    marginRight: 16,\n    height: LEFT_SIZE,\n    width: LEFT_SIZE,\n  },\n\n  titles: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  title: {\n    minHeight: 30,\n  },\n\n  subtitle: {\n    minHeight: 20,\n    marginVertical: 0,\n  },\n});\n\nexport default withTheme(CardTitle);\n\n// @component-docs ignore-next-line\nexport { CardTitle };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const { roundness } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  return (\n    <Surface style={[{ borderRadius: roundness, elevation }, style]} {...rest}>\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress ? handlePressIn : undefined}\n        onPressOut={onPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n","import * as React from 'react';\nimport type { PortalMethods } from './PortalHost';\n\ntype Props = {\n  manager: PortalMethods;\n  children: React.ReactNode;\n};\n\nexport default class PortalConsumer extends React.Component<Props> {\n  async componentDidMount() {\n    this.checkManager();\n\n    // Delay updating to prevent React from going to infinite loop\n    await Promise.resolve();\n\n    this.key = this.props.manager.mount(this.props.children);\n  }\n\n  componentDidUpdate() {\n    this.checkManager();\n\n    this.props.manager.update(this.key, this.props.children);\n  }\n\n  componentWillUnmount() {\n    this.checkManager();\n\n    this.props.manager.unmount(this.key);\n  }\n\n  private key: any;\n\n  private checkManager() {\n    if (!this.props.manager) {\n      throw new Error(\n        'Looks like you forgot to wrap your root component with `Provider` component from `react-native-paper`.\\n\\n' +\n          \"Please read our getting-started guide and make sure you've followed all the required steps.\\n\\n\" +\n          'https://callstack.github.io/react-native-paper/getting-started.html'\n      );\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Provider as SettingsProvider,\n  Consumer as SettingsConsumer,\n} from '../../core/settings';\nimport { ThemeProvider, withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n","import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n","import * as React from 'react';\nimport { Platform } from 'react-native';\nimport CheckboxIOS from './CheckboxIOS';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [checked, setChecked] = React.useState(false);\n *\n *   return (\n *     <Checkbox\n *       status={checked ? 'checked' : 'unchecked'}\n *       onPress={() => {\n *         setChecked(!checked);\n *       }}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Checkbox = (props: Props) =>\n  Platform.OS === 'ios' ? (\n    <CheckboxIOS {...props} />\n  ) : (\n    <CheckboxAndroid {...props} />\n  );\n\nexport default withTheme(Checkbox);\n\n// @component-docs ignore-next-line\nconst CheckboxWithTheme = withTheme(Checkbox);\n// @component-docs ignore-next-line\nexport { CheckboxWithTheme as Checkbox };\n","import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\n          {label}\n        </Text>\n        {checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n","import CheckboxComponent from './Checkbox';\nimport CheckboxItem from './CheckboxItem';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\n\nconst Checkbox = Object.assign(\n  // @component ./Checkbox.tsx\n  CheckboxComponent,\n  {\n    // @component ./CheckboxItem.tsx\n    Item: CheckboxItem,\n    // @component ./CheckboxAndroid.tsx\n    Android: CheckboxAndroid,\n    // @component ./CheckboxIOS.tsx\n    IOS: CheckboxIOS,\n  }\n);\n\nexport default Checkbox;\n","import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle, StyleSheet } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst StyledText = ({ theme, alpha, family, style, ...rest }: Props) => {\n  const textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  const font = theme.fonts[family];\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        { color: textColor, ...font, writingDirection },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(StyledText);\n","import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Animated,\n  BackHandler,\n  Dimensions,\n  Easing,\n  I18nManager,\n  LayoutRectangle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  ScrollView,\n  findNodeHandle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport type { $Omit } from '../../types';\nimport Portal from '../Portal/Portal';\nimport Surface from '../Surface';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport MenuItem, { MenuItem as _MenuItem } from './MenuItem';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\n\ntype Props = {\n  /**\n   * Whether the Menu is currently visible.\n   */\n  visible: boolean;\n  /**\n   * The anchor to open the menu from. In most cases, it will be a button that opens the menu.\n   */\n  anchor: React.ReactNode | { x: number; y: number };\n  /**\n   * Extra margin to add at the top of the menu to account for translucent status bar on Android.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to and customize it.\n   * This is automatically handled on iOS.\n   */\n  statusBarHeight?: number;\n  /**\n   * Callback called when Menu is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the menu.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Content of the `Menu`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style of menu's inner content.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype Layout = $Omit<$Omit<LayoutRectangle, 'x'>, 'y'>;\n\ntype State = {\n  rendered: boolean;\n  top: number;\n  left: number;\n  menuLayout: Layout;\n  anchorLayout: Layout;\n  opacityAnimation: Animated.Value;\n  scaleAnimation: Animated.ValueXY;\n};\n\n// Minimum padding between the edge of the screen and the menu\nconst SCREEN_INDENT = 8;\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 250;\n// From the 'Standard easing' section of https://material.io/design/motion/speed.html#easing\nconst EASING = Easing.bezier(0.4, 0, 0.2, 1);\n\n/**\n * Menus display a list of choices on temporary elevated surfaces. Their placement varies based on the element that opens them.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/menu-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/menu-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Menu, Divider, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const openMenu = () => setVisible(true);\n *\n *   const closeMenu = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View\n *         style={{\n *           paddingTop: 50,\n *           flexDirection: 'row',\n *           justifyContent: 'center',\n *         }}>\n *         <Menu\n *           visible={visible}\n *           onDismiss={closeMenu}\n *           anchor={<Button onPress={openMenu}>Show menu</Button>}>\n *           <Menu.Item onPress={() => {}} title=\"Item 1\" />\n *           <Menu.Item onPress={() => {}} title=\"Item 2\" />\n *           <Divider />\n *           <Menu.Item onPress={() => {}} title=\"Item 3\" />\n *         </Menu>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Menu extends React.Component<Props, State> {\n  // @component ./MenuItem.tsx\n  static Item = MenuItem;\n\n  static defaultProps = {\n    statusBarHeight: APPROX_STATUSBAR_HEIGHT,\n    overlayAccessibilityLabel: 'Close menu',\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return { rendered: true };\n    }\n\n    return null;\n  }\n\n  state = {\n    rendered: this.props.visible,\n    top: 0,\n    left: 0,\n    menuLayout: { width: 0, height: 0 },\n    anchorLayout: { width: 0, height: 0 },\n    opacityAnimation: new Animated.Value(0),\n    scaleAnimation: new Animated.ValueXY({ x: 0, y: 0 }),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      this.updateVisibility();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  private anchor?: View | null = null;\n  private menu?: View | null = null;\n\n  private isCoordinate = (anchor: any): anchor is { x: number; y: number } =>\n    !React.isValidElement(anchor) &&\n    typeof anchor?.x === 'number' &&\n    typeof anchor?.y === 'number';\n\n  private measureMenuLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      if (this.menu) {\n        this.menu.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private measureAnchorLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      const { anchor } = this.props;\n      if (this.isCoordinate(anchor)) {\n        resolve({ x: anchor.x, y: anchor.y, width: 0, height: 0 });\n        return;\n      }\n\n      if (this.anchor) {\n        this.anchor.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private updateVisibility = async () => {\n    // Menu is rendered in Portal, which updates items asynchronously\n    // We need to do the same here so that the ref is up-to-date\n    await Promise.resolve();\n\n    if (this.props.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  private isBrowser = () => Platform.OS === 'web' && 'document' in global;\n\n  private focusFirstDOMNode = (el: View | null | undefined) => {\n    if (el && this.isBrowser()) {\n      // When in the browser, we want to focus the first focusable item on toggle\n      // For example, when menu is shown, focus the first item in the menu\n      // And when menu is dismissed, send focus back to the button to resume tabbing\n      const node: any = findNodeHandle(el);\n      const focusableNode = node.querySelector(\n        // This is a rough list of selectors that can be focused\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      focusableNode?.focus();\n    }\n  };\n\n  private handleDismiss = () => {\n    if (this.props.visible) {\n      this.props.onDismiss();\n    }\n    return true;\n  };\n\n  private handleKeypress = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      this.props.onDismiss();\n    }\n  };\n\n  private attachListeners = () => {\n    BackHandler.addEventListener('hardwareBackPress', this.handleDismiss);\n    Dimensions.addEventListener('change', this.handleDismiss);\n\n    this.isBrowser() && document.addEventListener('keyup', this.handleKeypress);\n  };\n\n  private removeListeners = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleDismiss);\n    Dimensions.removeEventListener('change', this.handleDismiss);\n\n    this.isBrowser() &&\n      document.removeEventListener('keyup', this.handleKeypress);\n  };\n\n  private show = async () => {\n    const windowLayout = Dimensions.get('window');\n    const [menuLayout, anchorLayout] = await Promise.all([\n      this.measureMenuLayout(),\n      this.measureAnchorLayout(),\n    ]);\n\n    // When visible is true for first render\n    // native views can be still not rendered and\n    // measureMenuLayout/measureAnchorLayout functions\n    // return wrong values e.g { x:0, y: 0, width: 0, height: 0 }\n    // so we have to wait until views are ready\n    // and rerun this function to show menu\n    if (\n      !windowLayout.width ||\n      !windowLayout.height ||\n      !menuLayout.width ||\n      !menuLayout.height ||\n      (!anchorLayout.width && !this.isCoordinate(this.props.anchor)) ||\n      (!anchorLayout.height && !this.isCoordinate(this.props.anchor))\n    ) {\n      requestAnimationFrame(this.show);\n      return;\n    }\n\n    this.setState(\n      () => ({\n        left: anchorLayout.x,\n        top: anchorLayout.y,\n        anchorLayout: {\n          height: anchorLayout.height,\n          width: anchorLayout.width,\n        },\n        menuLayout: {\n          width: menuLayout.width,\n          height: menuLayout.height,\n        },\n      }),\n      () => {\n        this.attachListeners();\n\n        const { animation } = this.props.theme;\n        Animated.parallel([\n          Animated.timing(this.state.scaleAnimation, {\n            toValue: { x: menuLayout.width, y: menuLayout.height },\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n          Animated.timing(this.state.opacityAnimation, {\n            toValue: 1,\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n        ]).start(({ finished }) => {\n          if (finished) {\n            this.focusFirstDOMNode(this.menu);\n          }\n        });\n      }\n    );\n  };\n\n  private hide = () => {\n    this.removeListeners();\n\n    const { animation } = this.props.theme;\n    Animated.timing(this.state.opacityAnimation, {\n      toValue: 0,\n      duration: ANIMATION_DURATION * animation.scale,\n      easing: EASING,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.setState({ menuLayout: { width: 0, height: 0 }, rendered: false });\n        this.state.scaleAnimation.setValue({ x: 0, y: 0 });\n        this.focusFirstDOMNode(this.anchor);\n      }\n    });\n  };\n\n  render() {\n    const {\n      visible,\n      anchor,\n      contentStyle,\n      style,\n      children,\n      theme,\n      statusBarHeight,\n      onDismiss,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const {\n      rendered,\n      menuLayout,\n      anchorLayout,\n      opacityAnimation,\n      scaleAnimation,\n    } = this.state;\n\n    let { left, top } = this.state;\n\n    // I don't know why but on Android measure function is wrong by 24\n    const additionalVerticalValue = Platform.select({\n      android: statusBarHeight,\n      default: 0,\n    });\n\n    const scaleTransforms = [\n      {\n        scaleX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [0, 1],\n        }),\n      },\n      {\n        scaleY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [0, 1],\n        }),\n      },\n    ];\n\n    const windowLayout = Dimensions.get('window');\n\n    // We need to translate menu while animating scale to imitate transform origin for scale animation\n    const positionTransforms = [];\n\n    // Check if menu fits horizontally and if not align it to right.\n    if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [-(menuLayout.width / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from left side\n      if (left < SCREEN_INDENT) {\n        left = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [menuLayout.width / 2, 0],\n        }),\n      });\n\n      left += anchorLayout.width - menuLayout.width;\n\n      const right = left + menuLayout.width;\n      // Check if menu position has enough space from right side\n      if (right > windowLayout.width - SCREEN_INDENT) {\n        left = windowLayout.width - SCREEN_INDENT - menuLayout.width;\n      }\n    }\n\n    // If the menu is larger than available vertical space,\n    // calculate the height of scrollable view\n    let scrollableMenuHeight = 0;\n\n    // Check if the menu should be scrollable\n    if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And bottom side of the screen has more space than top side\n      top <= windowLayout.height - top\n    ) {\n      // Scrollable menu should be below the anchor (expands downwards)\n      scrollableMenuHeight =\n        windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;\n    } else if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And top side of the screen has more space than bottom side\n      top >= windowLayout.height - top &&\n      // And menu overflows from top side\n      top <=\n        menuLayout.height -\n          anchorLayout.height +\n          SCREEN_INDENT -\n          additionalVerticalValue\n    ) {\n      // Scrollable menu should be above the anchor (expands upwards)\n      scrollableMenuHeight =\n        top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;\n    }\n\n    // Scrollable menu max height\n    scrollableMenuHeight =\n      scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT\n        ? windowLayout.height - 2 * SCREEN_INDENT\n        : scrollableMenuHeight;\n\n    // Menu is typically positioned below the element that generates it\n    // So first check if it fits below the anchor (expands downwards)\n    if (\n      // Check if menu fits vertically\n      top <=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue ||\n      // Or if the menu overflows from bottom side\n      (top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n        // And bottom side of the screen has more space than top side\n        top <= windowLayout.height - top)\n    ) {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from top side\n      if (top < SCREEN_INDENT) {\n        top = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0],\n        }),\n      });\n\n      top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);\n\n      const bottom =\n        top +\n        (scrollableMenuHeight || menuLayout.height) +\n        additionalVerticalValue;\n\n      // Check if menu position has enough space from bottom side\n      if (bottom > windowLayout.height - SCREEN_INDENT) {\n        top =\n          scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT\n            ? -SCREEN_INDENT * 2\n            : windowLayout.height -\n              menuLayout.height -\n              SCREEN_INDENT -\n              additionalVerticalValue;\n      }\n    }\n\n    const shadowMenuContainerStyle = {\n      opacity: opacityAnimation,\n      transform: scaleTransforms,\n      borderRadius: theme.roundness,\n      ...(scrollableMenuHeight ? { height: scrollableMenuHeight } : {}),\n    };\n\n    const positionStyle = {\n      top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue,\n      ...(I18nManager.isRTL ? { right: left } : { left }),\n    };\n\n    return (\n      <View\n        ref={(ref) => {\n          this.anchor = ref;\n        }}\n        collapsable={false}\n      >\n        {this.isCoordinate(anchor) ? null : anchor}\n        {rendered ? (\n          <Portal>\n            <TouchableWithoutFeedback\n              accessibilityLabel={overlayAccessibilityLabel}\n              accessibilityRole=\"button\"\n              onPress={onDismiss}\n            >\n              <View style={StyleSheet.absoluteFill} />\n            </TouchableWithoutFeedback>\n            <View\n              ref={(ref) => {\n                this.menu = ref;\n              }}\n              collapsable={false}\n              accessibilityViewIsModal={visible}\n              style={[styles.wrapper, positionStyle, style]}\n              pointerEvents={visible ? 'box-none' : 'none'}\n              onAccessibilityEscape={onDismiss}\n            >\n              <Animated.View style={{ transform: positionTransforms }}>\n                <Surface\n                  style={\n                    [\n                      styles.shadowMenuContainer,\n                      shadowMenuContainerStyle,\n                      contentStyle,\n                    ] as StyleProp<ViewStyle>\n                  }\n                >\n                  {(scrollableMenuHeight && (\n                    <ScrollView>{children}</ScrollView>\n                  )) || <React.Fragment>{children}</React.Fragment>}\n                </Surface>\n              </Animated.View>\n            </View>\n          </Portal>\n        ) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n  },\n  shadowMenuContainer: {\n    opacity: 0,\n    paddingVertical: 8,\n    elevation: 8,\n  },\n});\n\nexport default withTheme(Menu);\n","import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport Icon, { isValidIcon, IconSource, isEqualIcon } from './Icon';\n\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Icon to display for the `CrossFadeIcon`.\n   */\n  source: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color: string;\n  /**\n   * Size of the icon.\n   */\n  size: number;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst CrossFadeIcon = ({ color, size, source, theme }: Props) => {\n  const [currentIcon, setCurrentIcon] = React.useState<IconSource>(\n    () => source\n  );\n  const [previousIcon, setPreviousIcon] = React.useState<IconSource | null>(\n    null\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(1));\n\n  const { scale } = theme.animation;\n\n  if (currentIcon !== source) {\n    setPreviousIcon(() => currentIcon);\n    setCurrentIcon(() => source);\n  }\n\n  React.useEffect(() => {\n    if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {\n      fade.setValue(1);\n\n      Animated.timing(fade, {\n        duration: scale * 200,\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [currentIcon, previousIcon, fade, scale]);\n\n  const opacityPrev = fade;\n  const opacityNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      })\n    : 1;\n\n  const rotatePrev = fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['-90deg', '0deg'],\n  });\n\n  const rotateNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['0deg', '-180deg'],\n      })\n    : '0deg';\n\n  return (\n    <View\n      style={[\n        styles.content,\n        {\n          height: size,\n          width: size,\n        },\n      ]}\n    >\n      {previousIcon ? (\n        <Animated.View\n          style={[\n            styles.icon,\n            {\n              opacity: opacityPrev,\n              transform: [{ rotate: rotatePrev }],\n            },\n          ]}\n        >\n          <Icon source={previousIcon} size={size} color={color} />\n        </Animated.View>\n      ) : null}\n      <Animated.View\n        style={[\n          styles.icon,\n          {\n            opacity: opacityNext,\n            transform: [{ rotate: rotateNext }],\n          },\n        ]}\n      >\n        <Icon source={currentIcon} size={size} color={color} />\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default withTheme(CrossFadeIcon);\n\nconst styles = StyleSheet.create({\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { NativeModules, Platform } from 'react-native';\n\n// Use the existence of expo-constants as a heuristic for determining if the\n// status bar is translucent on Android. This should be replaced in the future\n// with react-native-safe-area-context.\nconst estimatedStatusBarHeight =\n  NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n    ?.statusBarHeight ?? 0;\n\nexport const APPROX_STATUSBAR_HEIGHT = Platform.select({\n  android: estimatedStatusBarHeight,\n  ios: Platform.Version < 11 ? estimatedStatusBarHeight : 0,\n});\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { useTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nfunction MenuItem({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n}: Props) {\n  const theme = useTheme();\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n}\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default MenuItem;\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"],"sourceRoot":""}