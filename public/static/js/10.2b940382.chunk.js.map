{"version":3,"sources":["components/NoResults.tsx","components/RigSelect.tsx","components/JumpTypeSelect.tsx","components/TicketTypeSelect.tsx","components/forms/slot/SlotForm.tsx","components/dialogs/ManifestUserDialog.tsx","screens/authenticated/manifest/GetStarted.tsx","components/GcaChip.tsx","components/LoadMasterChip.tsx","components/PilotChip.tsx","components/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","screens/authenticated/manifest/ManifestScreen.tsx"],"names":["NoResults","title","subtitle","style","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","QUERY_RIGS","gql","RigSelect","props","useState","isMenuOpen","setMenuOpen","globalState","useAppSelector","state","global","useLazyQuery","fetchRigs","data","useEffect","userId","dropzoneId","variables","Number","currentDropzone","id","value","autoSelectFirst","dropzone","dropzoneUser","availableRigs","length","onSelect","JSON","stringify","onDismiss","visible","anchor","Item","onPress","make","model","canopySize","description","required","left","Icon","icon","map","rig","key","user","QUERY_JUMP_TYPES","JumpTypeSelect","useQuery","allowedForUserId","loading","refetch","Subheader","Menu","name","jumpTypes","jumpType","QUERY_TICKET_TYPES","TicketTypeSelect","allowManifestingSelf","ticketTypes","ticketType","actions","slice","SlotForm","slotForm","dispatch","useAppDispatch","React","fields","exitWeight","setField","rigs","isEdit","original","allowedToManifestOthers","useRestriction","HelperText","type","error","extras","ScrollView","horizontal","ticketAddons","extra","Chip","selected","some","filter","cost","Divider","TextInput","field","mode","label","toString","keyboardType","Affix","text","onChangeText","newValue","isTandem","passengerName","passengerExitWeight","marginBottom","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","useCallback","hasErrors","setFieldError","onManifest","a","async","jumpTypeId","extraIds","loadId","load","rigId","ticketTypeId","result","createSlot","fieldErrors","message","errors","snackbarActions","showSnackbar","variant","onSuccess","Portal","Dialog","open","maxHeight","ProgressBar","indeterminate","color","theme","colors","accent","Title","ScrollArea","Actions","Button","reset","onClose","GetStarted","hasPlanes","hasTicketTypes","palette","isPublic","usePalette","separator","lightColor","darkColor","success","fontSize","fontWeight","marginVertical","QUERY_DROPZONE_USERS","GCAChip","permissions","marginHorizontal","dropzoneUsers","edges","edge","node","LoadMasterChip","allowed","slots","slot","PilotChip","QUERY_PLANES","PlaneChip","planes","plane","QUERY_LOAD","MUTATION_UPDATE_LOAD","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","canManifestOthers","navigation","useNavigation","loadNumber","canManifest","mutationUpdateLoad","mutation","updatePilot","pilot","pilotId","updateGCA","gca","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","dispatchAt","Math","ceil","onLanded","hasLanded","canUpdateLoad","canEditSelf","canEditOthers","maxSlots","Card","elevation","flexDirection","flexGrow","IconButton","slotsMultipleForm","navigate","screen","params","select","Content","undefined","overflow","loadMaster","DataTable","Header","numeric","slotGroup","groupNumber","Row","currentUser","onSlotGroupPress","onSlotPress","pointerEvents","Cell","Array","from","v","i","backgroundColor","Paragraph","differenceInMinutes","marginLeft","disabled","Boolean","QUERY_DROPZONE","ManifestScreen","isDialogOpen","setDialogOpen","earliestTimestamp","startOfDay","fetchPolicy","isFocused","useIsFocused","isSetupComplete","globalActions","setDropzone","setUser","primaryColor","primary","setPrimaryColor","secondaryColor","canCreateLoad","hasLicense","hasMembership","hasRigInspection","hasReserveInDate","hasExitWeight","hasCredits","Dimensions","get","loads","contentContainerStyle","numColumns","refreshing","onRefresh","renderItem","item","index","isOpen","isFull","setOriginal","setFromSlots","FAB","small"],"mappings":"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","file":"static/js/10.2b940382.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Rig, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: Number(globalState.currentDropzone?.id),\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { JumpType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nconst QUERY_JUMP_TYPES = gql`\n  query JumpTypes($allowedForUserId: Int) {\n    jumpTypes(allowedForUserId: $allowedForUserId) {\n      id\n      name\n    }\n  }\n`;\n\nexport default function JumpTypeSelect(props: IJumpTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_JUMP_TYPES, {\n    variables: {\n      allowedForUserId: props.userId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      Jump type\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select jump type\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.jumpTypes?.map((jumpType) => \n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(jumpType);\n            }}\n            title={\n              jumpType.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { TicketType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  allowManifestingSelf?: boolean | null;\n  onSelect(jt: TicketType): void;\n}\n\nconst QUERY_TICKET_TYPES = gql`\n  query TicketTypes($allowManifestingSelf: Boolean, $dropzoneId: Int!) {\n    ticketTypes(allowManifestingSelf: $allowManifestingSelf, dropzoneId: $dropzoneId) {\n      id\n      name\n      isTandem\n      cost\n\n      extras {\n        id\n        name\n        cost\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeSelect(props: ITicketTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      allowManifestingSelf: props.allowManifestingSelf,\n    }\n  });\n\n  \n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.name || \"Please select ticket type\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.ticketTypes?.map((ticketType) => \n            <Menu.Item\n              key={`ticket-type-select-${ticketType.id}`}\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(ticketType);\n              }}\n              title={\n                ticketType.name || \"-\"\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport JumpTypeSelect from '../../JumpTypeSelect';\nimport TicketTypeSelect from '../../TicketTypeSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../RigSelect';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.slotForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.fields.user?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", Number(state.fields.user.value.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.user.value.rigs?.length) {\n        dispatch(\n          actions.setField([\"rig\", state.fields.user.value.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.user?.value?.id]);\n\n  const isEdit = state?.original?.id;\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? \"updateUserSlot\" : \"createUserSlot\"\n  )\n\n  return ( \n    <> \n      <JumpTypeSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.user?.value?.id) || null}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeSelect\n        value={state.fields.ticketType.value}\n        required\n        allowManifestingSelf={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      { !state.fields.user ? null : <RigSelect\n        value={state.fields.rig.value}\n        userId={Number(state.fields.user?.value?.id)}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />}\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      {\n        !state.fields.ticketType.value?.isTandem ? null : (\n          <>\n            <List.Subheader>Passenger</List.Subheader>\n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger name\"\n              error={!!state.fields.passengerName.error}\n              value={state.fields.passengerName?.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.setField([\"passengerName\", newValue]))}\n            />\n            \n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger exit weight\"\n              error={!!state.fields.passengerExitWeight.error}\n              value={state.fields.passengerExitWeight.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.setField([\"passengerExitWeight\", Number(newValue)]))}\n            />\n          </>\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { slotForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport SlotForm from \"../forms/slot/SlotForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $userId: Int\n    $exitWeight: Float\n    $passengerName: String\n    $passengerExitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          userId: $userId\n          exitWeight: $exitWeight\n          passengerExitWeight: $passengerExitWeight\n          passengerName: $passengerName\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            passengerName\n            passengerExitWeight\n            ticketType {\n              id\n              name\n              isTandem\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.slotForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          userId: Number(state.fields.user?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n          ...!state.fields.ticketType.value?.isTandem\n            ? {}\n            : {\n                passengerName: state.fields.passengerName?.value,\n                passengerExitWeight: state.fields.passengerExitWeight?.value,\n              }\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(slotForm.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(slotForm.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(slotForm.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(slotForm.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(slotForm.setFieldError([\"rig\", message]));\n          case \"user\":\n            return dispatch(slotForm.setFieldError([\"user\", message]));\n          case \"exit_weight\":\n            return dispatch(slotForm.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open} style={{ maxHeight: 500 }}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.user?.value?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.ScrollArea>\n          <ScrollView>\n            <SlotForm />\n          </ScrollView>\n        </Dialog.ScrollArea>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(slotForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`gca-chip-${edge?.node?.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { Slot, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  slots: Slot[];\n  onSelect(user: User): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"parachute\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <Menu.Item\n            key={`lm-chip-${slot.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.user as User);\n            }}\n            title={\n              slot?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane-takeoff\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`pilot-select-${edge!.node!.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneChipSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <Menu.Item\n            key={`lm-plane-chip-${plane.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport { useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Badge, Button, Card, DataTable, IconButton, List, Menu, Paragraph, ProgressBar } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport GCAChip from '../../../components/GcaChip';\nimport LoadMasterChip from '../../../components/LoadMasterChip';\nimport PilotChip from '../../../components/PilotChip';\nimport PlaneChip from '../../../components/PlaneChip';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Plane, Slot } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { slotsMultipleForm, useAppDispatch, useAppSelector } from '../../../redux';\n\ninterface ILoadCard {\n  load: Load;\n  loadNumber: number;\n  canManifest: boolean;\n  onSlotGroupPress(slots: Slot[]): void;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nconst QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        user {\n          id\n          name\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n  const canManifestOthers = useRestriction(\"createUserSlot\");\n\n  const navigation = useNavigation();\n  const { load, loadNumber, onManifest, canManifest } = props;\n  const { data, loading } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const updatePilot = React.useCallback(async (pilot: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const canUpdateLoad = useRestriction(\"updateLoad\");\n  const canEditSelf = useRestriction(\"updateSlot\");\n  const canEditOthers = useRestriction(\"updateUserSlot\");\n\n  \n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  \n\n  return (\n  <Card style={{ margin: 16 }} elevation={3}>\n    <Card.Title\n      style={{ justifyContent: \"space-between\"}}\n      title={\n        <View style={{ width: \"100%\", flex: 1, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n          <Text>{`Load ${data?.load?.loadNumber || 0}`}</Text>\n          <View style={{ flexGrow: 1 }} />\n          { !data?.load?.hasLanded && data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canManifestOthers && (\n            <IconButton\n              icon=\"account-group\"\n              onPress={() => {\n                dispatch(slotsMultipleForm.reset());\n                dispatch(slotsMultipleForm.setField([\"load\", load]));\n                navigation.navigate(\"Users\", { screen: \"UsersScreen\", params: { select: true, loadId: data?.load?.id }});\n              }}\n            />\n          )}\n        </View>\n      }\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal>\n          <PlaneChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.plane}\n            onSelect={updatePlane}\n          />\n          <GCAChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.gca?.user}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.pilot?.user}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.loadMaster?.user}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Exit weight</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              const slotGroup = data?.load?.slots?.filter(({ groupNumber }) => groupNumber === slot.groupNumber);\n\n              return (\n                <DataTable.Row\n                  key={`slot-${slot.id}`}\n                  onPress={() => {\n                    if (slot.user?.id === state.currentUser?.id) {\n                      if (canEditSelf) {\n                        if (slotGroup?.length) {\n                          props.onSlotGroupPress(slotGroup!)\n                        } else {\n                          props.onSlotPress(slot);\n                        }\n                      }\n                    } else if (canEditOthers) {\n                      if (slotGroup?.length) {\n                        props.onSlotGroupPress(slotGroup!)\n                      } else {\n                        props.onSlotPress(slot);\n                      }\n                    }\n                  }}\n                  pointerEvents=\"none\"\n                >\n                  <DataTable.Cell>{slot?.user?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.exitWeight}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.jumpType?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.ticketType?.name}</DataTable.Cell>\n                </DataTable.Row>\n              )\n            })\n          }\n          {\n            Array.from({length: (load?.maxSlots || 0) - (load?.slots?.length || 0)}, (v, i) => i).map((i) =>\n              <DataTable.Row key={`${load.id}-empty-slot-${i}`}>\n                <DataTable.Cell>- Available -</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"#FF8800\", padding: 8 }}>\n          <Paragraph>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)}>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)}>\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button mode=\"outlined\" onPress={() => setDispatchOpen(true)}>\n                    Dispatch\n                  </Button>\n                }\n              >\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button style={{ marginLeft: 8 }} mode=\"contained\" onPress={() => onLanded()}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => onManifest()}\n                disabled={!canManifest || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport { startOfDay } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserDialog from '../../../components/dialogs/ManifestUserDialog';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Load, Query } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { globalActions, slotForm, slotsMultipleForm, snackbarActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\n\nconst QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        hasCredits\n        hasExitWeight\n        hasMembership\n        hasReserveInDate\n        hasRigInspection\n        hasLicense\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              amount\n            }\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            loadNumber\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"no-cache\"\n  });\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!data?.dropzone?.planes?.length;\n  const hasTicketTypes = !!data?.dropzone?.ticketTypes?.length;\n  const isPublic = !!data?.dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(globalActions.setDropzone(data.dropzone));\n    \n      dispatch(\n        globalActions.setUser({\n          ...state?.currentUser,\n          ...(data?.dropzone?.currentUser.user || {})\n        })\n      );\n    }\n  }, [JSON.stringify(data?.dropzone)]);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.primaryColor && data?.dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.primaryColor));\n    }\n\n    if (data?.dropzone?.secondaryColor && data?.dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.secondaryColor));\n    }\n  }, [\n    data?.dropzone?.primaryColor,\n    data?.dropzone?.secondaryColor\n  ])\n\n  const allowed = useRestriction(\"createSlot\");\n  const canCreateLoad = useRestriction(\"createLoad\");\n\n  const onManifest = React.useCallback((load: Load) => {\n    const { currentUser } = data!.dropzone;\n    \n    if (!currentUser.hasLicense) {\n      return dispatch(\n        snackbarActions.showSnackbar({\n          message: \"You need to select a license on your user profile\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasMembership) {\n      return dispatch(\n        snackbarActions.showSnackbar({\n          message: \"Your membership is out of date\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasRigInspection) {\n      return dispatch(\n        snackbarActions.showSnackbar({\n          message: \"Your rig needs to be inspected before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasReserveInDate) {\n      return dispatch(\n        snackbarActions.showSnackbar({\n          message: \"Your rig needs a reserve repack\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasExitWeight) {\n      return dispatch(\n        snackbarActions.showSnackbar({\n          message: \"Update your exit weight on your profile before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasCredits) {\n      return dispatch(\n        snackbarActions.showSnackbar({\n          message: \"You have no credits on your account\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n\n    dispatch(\n      slotForm.setField([\"user\", state.currentUser])\n    );\n    dispatch(\n      slotForm.setField([\"load\", load])\n    );\n    setDialogOpen(true);\n  }, [JSON.stringify(data?.dropzone?.currentUser)]);\n\n  return (\n    <>\n    <ManifestUserDialog\n      open={isDialogOpen}\n      onClose={() => setDialogOpen(false)}\n      onSuccess={() => setDialogOpen(false)}\n    />\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (data?.dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={1}\n                        data={data?.dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              canManifest={allowed && edge?.node?.isOpen && !edge?.node?.isFull}\n                              loadNumber={(data?.dropzone?.loads?.edges?.length || 0) - index}\n                              onSlotPress={(slot) => {\n                                dispatch(slotForm.setOriginal(slot));\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                              onSlotGroupPress={(slots) => {\n                                dispatch(slotsMultipleForm.reset());\n                                dispatch(slotsMultipleForm.setFromSlots(slots));\n                                dispatch(slotsMultipleForm.setField([\"load\", edge.node!]));\n                                navigation.navigate(\"ManifestGroupScreen\");\n                              }}\n                              onManifest={() => onManifest(edge.node!)}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => navigation.navigate(\"CreateLoadScreen\")}\n            label=\"New load\"\n          />\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n"],"sourceRoot":""}