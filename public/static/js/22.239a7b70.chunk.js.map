{"version":3,"sources":["components/NoResults.tsx","screens/authenticated/users/UsersScreen.tsx"],"names":["NoResults","title","subtitle","style","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","QUERY_DROPZONE_USERS","gql","UsersScreen","useAppSelector","state","global","usersScreen","dispatch","slotsMultipleForm","useAppDispatch","useQuery","variables","dropzoneId","Number","currentDropzone","id","search","searchText","data","loading","navigation","useNavigation","route","useRoute","isFocused","useIsFocused","React","isSearchVisible","usersActions","setSearchVisible","isSelectEnabled","setSelectEnabled","setSelected","params","select","indeterminate","color","theme","colors","accent","visible","dropzone","dropzoneUsers","edges","length","map","edge","Item","node","user","name","description","role","left","Icon","icon","Android","status","selectedUsers","includes","onPress","find","filter","navigate","userId","small","setDropzoneUsers","screen","users","label","fontSize","fontWeight","separator","marginVertical"],"mappings":"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","file":"static/js/22.239a7b70.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { DeviceEventEmitter, StyleSheet } from 'react-native';\nimport { Checkbox, FAB, List, ProgressBar } from 'react-native-paper';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { DropzoneUser, Query } from '../../../graphql/schema';\nimport { slotsMultipleForm, useAppDispatch, useAppSelector, usersActions } from '../../../redux';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUsersRouteParams{\n  key: string,\n  name: string,\n  params: {\n    select?: boolean;\n    loadId?: number;\n    onSelect?(selectedUsers?: DropzoneUser[]): void;\n  }\n}\nexport default function UsersScreen() {\n  const {global, usersScreen, slotsMultipleForm: multiSlot } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzone?.id),\n      search: usersScreen.searchText,\n    }\n  });\n\n  const navigation = useNavigation();\n  const route = useRoute<IUsersRouteParams>();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (usersScreen.isSearchVisible) {\n      dispatch(usersActions.setSearchVisible(false));\n    }\n\n    if (!isFocused && usersScreen.isSelectEnabled) {\n      dispatch(usersActions.setSelectEnabled(false));\n      dispatch(usersActions.setSelected([]));\n    }\n  }, [isFocused]);\n\n\n  React.useEffect(() => {\n    dispatch(usersActions.setSelectEnabled(!!route?.params?.select));\n  }, [route?.params?.select])\n\n  return (\n    <View style={styles.container}>\n      <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n      \n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n        <List.Item\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() => <List.Icon icon=\"account\" />}\n          right={() => !usersScreen.isSelectEnabled ? null :\n            <Checkbox.Android\n              status={\n                usersScreen.selectedUsers?.map(({ id }) => id).includes(`${edge?.node?.user?.id}`)\n                ? \"checked\"\n                : \"unchecked\"\n              }\n            />\n          }\n          onPress={\n            !usersScreen.isSelectEnabled  \n              ? () => navigation.navigate(\"UserProfileScreen\", { userId: edge?.node?.id })\n              : () => dispatch(\n                usersActions.setSelected(\n                  usersScreen.selectedUsers?.find(({ id }) => id === `${edge?.node?.id}`)\n                  ? usersScreen.selectedUsers?.filter(({ id }) => id !== `${edge?.node?.id}`)\n                  : [...usersScreen.selectedUsers, edge!.node!],\n                )\n              )\n          }\n        />\n      )}\n\n      { usersScreen.isSelectEnabled && (\n        <FAB\n          style={styles.fab}\n          small\n          icon=\"check\"\n          onPress={() => {\n            dispatch(slotsMultipleForm.setDropzoneUsers(usersScreen.selectedUsers));\n            navigation.navigate(\"Manifest\", {\n              screen: \"ManifestGroupScreen\",\n              params: {\n                users: usersScreen.selectedUsers\n              }\n            })\n          }}\n          label=\"Next\"\n        />\n      )}\n    </View>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"sourceRoot":""}