{"version":3,"sources":["graphql/createQuery.tsx","components/RigSelect.tsx","components/ChipSelect.tsx","components/forms/slots_multiple/UserRigCard.tsx","utils/calculateWingLoading.ts","components/forms/slots_multiple/MultipleSlotForm.tsx","screens/authenticated/manifest/ManifestGroupScreen.tsx"],"names":["createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","loading","previousData","refetch","error","transformedData","useMemo","JSON","stringify","useEffect","message","showSnackbarErrors","snackbarActions","showSnackbar","variant","QUERY_RIGS","gql","RigSelect","props","useState","isMenuOpen","setMenuOpen","globalState","useAppSelector","state","global","useLazyQuery","fetchRigs","userId","dropzoneId","Number","currentDropzone","id","value","autoSelectFirst","dropzone","dropzoneUser","availableRigs","length","onSelect","onDismiss","visible","anchor","Item","onPress","title","make","model","canopySize","description","required","left","Icon","icon","map","rig","key","user","ChipSelect","items","selected","isDisabled","renderItemLabel","onChangeSelected","View","style","flexDirection","flexWrap","item","Chip","mode","margin","disabled","includes","xorBy","QUERY_DROPZONE_USERS_MANIFEST_DETAILS","useQueryDropzoneUsersDetails","UserRigCard","exitWeightInKg","canopySizeInFt","dropzoneUserId","onChangeRig","exitWeight","rigId","onChangeExitWeight","console","selectedRig","rigs","find","Card","width","elevation","ProgressBar","indeterminate","color","theme","colors","accent","Title","name","image","Image","source","uri","size","Content","Divider","marginBottom","ScrollView","horizontal","marginHorizontal","role","license","round","toFixed","TextInput","onChangeText","text","keyboardType","label","QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES","useAllowedJumpTypes","allowedJumpTypes","ticketTypes","jumpTypes","actions","slice","SlotForm","slotsMultipleForm","userIds","fields","users","slotUser","useRestriction","Subheader","flexShrink","uniqBy","jumpType","first","setField","HelperText","type","ticketType","extras","styles","ticketAddons","extra","some","filter","cost","undefined","newRig","StyleSheet","create","flex","field","MUTATION_CREATE_SLOTS","ManifestGroupScreen","useMutation","mutationCreateSlots","mutationData","navigation","useNavigation","validate","useCallback","hasErrors","slotForm","setFieldError","onManifest","a","async","jumpTypeId","ticketTypeId","extraIds","loadId","load","userGroup","result","createSlot","fieldErrors","createSlots","errors","navigate","screen","onSuccess","ScrollableScreen","loadNumber","Button","marginVertical"],"mappings":"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","file":"static/js/14.337fe697.chunk.js","sourcesContent":["import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useEffect, useMemo } from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { snackbarActions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            snackbarActions.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        onError!(error.message);\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Rig, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: Number(globalState.currentDropzone?.id),\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import { xorBy } from \"lodash\";\nimport React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends { id: any }> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends { id: any }>(props: IChipSelect<T>) {\n  const { items, selected, isDisabled, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          mode=\"outlined\"\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={selected.map(({ id }) => id).includes(item.id)}\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], ({ id }) => id)\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","import gql from \"graphql-tag\";\nimport React, { useEffect } from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Avatar, Card, TextInput, ProgressBar, Chip, Divider } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport { Query, Rig } from \"../../../graphql/schema\";\nimport { useAppSelector } from \"../../../redux\";\nimport calculateWingLoading from \"../../../utils/calculateWingLoading\";\nimport RigSelect from \"../../RigSelect\";\n\n\ninterface IUserRigCard {\n  dropzoneUserId: number;\n  dropzoneId: number;\n  exitWeight?: number;\n  onChangeExitWeight(weight: number): void;\n  rigId?: number;\n  onChangeRig(rig: Rig): void;\n}\n\nconst QUERY_DROPZONE_USERS_MANIFEST_DETAILS = gql`\nquery QueryDropzoneUsersManifestDetails(\n  $dropzoneId: Int!\n  $dropzoneUserId: Int!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUser(userId: $dropzoneUserId) {\n      id\n\n      user {\n        id\n        name\n        exitWeight\n        license {\n          id\n          name\n        }\n        rigs {\n          id\n          make\n          model\n          canopySize\n        }\n      }\n      role {\n        id\n        name\n      }\n      user {\n        id\n        name\n        image\n      }\n    }\n  }\n}\n`;\nconst useQueryDropzoneUsersDetails = createQuery<Query[\"dropzone\"][\"dropzoneUser\"], {\n  dropzoneId: number,\n  dropzoneUserId: number,\n }>(QUERY_DROPZONE_USERS_MANIFEST_DETAILS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUser,\n });\n\nexport default function UserRigCard(props: IUserRigCard) {\n\n  const { dropzoneId, dropzoneUserId, onChangeRig, exitWeight, rigId, onChangeExitWeight } = props;\n  const { global: globalState } = useAppSelector(state => state);\n\n  const { data, loading } = useQueryDropzoneUsersDetails({\n    variables: {\n      dropzoneUserId,\n      dropzoneId\n    },\n    onError: console.error\n  });\n\n  const selectedRig = data?.user?.rigs?.find(({ id }) => Number(id) === rigId);\n\n  useEffect(() => {\n    if (!exitWeight && data?.user?.exitWeight) {\n      onChangeExitWeight(Number(data.user.exitWeight));\n    }\n  }, [data?.user?.exitWeight])\n  return (\n    <Card style={{ width: \"100%\"}} elevation={3}>\n      <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n      <Card.Title\n        title={data?.user.name}\n        left={() =>\n          data?.user?.image\n          ? <Avatar.Image source={{ uri: data.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n      />\n      \n      <Card.Content>\n        <Divider style={{ marginBottom: 8 }} />\n        <ScrollView horizontal>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"lock\" mode=\"outlined\" disabled>{data?.role?.name}</Chip>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"ticket-account\" mode=\"outlined\" disabled>{data?.user?.license?.name}</Chip>\n          {\n            !selectedRig || !exitWeight || !selectedRig.canopySize\n              ? null\n              : <Chip style={{ marginHorizontal: 1 }} icon=\"escalator-down\" mode=\"outlined\" disabled>{calculateWingLoading(exitWeight, selectedRig.canopySize!)}</Chip>\n                  \n          }\n        </ScrollView>\n        <RigSelect\n          userId={dropzoneUserId}\n          dropzoneId={dropzoneId}\n          onSelect={onChangeRig}\n          value={selectedRig}\n          autoSelectFirst\n        />\n\n        <TextInput\n          value={!exitWeight ? \"\" : `${exitWeight}`}\n          onChangeText={(text: string) => onChangeExitWeight(Number(text))}\n          keyboardType=\"number-pad\"\n          label=\"Exit weight\"\n          mode=\"outlined\"\n        />\n      </Card.Content>\n    </Card>\n  );\n}","import { round } from \"lodash\";\n\nexport default function calculateWingLoading(exitWeightInKg: number, canopySizeInFt: number) {\n  return round((2.20462 * exitWeightInKg) / canopySizeInFt, 2).toFixed(2);\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List, Card } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { uniqBy } from 'lodash';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport TicketTypeSelect from '../../TicketTypeSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ChipSelect from '../../ChipSelect';\nimport { createQuery } from '../../../graphql/createQuery';\nimport { JumpType, Query, SlotUser, TicketType } from '../../../graphql/schema';\n\nimport UserRigCard from \"./UserRigCard\";\n\n\nconst QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n\n    ticketTypes(isPublic: true) {\n      id\n      name\n      cost\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[], ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.slotsMultipleForm);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: state.fields.users?.value?.map((slotUser) => slotUser.id) as number[],\n      dropzoneId: Number(globalState?.currentDropzone?.id)\n    },\n    onError: console.error\n  });\n\n  const allowedToManifestOthers = useRestriction(\n    \"createUserSlot\"\n  );\n\n  return ( \n    <>\n      <List.Subheader>Jump type</List.Subheader>\n      <Card elevation={2} style={{ marginBottom: 16, flexShrink: 1 }}>\n        <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={uniqBy([\n                  ...(data?.allowedJumpTypes || []),\n                  ...(data?.jumpTypes || [])\n                ], ({ id }) => id) || []\n              }\n              selected={state.fields.jumpType.value ? [state.fields.jumpType.value] : []}\n              renderItemLabel={(jumpType) => jumpType.name}\n              isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType.id)}\n              onChangeSelected={([first]) =>\n                dispatch(actions.setField([\"jumpType\", first]))\n              }\n            />\n            \n            <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n              { state.fields.jumpType.error || \"\" }\n            </HelperText>\n          </Card.Content>\n        </Card>\n\n        <List.Subheader>Ticket</List.Subheader>\n        <Card elevation={2} style={{ width: \"100%\" }}>\n          <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={data?.ticketTypes || []}\n              selected={state.fields.ticketType.value ? [state.fields.ticketType.value] : []}\n              renderItemLabel={(ticketType) => ticketType.name}\n              isDisabled={() => false}\n              onChangeSelected={([first]) =>\n                dispatch(actions.setField([\"ticketType\", first]))\n              }\n            />\n            <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n              { state.fields.ticketType.error || \"\" }\n            </HelperText>\n\n          {\n            !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n              <List.Subheader>\n                Ticket addons\n              </List.Subheader>\n            )\n          }\n          <ScrollView horizontal style={styles.ticketAddons}>\n            {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n              <Chip\n                selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n                onPress={\n                  state?.fields?.extras.value?.some(({id}) => id === extra.id)\n                  ? () => dispatch(actions.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n                  : () => dispatch(actions.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n                }\n              >\n                {`${extra.name} ($${extra.cost})`}\n              </Chip>\n            )}\n          </ScrollView>\n          <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n            { state.fields.extras.error || \"\" }\n          </HelperText>\n      </Card.Content>\n    </Card>\n    <Divider />\n        \n\n      <List.Subheader>Group</List.Subheader>\n      {\n        state.fields?.users?.value?.map((slotUser) =>\n          <UserRigCard\n            dropzoneId={Number(globalState.currentDropzone!.id)}\n            dropzoneUserId={Number(slotUser.id)}\n            rigId={Number(slotUser.rigId) || undefined}\n            exitWeight={slotUser.exitWeight}\n            onChangeExitWeight={(exitWeight) =>\n              dispatch(\n                actions.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, exitWeight }\n                    : user\n                  )\n                ]))\n            }\n            onChangeRig={(newRig) =>\n              dispatch(\n                actions.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, rigId: Number(newRig.id) }\n                    : user\n                  )\n                ]))\n            }\n          />\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","\nimport { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Button, Card, ProgressBar } from \"react-native-paper\";\nimport ScrollableScreen from \"../../../components/ScrollableScreen\";\nimport { DropzoneUser, Mutation, Slot } from \"../../../graphql/schema\";\nimport { slotForm, slotsMultipleForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport MultipleSlotForm from \"../../../components/forms/slots_multiple/MultipleSlotForm\";\nimport { useNavigation, useRoute } from \"@react-navigation/core\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOTS = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $ticketTypeId: Int\n    $userGroup: [SlotUser!]!,\n  ) {\n    createSlots(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          ticketTypeId: $ticketTypeId\n          userGroup: $userGroup,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      \n      load {\n        id\n        name\n        loadNumber\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          user {\n            id\n            name\n          }\n          passengerName\n          passengerExitWeight\n          ticketType {\n            id\n            name\n            isTandem\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestGroupScreen(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.slotsMultipleForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlots, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOTS);\n  const navigation = useNavigation();\n  \n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onManifest = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlots({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          ticketTypeId: Number(state.fields.ticketType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          userGroup: state.fields.users.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(slotForm.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(slotForm.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(slotForm.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(slotForm.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(slotForm.setFieldError([\"rig\", message]));\n          case \"user\":\n            return dispatch(slotForm.setFieldError([\"user\", message]));\n          case \"exit_weight\":\n            return dispatch(slotForm.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlots?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.data?.createSlots?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlots?.fieldErrors?.length) {\n        navigation.navigate(\"Manifest\", { screen: \"DropzoneScreen\" });\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlots, props.onSuccess])\n  \n  return (\n    <ScrollableScreen>\n      <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n      <Card.Title title={`Manifest ${state?.fields?.users?.value?.length} jumpers on Load #${state.fields.load?.value?.loadNumber}`} />\n      <MultipleSlotForm />\n      <Button\n        mode=\"contained\"\n        style={{ width: \"100%\", marginVertical: 16 }}\n        onPress={() => onManifest()}\n        loading={mutationData.loading}\n      >\n        Save\n      </Button>\n  </ScrollableScreen>\n  )\n}"],"sourceRoot":""}