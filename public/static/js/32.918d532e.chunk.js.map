{"version":3,"sources":["components/ScrollableScreen.tsx","components/DatePicker.web.tsx","components/forms/rig_inspection/RigInspectionItem.tsx","components/forms/rig_inspection/RigInspectionForm.tsx","screens/authenticated/rig/RigInspectionScreen.tsx"],"names":["ScrollableScreen","props","height","useWindowDimensions","theme","useAppSelector","state","global","style","styles","container","backgroundColor","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","DatePicker","React","open","setOpen","date","onChange","getTime","onDismiss","visible","anchor","Item","onPress","disabled","title","label","description","timestamp","format","left","Icon","icon","selectedDays","Date","onDayClick","RigInspectionItem","canInspect","useRestriction","config","valueType","TextInput","mode","marginVertical","value","onChangeText","text","name","Checkbox","status","keyboardType","Number","time","toString","QUERY_RIG_INSPECTION","gql","RigForm","globalState","rigInspectionForm","dispatch","useAppDispatch","useQuery","variables","dropzoneId","currentDropzone","id","data","loading","dropzone","rigInspectionChecklist","checklistItems","map","item","currentValue","fields","find","checklistItem","setItem","field","marginBottom","QUERY_RIG_INSPECTIONS","MUTATION_CREATE_RIG_INSPECTION","MUTATION_SET_VALUE","RigInspectionScreen","useRoute","params","rig","dropzoneUserId","useMutation","mutationCreateRigInspection","mutationSetValue","dropzoneUser","rigInspections","some","inspection","console","log","setOriginal","JSON","stringify","createRigInspection","a","async","rigInspectionId","original","rigId","result","rigInspection","Promise","all","checklistItemId","snackbarActions","showSnackbar","message","variant","Card","width","Title","Content","make","model","serial","repackExpiresAt","Actions","Button"],"mappings":"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","file":"static/js/32.918d532e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import React from \"react\";\nimport { Checkbox, TextInput } from \"react-native-paper\";\nimport { ChecklistItem } from \"../../../graphql/schema\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport DatePicker from '../../DatePicker';\n\ninterface IChecklistItem {\n  value: string;\n  onChange(value: string): void;\n  config: ChecklistItem;\n}\n\nexport default function RigInspectionItem(props: IChecklistItem) {\n\n  const canInspect = useRestriction(\"actAsRigInspector\");\n\n  if (props.config?.valueType && props.config?.valueType === \"string\") {\n    return (\n      <TextInput\n        mode=\"outlined\"\n        disabled={!canInspect}\n        style={{ marginVertical: 8 }}\n        value={props.value}\n        onChangeText={(text) => props.onChange(text)}\n        label={props.config.name || \"\"}\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"boolean\") {\n    return (\n      <Checkbox.Item\n        label={props.config.name || \"\"}\n        disabled={!canInspect}\n        style={{ marginVertical: 8 }}\n        status={props.value === \"true\"\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => props.onChange(props.value === \"true\" ? \"false\" : \"true\")\n        }\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"integer\") {\n    return (\n      <TextInput\n        disabled={!canInspect}\n        value={props.value}\n        mode=\"outlined\"\n        onChangeText={(text) => props.onChange(text)}\n        label={props.config.name || \"\"}\n        keyboardType=\"number-pad\"\n        style={{ marginVertical: 8 }}\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"date\") {\n    return (\n      <DatePicker\n        disabled={!canInspect}\n        timestamp={Number(props.value)}\n        onChange={(time) => props.onChange(time.toString())}\n        label={props.config.name || \"\"}\n        \n      />\n    )\n  }\n  return null;\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nimport { useAppSelector, useAppDispatch, rigInspectionForm } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport RigInspectionItem from './RigInspectionItem';\n\n\nconst QUERY_RIG_INSPECTION = gql`\n  query RigInspection($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      rigInspectionChecklist {\n        checklistItems {\n          id\n          isRequired\n          name\n          valueType\n          description\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigForm() {\n  const { global: globalState, rigInspectionForm: state } = useAppSelector(state => state);\n\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTION, {\n    variables: {\n      dropzoneId: Number(globalState?.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      {\n        data?.dropzone?.rigInspectionChecklist?.checklistItems?.map((item) => {\n          const currentValue = state.fields.find((value) => value?.checklistItem.id === item.id);\n\n          return (\n            <RigInspectionItem\n              config={item}\n              value={currentValue?.value || \"\"}\n              onChange={(value) =>\n                dispatch(\n                  rigInspectionForm.setItem({ checklistItem: item, value, id: currentValue?.id || null })\n                )\n              }\n            />\n          )\n        })\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useRoute } from '@react-navigation/core';\nimport { format } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Button, Card, List } from 'react-native-paper';\nimport RigInspectionForm from \"../../../components/forms/rig_inspection/RigInspectionForm\";\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { DropzoneUser, Mutation, Query, Rig } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { rigInspectionForm, snackbarActions, useAppDispatch, useAppSelector } from '../../../redux';\n\nconst QUERY_RIG_INSPECTIONS = gql`\n  query RigInspections($dropzoneUserId: Int!, $dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        rigInspections {\n          id\n          rig {\n            id\n          }\n          inspectedBy {\n            id\n            name\n          }\n          checklistValues {\n            id\n            value\n            checklistItem {\n              id\n              name\n              valueType\n              isRequired\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_CREATE_RIG_INSPECTION = gql`\n  mutation CreateRigInspection(\n    $dropzoneId: Int,\n    $rigId: Int,\n  ) {\n    createRigInspection(input: {\n      attributes: {\n        dropzoneId: $dropzoneId,\n        rigId: $rigId,\n      }\n    }) {\n      rigInspection {\n        id\n        inspectedBy {\n          id\n          name\n        }\n        rig {\n          id\n        }\n        checklistValues {\n          id\n          value\n          checklistItem {\n            id\n            name\n            valueType\n            isRequired\n            description\n          }\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\n\n\nconst MUTATION_SET_VALUE = gql`\n  mutation SetValue(\n    $checklistItemId: Int,\n    $rigInspectionId: Int,\n    $value: String,\n  ) {\n    updateChecklistValue(input: {\n      attributes: {\n        checklistItemId: $checklistItemId,\n        rigInspectionId: $rigInspectionId,\n        value: $value\n      }\n    }) {\n      checklistValue {\n        id,\n        value,\n        checklistItem {\n          id\n          name\n          valueType,\n          description\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function RigInspectionScreen() {\n  const { global: globalState, rigInspectionForm: state } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const route = useRoute<{ key: string, name: string, params: { rig: Rig, dropzoneUserId: number }}>();\n  const { rig, dropzoneUserId } = route.params;\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTIONS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone!.id),\n      dropzoneUserId: dropzoneUserId,\n    }\n  });\n\n  const canInspect = useRestriction(\"actAsRigInspector\");\n  const [mutationCreateRigInspection] = useMutation<Mutation>(MUTATION_CREATE_RIG_INSPECTION);\n  const [mutationSetValue] = useMutation<Mutation>(MUTATION_SET_VALUE);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.dropzoneUser?.rigInspections?.some((inspection) => inspection.rig?.id.toString() === rig.id.toString())) {\n      const inspection = data?.dropzone?.dropzoneUser?.rigInspections?.find((inspection) => inspection.rig?.id === rig.id);\n      console.log({ inspection });\n      dispatch(\n        rigInspectionForm.setOriginal(\n          inspection!\n        )\n      )\n    }\n  }, [JSON.stringify(data?.dropzone?.dropzoneUser?.rigInspections)]);\n\n  const createRigInspection = React.useCallback(async () => {\n    try {\n      let rigInspectionId = state.original?.id;\n      if (!rigInspectionId) {\n        const result = await mutationCreateRigInspection({\n          variables: { dropzoneId: Number(globalState.currentDropzone!.id), rigId: Number(rig.id) }\n        });\n\n        rigInspectionId = result?.data?.createRigInspection?.rigInspection!.id;\n      }\n\n      await Promise.all(\n        state.fields.map((field) =>\n          mutationSetValue({\n            variables: {\n              rigInspectionId: Number(rigInspectionId),\n              checklistItemId: Number(field.checklistItem.id),\n              value: field.value\n          }})\n        )\n      );\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    }\n  }, [JSON.stringify(state.fields), state?.original?.id, globalState?.currentDropzone?.id]);\n\n  return (\n    <ScrollableScreen>\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Rig\" />\n        <Card.Content>\n          <List.Item\n            title=\"Make\"\n            description={rig.make}\n          />\n          <List.Item\n            title=\"Model\"\n            description={rig.model}\n          />\n          <List.Item\n            title=\"Serial\"\n            description={rig.serial}\n          />\n          <List.Item\n            title=\"Repack due\"\n            description={\n              rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"\n            }\n          />\n        </Card.Content>\n      </Card>\n\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Inspection\" />\n\n        <Card.Content>\n          <RigInspectionForm />\n        </Card.Content>\n\n        <Card.Actions>\n          <Button disabled={!canInspect} mode=\"contained\" onPress={() => createRigInspection()} style={{ width: \"100%\"}}>\n            Mark as inspected\n          </Button>\n        </Card.Actions>\n      </Card>\n    </ScrollableScreen>\n  );\n}\n\n"],"sourceRoot":""}