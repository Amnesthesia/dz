{"version":3,"sources":["IconButton.tsx","PortalConsumer.tsx","Portal.tsx","StyledText.tsx","Menu.tsx","CrossFadeIcon.tsx","constants.tsx","MenuItem.tsx"],"names":["styles","container","alignItems","justifyContent","overflow","margin","disabled","opacity","withTheme","color","size","animated","rest","iconColor","customColor","theme","rippleColor","IconComponent","buttonSize","borderless","centered","onPress","style","width","height","borderRadius","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","top","left","bottom","right","source","a","async","this","Promise","key","props","manager","mount","componentDidUpdate","checkManager","update","componentWillUnmount","unmount","render","React","settings","value","Portal","PortalHost","text","textAlign","textColor","font","writingDirection","I18nManager","EASING","Easing","rendered","menuLayout","anchorLayout","opacityAnimation","Animated","scaleAnimation","x","y","anchor","resolve","Platform","el","focusableNode","findNodeHandle","node","e","BackHandler","Dimensions","document","windowLayout","requestAnimationFrame","animation","toValue","duration","easing","useNativeDriver","finished","prevProps","updateVisibility","removeListeners","overlayAccessibilityLabel","additionalVerticalValue","android","default","scaleTransforms","scaleX","inputRange","outputRange","scaleY","positionTransforms","translateX","scrollableMenuHeight","translateY","shadowMenuContainerStyle","transform","positionStyle","isCoordinate","ref","collapsable","onDismiss","StyleSheet","absoluteFill","accessibilityViewIsModal","pointerEvents","visible","onAccessibilityEscape","nextProps","prevState","Menu","MenuItem","statusBarHeight","wrapper","position","shadowMenuContainer","paddingVertical","elevation","fade","current","scale","currentIcon","setPreviousIcon","setCurrentIcon","isValidIcon","isEqualIcon","previousIcon","opacityPrev","opacityNext","rotatePrev","rotateNext","rotate","content","icon","estimatedStatusBarHeight","NativeModules","APPROX_STATUSBAR_HEIGHT","ios","useTheme","disabledColor","titleColor","testID","row","selectable","numberOfLines","paddingHorizontal","minWidth","maxWidth","flexDirection","title","fontSize","item","marginHorizontal","widthWithIcon"],"mappings":"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","file":"static/js/23.5ca35902.chunk.js","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n","import * as React from 'react';\nimport type { PortalMethods } from './PortalHost';\n\ntype Props = {\n  manager: PortalMethods;\n  children: React.ReactNode;\n};\n\nexport default class PortalConsumer extends React.Component<Props> {\n  async componentDidMount() {\n    this.checkManager();\n\n    // Delay updating to prevent React from going to infinite loop\n    await Promise.resolve();\n\n    this.key = this.props.manager.mount(this.props.children);\n  }\n\n  componentDidUpdate() {\n    this.checkManager();\n\n    this.props.manager.update(this.key, this.props.children);\n  }\n\n  componentWillUnmount() {\n    this.checkManager();\n\n    this.props.manager.unmount(this.key);\n  }\n\n  private key: any;\n\n  private checkManager() {\n    if (!this.props.manager) {\n      throw new Error(\n        'Looks like you forgot to wrap your root component with `Provider` component from `react-native-paper`.\\n\\n' +\n          \"Please read our getting-started guide and make sure you've followed all the required steps.\\n\\n\" +\n          'https://callstack.github.io/react-native-paper/getting-started.html'\n      );\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Provider as SettingsProvider,\n  Consumer as SettingsConsumer,\n} from '../../core/settings';\nimport { ThemeProvider, withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n","import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle, StyleSheet } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst StyledText = ({ theme, alpha, family, style, ...rest }: Props) => {\n  const textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  const font = theme.fonts[family];\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        { color: textColor, ...font, writingDirection },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(StyledText);\n","import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Animated,\n  BackHandler,\n  Dimensions,\n  Easing,\n  I18nManager,\n  LayoutRectangle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  ScrollView,\n  findNodeHandle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport type { $Omit } from '../../types';\nimport Portal from '../Portal/Portal';\nimport Surface from '../Surface';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport MenuItem, { MenuItem as _MenuItem } from './MenuItem';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\n\ntype Props = {\n  /**\n   * Whether the Menu is currently visible.\n   */\n  visible: boolean;\n  /**\n   * The anchor to open the menu from. In most cases, it will be a button that opens the menu.\n   */\n  anchor: React.ReactNode | { x: number; y: number };\n  /**\n   * Extra margin to add at the top of the menu to account for translucent status bar on Android.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to and customize it.\n   * This is automatically handled on iOS.\n   */\n  statusBarHeight?: number;\n  /**\n   * Callback called when Menu is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the menu.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Content of the `Menu`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style of menu's inner content.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype Layout = $Omit<$Omit<LayoutRectangle, 'x'>, 'y'>;\n\ntype State = {\n  rendered: boolean;\n  top: number;\n  left: number;\n  menuLayout: Layout;\n  anchorLayout: Layout;\n  opacityAnimation: Animated.Value;\n  scaleAnimation: Animated.ValueXY;\n};\n\n// Minimum padding between the edge of the screen and the menu\nconst SCREEN_INDENT = 8;\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 250;\n// From the 'Standard easing' section of https://material.io/design/motion/speed.html#easing\nconst EASING = Easing.bezier(0.4, 0, 0.2, 1);\n\n/**\n * Menus display a list of choices on temporary elevated surfaces. Their placement varies based on the element that opens them.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/menu-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/menu-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Menu, Divider, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const openMenu = () => setVisible(true);\n *\n *   const closeMenu = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View\n *         style={{\n *           paddingTop: 50,\n *           flexDirection: 'row',\n *           justifyContent: 'center',\n *         }}>\n *         <Menu\n *           visible={visible}\n *           onDismiss={closeMenu}\n *           anchor={<Button onPress={openMenu}>Show menu</Button>}>\n *           <Menu.Item onPress={() => {}} title=\"Item 1\" />\n *           <Menu.Item onPress={() => {}} title=\"Item 2\" />\n *           <Divider />\n *           <Menu.Item onPress={() => {}} title=\"Item 3\" />\n *         </Menu>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Menu extends React.Component<Props, State> {\n  // @component ./MenuItem.tsx\n  static Item = MenuItem;\n\n  static defaultProps = {\n    statusBarHeight: APPROX_STATUSBAR_HEIGHT,\n    overlayAccessibilityLabel: 'Close menu',\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return { rendered: true };\n    }\n\n    return null;\n  }\n\n  state = {\n    rendered: this.props.visible,\n    top: 0,\n    left: 0,\n    menuLayout: { width: 0, height: 0 },\n    anchorLayout: { width: 0, height: 0 },\n    opacityAnimation: new Animated.Value(0),\n    scaleAnimation: new Animated.ValueXY({ x: 0, y: 0 }),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      this.updateVisibility();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  private anchor?: View | null = null;\n  private menu?: View | null = null;\n\n  private isCoordinate = (anchor: any): anchor is { x: number; y: number } =>\n    !React.isValidElement(anchor) &&\n    typeof anchor?.x === 'number' &&\n    typeof anchor?.y === 'number';\n\n  private measureMenuLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      if (this.menu) {\n        this.menu.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private measureAnchorLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      const { anchor } = this.props;\n      if (this.isCoordinate(anchor)) {\n        resolve({ x: anchor.x, y: anchor.y, width: 0, height: 0 });\n        return;\n      }\n\n      if (this.anchor) {\n        this.anchor.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private updateVisibility = async () => {\n    // Menu is rendered in Portal, which updates items asynchronously\n    // We need to do the same here so that the ref is up-to-date\n    await Promise.resolve();\n\n    if (this.props.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  private isBrowser = () => Platform.OS === 'web' && 'document' in global;\n\n  private focusFirstDOMNode = (el: View | null | undefined) => {\n    if (el && this.isBrowser()) {\n      // When in the browser, we want to focus the first focusable item on toggle\n      // For example, when menu is shown, focus the first item in the menu\n      // And when menu is dismissed, send focus back to the button to resume tabbing\n      const node: any = findNodeHandle(el);\n      const focusableNode = node.querySelector(\n        // This is a rough list of selectors that can be focused\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      focusableNode?.focus();\n    }\n  };\n\n  private handleDismiss = () => {\n    if (this.props.visible) {\n      this.props.onDismiss();\n    }\n    return true;\n  };\n\n  private handleKeypress = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      this.props.onDismiss();\n    }\n  };\n\n  private attachListeners = () => {\n    BackHandler.addEventListener('hardwareBackPress', this.handleDismiss);\n    Dimensions.addEventListener('change', this.handleDismiss);\n\n    this.isBrowser() && document.addEventListener('keyup', this.handleKeypress);\n  };\n\n  private removeListeners = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleDismiss);\n    Dimensions.removeEventListener('change', this.handleDismiss);\n\n    this.isBrowser() &&\n      document.removeEventListener('keyup', this.handleKeypress);\n  };\n\n  private show = async () => {\n    const windowLayout = Dimensions.get('window');\n    const [menuLayout, anchorLayout] = await Promise.all([\n      this.measureMenuLayout(),\n      this.measureAnchorLayout(),\n    ]);\n\n    // When visible is true for first render\n    // native views can be still not rendered and\n    // measureMenuLayout/measureAnchorLayout functions\n    // return wrong values e.g { x:0, y: 0, width: 0, height: 0 }\n    // so we have to wait until views are ready\n    // and rerun this function to show menu\n    if (\n      !windowLayout.width ||\n      !windowLayout.height ||\n      !menuLayout.width ||\n      !menuLayout.height ||\n      (!anchorLayout.width && !this.isCoordinate(this.props.anchor)) ||\n      (!anchorLayout.height && !this.isCoordinate(this.props.anchor))\n    ) {\n      requestAnimationFrame(this.show);\n      return;\n    }\n\n    this.setState(\n      () => ({\n        left: anchorLayout.x,\n        top: anchorLayout.y,\n        anchorLayout: {\n          height: anchorLayout.height,\n          width: anchorLayout.width,\n        },\n        menuLayout: {\n          width: menuLayout.width,\n          height: menuLayout.height,\n        },\n      }),\n      () => {\n        this.attachListeners();\n\n        const { animation } = this.props.theme;\n        Animated.parallel([\n          Animated.timing(this.state.scaleAnimation, {\n            toValue: { x: menuLayout.width, y: menuLayout.height },\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n          Animated.timing(this.state.opacityAnimation, {\n            toValue: 1,\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n        ]).start(({ finished }) => {\n          if (finished) {\n            this.focusFirstDOMNode(this.menu);\n          }\n        });\n      }\n    );\n  };\n\n  private hide = () => {\n    this.removeListeners();\n\n    const { animation } = this.props.theme;\n    Animated.timing(this.state.opacityAnimation, {\n      toValue: 0,\n      duration: ANIMATION_DURATION * animation.scale,\n      easing: EASING,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.setState({ menuLayout: { width: 0, height: 0 }, rendered: false });\n        this.state.scaleAnimation.setValue({ x: 0, y: 0 });\n        this.focusFirstDOMNode(this.anchor);\n      }\n    });\n  };\n\n  render() {\n    const {\n      visible,\n      anchor,\n      contentStyle,\n      style,\n      children,\n      theme,\n      statusBarHeight,\n      onDismiss,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const {\n      rendered,\n      menuLayout,\n      anchorLayout,\n      opacityAnimation,\n      scaleAnimation,\n    } = this.state;\n\n    let { left, top } = this.state;\n\n    // I don't know why but on Android measure function is wrong by 24\n    const additionalVerticalValue = Platform.select({\n      android: statusBarHeight,\n      default: 0,\n    });\n\n    const scaleTransforms = [\n      {\n        scaleX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [0, 1],\n        }),\n      },\n      {\n        scaleY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [0, 1],\n        }),\n      },\n    ];\n\n    const windowLayout = Dimensions.get('window');\n\n    // We need to translate menu while animating scale to imitate transform origin for scale animation\n    const positionTransforms = [];\n\n    // Check if menu fits horizontally and if not align it to right.\n    if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [-(menuLayout.width / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from left side\n      if (left < SCREEN_INDENT) {\n        left = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [menuLayout.width / 2, 0],\n        }),\n      });\n\n      left += anchorLayout.width - menuLayout.width;\n\n      const right = left + menuLayout.width;\n      // Check if menu position has enough space from right side\n      if (right > windowLayout.width - SCREEN_INDENT) {\n        left = windowLayout.width - SCREEN_INDENT - menuLayout.width;\n      }\n    }\n\n    // If the menu is larger than available vertical space,\n    // calculate the height of scrollable view\n    let scrollableMenuHeight = 0;\n\n    // Check if the menu should be scrollable\n    if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And bottom side of the screen has more space than top side\n      top <= windowLayout.height - top\n    ) {\n      // Scrollable menu should be below the anchor (expands downwards)\n      scrollableMenuHeight =\n        windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;\n    } else if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And top side of the screen has more space than bottom side\n      top >= windowLayout.height - top &&\n      // And menu overflows from top side\n      top <=\n        menuLayout.height -\n          anchorLayout.height +\n          SCREEN_INDENT -\n          additionalVerticalValue\n    ) {\n      // Scrollable menu should be above the anchor (expands upwards)\n      scrollableMenuHeight =\n        top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;\n    }\n\n    // Scrollable menu max height\n    scrollableMenuHeight =\n      scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT\n        ? windowLayout.height - 2 * SCREEN_INDENT\n        : scrollableMenuHeight;\n\n    // Menu is typically positioned below the element that generates it\n    // So first check if it fits below the anchor (expands downwards)\n    if (\n      // Check if menu fits vertically\n      top <=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue ||\n      // Or if the menu overflows from bottom side\n      (top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n        // And bottom side of the screen has more space than top side\n        top <= windowLayout.height - top)\n    ) {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from top side\n      if (top < SCREEN_INDENT) {\n        top = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0],\n        }),\n      });\n\n      top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);\n\n      const bottom =\n        top +\n        (scrollableMenuHeight || menuLayout.height) +\n        additionalVerticalValue;\n\n      // Check if menu position has enough space from bottom side\n      if (bottom > windowLayout.height - SCREEN_INDENT) {\n        top =\n          scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT\n            ? -SCREEN_INDENT * 2\n            : windowLayout.height -\n              menuLayout.height -\n              SCREEN_INDENT -\n              additionalVerticalValue;\n      }\n    }\n\n    const shadowMenuContainerStyle = {\n      opacity: opacityAnimation,\n      transform: scaleTransforms,\n      borderRadius: theme.roundness,\n      ...(scrollableMenuHeight ? { height: scrollableMenuHeight } : {}),\n    };\n\n    const positionStyle = {\n      top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue,\n      ...(I18nManager.isRTL ? { right: left } : { left }),\n    };\n\n    return (\n      <View\n        ref={(ref) => {\n          this.anchor = ref;\n        }}\n        collapsable={false}\n      >\n        {this.isCoordinate(anchor) ? null : anchor}\n        {rendered ? (\n          <Portal>\n            <TouchableWithoutFeedback\n              accessibilityLabel={overlayAccessibilityLabel}\n              accessibilityRole=\"button\"\n              onPress={onDismiss}\n            >\n              <View style={StyleSheet.absoluteFill} />\n            </TouchableWithoutFeedback>\n            <View\n              ref={(ref) => {\n                this.menu = ref;\n              }}\n              collapsable={false}\n              accessibilityViewIsModal={visible}\n              style={[styles.wrapper, positionStyle, style]}\n              pointerEvents={visible ? 'box-none' : 'none'}\n              onAccessibilityEscape={onDismiss}\n            >\n              <Animated.View style={{ transform: positionTransforms }}>\n                <Surface\n                  style={\n                    [\n                      styles.shadowMenuContainer,\n                      shadowMenuContainerStyle,\n                      contentStyle,\n                    ] as StyleProp<ViewStyle>\n                  }\n                >\n                  {(scrollableMenuHeight && (\n                    <ScrollView>{children}</ScrollView>\n                  )) || <React.Fragment>{children}</React.Fragment>}\n                </Surface>\n              </Animated.View>\n            </View>\n          </Portal>\n        ) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n  },\n  shadowMenuContainer: {\n    opacity: 0,\n    paddingVertical: 8,\n    elevation: 8,\n  },\n});\n\nexport default withTheme(Menu);\n","import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport Icon, { isValidIcon, IconSource, isEqualIcon } from './Icon';\n\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Icon to display for the `CrossFadeIcon`.\n   */\n  source: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color: string;\n  /**\n   * Size of the icon.\n   */\n  size: number;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst CrossFadeIcon = ({ color, size, source, theme }: Props) => {\n  const [currentIcon, setCurrentIcon] = React.useState<IconSource>(\n    () => source\n  );\n  const [previousIcon, setPreviousIcon] = React.useState<IconSource | null>(\n    null\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(1));\n\n  const { scale } = theme.animation;\n\n  if (currentIcon !== source) {\n    setPreviousIcon(() => currentIcon);\n    setCurrentIcon(() => source);\n  }\n\n  React.useEffect(() => {\n    if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {\n      fade.setValue(1);\n\n      Animated.timing(fade, {\n        duration: scale * 200,\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [currentIcon, previousIcon, fade, scale]);\n\n  const opacityPrev = fade;\n  const opacityNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      })\n    : 1;\n\n  const rotatePrev = fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['-90deg', '0deg'],\n  });\n\n  const rotateNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['0deg', '-180deg'],\n      })\n    : '0deg';\n\n  return (\n    <View\n      style={[\n        styles.content,\n        {\n          height: size,\n          width: size,\n        },\n      ]}\n    >\n      {previousIcon ? (\n        <Animated.View\n          style={[\n            styles.icon,\n            {\n              opacity: opacityPrev,\n              transform: [{ rotate: rotatePrev }],\n            },\n          ]}\n        >\n          <Icon source={previousIcon} size={size} color={color} />\n        </Animated.View>\n      ) : null}\n      <Animated.View\n        style={[\n          styles.icon,\n          {\n            opacity: opacityNext,\n            transform: [{ rotate: rotateNext }],\n          },\n        ]}\n      >\n        <Icon source={currentIcon} size={size} color={color} />\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default withTheme(CrossFadeIcon);\n\nconst styles = StyleSheet.create({\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { NativeModules, Platform } from 'react-native';\n\n// Use the existence of expo-constants as a heuristic for determining if the\n// status bar is translucent on Android. This should be replaced in the future\n// with react-native-safe-area-context.\nconst estimatedStatusBarHeight =\n  NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n    ?.statusBarHeight ?? 0;\n\nexport const APPROX_STATUSBAR_HEIGHT = Platform.select({\n  android: estimatedStatusBarHeight,\n  ios: Platform.Version < 11 ? estimatedStatusBarHeight : 0,\n});\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { useTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nfunction MenuItem({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n}: Props) {\n  const theme = useTheme();\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n}\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default MenuItem;\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"],"sourceRoot":""}