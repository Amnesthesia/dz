{"version":3,"sources":["screens/authenticated/users/slice.ts","components/forms/rig_inspection/slice.tsx","components/forms/rig_inspection_template/slice.tsx","redux/store.ts","redux/global.ts","components/forms/dropzone/slice.tsx","constants/Colors.ts","components/notifications/slice.ts","screens/unauthenticated/login/slice.ts","screens/unauthenticated/signup/slice.ts","components/ScrollableScreen.tsx","hooks/useRestriction.ts","hooks/useColorScheme.web.ts","redux/index.ts","components/forms/plane/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","components/forms/user/slice.tsx","screens/authenticated/manifest/slice.ts","components/forms/slot/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/rig/slice.tsx","components/forms/credits/slice.tsx","components/forms/slots_multiple/slice.tsx","components/notifications/Notifications.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","hooks/usePalette.ts","components/forms/dropzone/DropzoneForm.tsx","components/Themed.tsx","graphql/Apollo.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","navigation/SetupWarning.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","screens/authenticated/packing/PackingScreen.tsx","navigation/tabs/packing.tsx","navigation/tabs/profile.tsx","navigation/tabs/settings.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/createMutation.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf"],"names":["initialState","isSearchVisible","searchText","createSlice","name","reducers","setSearchText","state","action","payload","setSearchVisible","reset","fields","ok","setOk","setField","index","item","console","log","map","field","idx","setFields","JSON","parse","error","message","original","setOriginal","definition","err","manifestActions","loginSlice","actions","manifestSlice","globalActions","signUpSlice","globalSlice","usersActions","usersSlice","snackbarActions","notificationSlice","slotForm","planeFormSlice","dropzoneFormSlice","ticketTypeFormSlice","extraFormSlice","loadFormSlice","slotFormSlice","userForm","userFormSlice","dropzoneUserForm","dropzoneUserFormSlice","rigForm","rigFormSlice","rigInspectionForm","rigInspectionFormSlice","rigInspectionTemplateForm","rigInspectionTemplateSlice","creditsForm","creditsFormSlice","slotsMultipleForm","slotsMultipleFormSlice","persistConfig","key","storage","Platform","OS","require","default","AsyncStorage","whitelist","reducer","persistCombineReducers","global","notifications","login","signup","dropzoneForm","planeForm","ticketTypeForm","extraForm","loadForm","manifest","rigInspectionTemplate","usersScreen","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","colors","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","currentUser","currentDropzone","permissions","credentials","theme","isDarkMode","setCredentials","setUser","setPermissions","setPrimaryColor","primary","setAccentColor","accent","setDropzone","primaryColor","secondaryColor","toggleDarkMode","logout","typedKey","federation","value","banner","isCreditSystemEnabled","isPublic","setFieldError","successColor","warningColor","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","queue","hideSnackbar","slice","showSnackbar","push","email","password","setEmail","setPassword","setEmailError","setPasswordError","passwordConfirmation","exitWeight","phone","license","setFederation","ScrollableScreen","props","height","useWindowDimensions","style","children","contentContainerStyle","rest","keyboardDismissMode","keyboardShouldPersistTaps","contentInsetAdjustmentBehavior","styles","container","backgroundColor","surface","content","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","QUERY_PERMISSIONS","gql","useRestriction","permission","data","useQuery","variables","dropzoneId","Number","id","dropzone","includes","useColorScheme","registration","minSlots","maxSlots","hours","nextMaintenanceHours","cost","altitude","allowManifestingSelf","isTandem","extras","ticketTypeIds","ticketTypes","gca","dispatchAt","isOpen","loadMaster","pilot","plane","rigs","selectedUsers","setSelected","jumpType","load","rig","ticketType","user","passengerName","passengerExitWeight","role","expiresAt","make","model","serial","repackExpiresAt","canopySize","amount","status","users","setFromSlots","slot","rigId","find","i","setDropzoneUsers","dzUser","availableRigs","MyComponent","dispatch","palette","usePalette","notification","length","variantStyle","visible","onDismiss","duration","variant","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","lightColor","darkColor","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","Colors","WebBrowser","developmentModeText","marginBottom","fontSize","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","marginTop","welcomeImage","width","resizeMode","marginLeft","marginHorizontal","marginVertical","codeHighlightText","color","borderRadius","paddingVertical","colorScheme","QUERY_FEDERATIONS","DropzoneForm","loading","useState","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","useEffect","federations","stringify","onPickImage","useCallback","a","async","getDocumentAsync","multiple","type","result","uri","Title","Content","padding","onColorSelected","sliderComponent","SliderComponent","defaultColor","undefined","hideSliders","Actions","disabled","current","next","maxHeight","Cover","source","justifyContent","Subheader","subheader","mode","label","onChangeText","newValue","anchor","Item","title","icon","left","description","display","paddingLeft","useThemeColor","colorName","colorFromProps","Text","otherProps","View","httpLink","createHttpLink","Constants","extra","url","Apollo","errorLink","useMemo","onError","graphQLErrors","networkError","some","extensions","code","locations","authLink","setContext","_","headers","accessToken","tokenType","client","ApolloClient","link","concat","cache","InMemoryCache","prefixes","Linking","config","screens","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","replace","linkText","fontWeight","Warning","Paragraph","Button","SetupWarning","credits","isRigSetUp","isExitWeightDefined","isMembershipInDate","isReserveInDate","isRigInspectionComplete","useNavigation","missing","filter","Boolean","join","navigate","flexDirection","QUERY_CURRENT_USER","AppBar","previous","scene","hideWarnings","contextMenuOpen","setContextMenuOpen","useLazyQuery","loadData","Appbar","Header","BackAction","goBack","descriptor","options","titleStyle","Chip","Menu","IconButton","Divider","Date","getTime","isRigInspected","rigInspections","inspection","isRepackInDate","ManifestScreen","React","CreateLoadScreen","ManifestGroupScreen","ManifestGroupUserSelectScreen","Manifest","createStackNavigator","ManifestTab","globalState","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","separator","RigScreen","UpdateUserScreen","Profile","ProfileTab","initialParams","userId","SettingsScreen","DropzoneSettingsScreen","TicketTypeSettingsScreen","CreatePlaneScreen","UpdatePlaneScreen","UpdateDropzoneScreen","PlanesScreen","RigInspectionTemplateScreen","CreateTicketTypeScreen","UpdateTicketTypeScreen","CreateExtraScreen","UpdateExtraScreen","ExtrasScreen","Settings","SettingsTab","UsersScreen","SearchableAppBar","RigInspectionScreen","searchVisible","onSearch","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","canManageDropzone","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","size","MaterialCommunityIcons","unmountOnBlur","UsersTab","QUERY_DROPZONES","refetch","SafeAreaView","FlatList","dropzones","edges","numColumns","refreshing","onRefresh","ListEmptyComponent","empty","renderItem","Card","Dimensions","get","margin","node","FAB","fab","small","position","right","bottom","isRequired","pattern","validates","callback","createMutation","mutation","getPayload","fieldErrorMap","opts","onFieldError","onSuccess","useMutation","mutate","hasErrors","Object","keys","forEach","x","variable","validator","test","validate","fieldErrors","fieldName","errors","createDropzone","SignupScreen","useMutationCreateDropzone","e","federationId","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","emailRegex","RegExp","hasError","userLogin","authenticatable","TextInput","HelperText","secureTextEntry","button","userSignUp","useMutationSignUp","onSignUp","toString","keyboardType","Affix","parseFloat","textContentType","passwordRules","licenseId","maxWidth","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","fallback","ProgressBar","indeterminate","NavigationContainer","linking","LinkingConfiguration","StatusBar","Notifications","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","useCachedResources","ActivityIndicator","navigator","window","addEventListener","serviceWorker","register","scope","then","catch","module","exports"],"mappings":"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","file":"static/js/app.4d9802e7.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nconst initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'usersScreen',\n  initialState,\n  reducers: {\n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FieldItem } from \"../rig_inspection_template/slice\";\n\n\n\ninterface IRigInspectionEditState {\n  fields: FieldItem[],\n  ok: boolean;\n}\n\nconst initialState: IRigInspectionEditState = {\n  fields: [],\n  ok: false\n};\n\n\nexport default createSlice({\n  name: 'rigInspectionForm',\n  initialState,\n  reducers: {\n\n    setOk: (state: IRigInspectionEditState, action: PayloadAction<boolean>) => {\n      state.ok = action.payload;\n    },\n    setField: (state: IRigInspectionEditState, action: PayloadAction<[number, FieldItem]>) => {\n      const [index, item] = action.payload;\n\n      console.log({ item, index, fields: state.fields });\n      state.fields = state.fields.map((field, idx) => idx === index ? item : field);\n    },\n\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<string>) => {\n      try {\n        state.fields = JSON.parse(action.payload)\n      } catch (error) {\n        console.error(\"Failed to read rig inspection template\", error.message, action.payload);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.ok = initialState.ok;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, FormTemplate } from \"../../../graphql/schema\";\n\n\nexport interface FieldItem {\n  label: string;\n  description?: string;\n  isRequired?: boolean;\n  valueType: \"integer\" | \"boolean\" | \"date\" | \"string\";\n  value?: number | boolean | string;\n}\n\ninterface IRigInspectionEditState {\n  original: FormTemplate | null;\n  fields: FieldItem[],\n}\n\nconst initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'rigInspectionTemplateForm',\n  initialState,\n  reducers: {\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<FieldItem[]>) => {\n      state.fields = action.payload;\n    },\n\n    setOriginal: (state: IRigInspectionEditState, action: PayloadAction<FormTemplate>) => {\n      state.original = action.payload;\n\n      try {\n        state.fields = JSON.parse(action.payload.definition!);\n      } catch(err) {\n        console.log(\"Invalid json: \", action.payload.definition);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport AsyncStorage from '@react-native-community/async-storage';\n\n\n\nimport { persistStore, persistCombineReducers } from \"redux-persist\";\n\n\nimport globalSlice from \"./global\";\nimport notificationSlice from \"../components/notifications/slice\";\n\nimport loginSlice from \"../screens/unauthenticated/login/slice\";\nimport manifestSlice from \"../screens/authenticated/manifest/slice\";\nimport signUpSlice from \"../screens/unauthenticated/signup/slice\";\nimport usersSlice from \"../screens/authenticated/users/slice\";\nimport dropzoneFormSlice from \"../components/forms/dropzone/slice\";\nimport planeFormSlice from \"../components/forms/plane/slice\";\nimport ticketTypeFormSlice from \"../components/forms/ticket_type/slice\";\nimport extraFormSlice from \"../components/forms/extra/slice\";\nimport loadFormSlice from \"../components/forms/load/slice\";\nimport slotFormSlice from \"../components/forms/slot/slice\";\nimport userFormSlice from \"../components/forms/user/slice\";\nimport dropzoneUserFormSlice from \"../components/forms/dropzone_user/slice\";\nimport rigFormSlice from \"../components/forms/rig/slice\";\nimport rigInspectionFormSlice from \"../components/forms/rig_inspection/slice\";\nimport rigInspectionTemplateSlice from \"../components/forms/rig_inspection_template/slice\";\nimport creditsFormSlice from \"../components/forms/credits/slice\";\nimport slotsMultipleFormSlice from \"../components/forms/slots_multiple/slice\";\n\n// Re-export actions:\nexport const { actions: loginActions } = loginSlice;\nexport const { actions: manifestActions } = manifestSlice;\nexport const { actions: signUpActions } = signUpSlice;\nexport const { actions: globalActions } = globalSlice;\nexport const { actions: usersActions } = usersSlice;\nexport const { actions: snackbarActions } = notificationSlice;\nexport const { actions: planeForm } = planeFormSlice;\nexport const { actions: dropzoneForm } = dropzoneFormSlice;\nexport const { actions: ticketTypeForm } = ticketTypeFormSlice;\nexport const { actions: extraForm } = extraFormSlice;\nexport const { actions: loadForm } = loadFormSlice;\nexport const { actions: slotForm } = slotFormSlice;\nexport const { actions: userForm } = userFormSlice;\nexport const { actions: dropzoneUserForm } = dropzoneUserFormSlice;\nexport const { actions: rigForm } = rigFormSlice;\nexport const { actions: rigInspectionForm } = rigInspectionFormSlice;\nexport const { actions: rigInspectionTemplateForm } = rigInspectionTemplateSlice;\nexport const { actions: creditsForm } = creditsFormSlice;\nexport const { actions: slotsMultipleForm } = slotsMultipleFormSlice;\n\nconst persistConfig = {\n  key: 'root',\n  storage: Platform.OS === \"web\" ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\n\nconst reducer = persistCombineReducers(persistConfig, {\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    login: loginSlice.reducer,\n    signup: signUpSlice.reducer,\n    dropzoneForm: dropzoneFormSlice.reducer,\n    planeForm: planeFormSlice.reducer,\n    ticketTypeForm: ticketTypeFormSlice.reducer,\n    extraForm: extraFormSlice.reducer,\n    loadForm: loadFormSlice.reducer,\n    slotForm: slotFormSlice.reducer,\n    slotsMultipleForm: slotsMultipleFormSlice.reducer,\n    manifest: manifestSlice.reducer,\n    userForm: userFormSlice.reducer,\n    dropzoneUserForm: dropzoneUserFormSlice.reducer,\n    rigForm: rigFormSlice.reducer,\n    rigInspectionForm: rigInspectionFormSlice.reducer,\n    rigInspectionTemplate: rigInspectionTemplateSlice.reducer,\n    usersScreen: usersSlice.reducer,\n    creditsForm: creditsFormSlice.reducer,\n  });\n\nexport const store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n\ninterface IGlobalState {\n  currentUser: User | null;\n  credentials: Credential | null;\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nconst initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  permissions: [],\n  credentials: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone | null>) => {\n      state.currentDropzone = action.payload;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<Dropzone>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","export const tintColorLight = '#2f95dc';\nexport const tintColorDark = '#fff';\nexport const successColor = \"#00C851\";\nexport const errorColor = \"#ff4444\";\nexport const warningColor = \"#FF8800\";\nexport const infoColor = \"#0099CC\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\" | \"warning\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport default createSlice({\n  name: 'notifications',\n  initialState: {\n    queue: []\n  } as INotificationState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n  const { style, children, contentContainerStyle, ...rest } = props;\n\n\n  return (\n    <ScrollView\n      {...rest}\n      keyboardDismissMode=\"on-drag\"\n      keyboardShouldPersistTaps=\"handled\"\n      contentInsetAdjustmentBehavior=\"always\"\n      style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, style]}\n      contentContainerStyle={[styles.content, contentContainerStyle]}\n    >\n      {children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useAppSelector } from \"../redux\";\n\nconst QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: string): boolean {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    }\n  });\n\n  return data?.dropzone?.currentUser?.permissions?.includes(permission as any) || false;\n}","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","export * from \"./store\";","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nconst initialState: IPlaneEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IPlaneEditState, action: PayloadAction<Plane>) => {\n      state.original = action.payload;\n      state.fields.hours.value = action.payload.hours!;\n      state.fields.minSlots.value = action.payload.minSlots!;\n      state.fields.maxSlots.value = action.payload.maxSlots!;\n      state.fields.name.value = action.payload.name!;\n      state.fields.registration.value = action.payload.registration!;\n      state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nconst initialState: ITicketTypeEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'ticketTypeForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ITicketTypeEditState, action: PayloadAction<TicketType>) => {\n      state.original = action.payload;\n      state.fields.altitude.value = action.payload.altitude!;\n      state.fields.cost.value = action.payload.cost!;\n      state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nconst initialState: IExtraEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'ExtraForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IExtraEditState, action: PayloadAction<Extra>) => {\n      state.original = action.payload;\n      state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n      state.fields.cost.value = action.payload.cost;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ILoadEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'loadForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ILoadEditState, action: PayloadAction<Load>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IUserEditState = {\n  original: null,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'userForm',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IUserEditState, action: PayloadAction<User>) => {\n      state.original = action.payload;\n      state.federation.value = action.payload.license?.federation!;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  selectedUsers: DropzoneUser[]\n  searchText: string;\n}\n\nconst initialState: IUserScreenState = {\n  isSearchVisible: false,\n  selectedUsers: [],\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'manifestScreen',\n  initialState,\n  reducers: {\n    setSelected: (state: IUserScreenState, action: PayloadAction<DropzoneUser[]>) => {\n      state.selectedUsers = action.payload;\n    },\n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"user\"\n  | \"exitWeight\"\n  | \"extras\"\n  | \"passengerExitWeight\"\n  | \"passengerName\"\n>\n\ninterface ISlotEditState {\n  original: Slot | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Fields[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    user: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n    passengerName: {\n      value: null,\n      error: null,\n    },\n    passengerExitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<Slot>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneUserEditState = {\n  original: null,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'dropzoneUserForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IDropzoneUserEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IRigEditState = {\n  original: null,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'rigForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IRigEditState, action: PayloadAction<Rig>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser, Transaction } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Transaction,\n  | \"amount\"\n  | \"status\"\n  | \"message\"\n>;\n\ninterface IDropzoneEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Transaction[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    amount: {\n      value: null,\n      error: null,\n    },\n    status: {\n      value: \"deposit\",\n      error: null,\n    },\n    message: {\n      value: \"\",\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'creditsForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { pick, pickBy } from \"lodash\";\nimport { SlotUser, Slot, DropzoneUser } from \"../../../graphql/schema\";\n\n\ninterface IFields extends Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"extras\"\n> {\n  users: SlotUser[];\n}\n\ninterface ISlotEditState {\n  original: IFields | null;\n  fields: {\n    [K in keyof IFields] - ?: {\n      value: IFields[K] | null;\n      error: string | null;\n    }\n  },\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    users: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotMultipleForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      \n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setFromSlots: (state: ISlotEditState, action: PayloadAction<Slot[]>) => {\n      state.fields.users.value = action.payload.map((slot) => ({\n          id: Number(slot.user?.id),\n          rigId: Number(slot.rig?.id),\n          exitWeight: Number(slot.exitWeight),\n        })\n      ) as SlotUser[];\n\n      state.fields.jumpType.value = action.payload.find(i => i)?.jumpType;\n      state.fields.load.value = action.payload.find(i => i)?.load!;\n      state.fields.extras.value = action.payload.find(i => i)?.extras;\n    },\n\n    setDropzoneUsers: (state: ISlotEditState, action: PayloadAction<DropzoneUser[]>) => {\n      state.fields.users.value = action.payload.map<SlotUser>((dzUser) => ({\n          id: Number(dzUser.user.id),\n          rigId: Number(dzUser?.availableRigs?.find(({ id }) => id)?.id),\n          exitWeight: Number(dzUser?.user.exitWeight),\n        })\n      ) as SlotUser[];\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<IFields>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\n\nexport default MyComponent;","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={{ width: \"100%\", marginVertical: 16, paddingHorizontal: 16 }}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport React, { useCallback, useMemo } from 'react';\nimport Constants from \"expo-constants\";\nimport { globalActions, snackbarActions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `Session expires`, variant: \"error\" })\n        )\n        dispatch(\n          globalActions.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          dispatch(\n            snackbarActions.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n          )\n        );\n      if (networkError) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"dz://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import React from \"react\";\nimport { Paragraph, Button} from \"react-native-paper\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\n\n\ninterface ISetupWarning {\n  credits: number;\n  loading: boolean;\n  isRigSetUp: boolean;\n  isRigInspectionComplete: boolean;\n  isCreditSystemEnabled: boolean;\n  isExitWeightDefined: boolean;\n  isReserveInDate: boolean;\n  isMembershipInDate: boolean;\n}\n\nfunction Warning(props: { title: string, action?: () => void }) {\n  return (\n    <View style={styles.warning}>\n        <Paragraph>\n          {props.title}\n        </Paragraph>\n        {!props.action ? null : (\n          <Button color=\"black\" mode=\"outlined\" onPress={() => props.action!()}>\n            Take me there\n          </Button>\n        )}\n      </View>\n  );\n}\n\nexport default function SetupWarning(props: ISetupWarning) {\n  const { credits, loading, isCreditSystemEnabled, isRigSetUp, isExitWeightDefined, isMembershipInDate, isReserveInDate, isRigInspectionComplete } = props;\n\n  if (props.loading) {\n    return null;\n  }\n  \n  const navigation = useNavigation();\n\n  if (!isExitWeightDefined || !isRigSetUp) {\n    const missing = [\n      !isExitWeightDefined ? \"exit weight\" : null,\n      !isRigSetUp ? \"at least one rig\" : null,\n    ].filter(Boolean);\n\n    return (\n      <Warning\n        title={`You need to define ${missing.join(\"and\")} in your profile`}\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    );\n  } else if (!isMembershipInDate) {\n    return (\n      <Warning\n        title=\"Your membership seems to be out of date\"\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    )\n  } else if (!isRigInspectionComplete) {\n    return (\n      <Warning\n        title={`Your rig must be inspected before you can manifest at this dropzone`}\n      />\n    );\n  } else if (!isReserveInDate) {\n    return (\n      <Warning\n        title={`Your reserve repack is due. You cannot manifest if your repack is out of date.`}\n      />\n    );\n  } else if (isCreditSystemEnabled && !credits && !loading) {\n    return (\n      <Warning\n        title=\"You'll need to top up on credits before you can manifest\"\n      />\n    );\n  }\n\n  return null;\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n","import React, { useEffect, useState } from \"react\";\nimport { Appbar, Menu, IconButton, Divider, Chip } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql, useLazyQuery, useQuery } from \"@apollo/client\";\nimport { Query } from \"../graphql/schema\";\nimport { globalActions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { StyleSheet } from \"react-native\";\nimport SetupWarning from \"./SetupWarning\";\n\nconst QUERY_CURRENT_USER = gql`\n  query QueryDropzone($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      isCreditSystemEnabled\n\n      currentUser {\n        id\n        credits\n        expiresAt\n        \n        rigInspections {\n          id\n          rig {\n            id\n            repackExpiresAt\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface IAppBarProps extends StackHeaderProps {\n  hideWarnings?: boolean;\n}\n\n\nfunction AppBar({ navigation, previous, scene, hideWarnings }: IAppBarProps) {\n  const [contextMenuOpen, setContextMenuOpen] = useState(false);\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [loadData, { data, loading }] = useLazyQuery<Query>(QUERY_CURRENT_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    }\n  });\n\n  useEffect(() => {\n    if (currentDropzone) {\n      loadData();\n    }\n  }, [loadData, currentDropzone])\n  \n  const showCredits = !!data?.dropzone?.isCreditSystemEnabled;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} titleStyle={{ fontWeight: \"bold\" }} />\n\n      <Chip mode=\"outlined\">\n        {`$${data?.dropzone?.currentUser?.credits || 0}`}\n      </Chip>\n      <Menu\n        onDismiss={() => setContextMenuOpen(false)}\n        visible={contextMenuOpen}\n        anchor={\n          <IconButton\n            icon=\"dots-vertical\"\n            color=\"#FFFFFF\"\n            onPress={() => setContextMenuOpen(true)}\n          />\n      }>\n        <Menu.Item\n          title=\"Change dropzone\"\n          icon=\"radar\"\n          onPress={() => {\n            dispatch(globalActions.setDropzone(null));\n            setContextMenuOpen(false);\n          }}\n        />\n        <Divider />\n        <Menu.Item\n          title=\"Log out\"\n          icon=\"logout\"\n          onPress={() => {\n            dispatch(globalActions.logout());\n            setContextMenuOpen(false);\n          }}\n        />\n      </Menu>\n    </Appbar.Header>\n    { hideWarnings ? null : (\n      <SetupWarning\n        credits={data?.dropzone?.currentUser?.credits || 0}\n        loading={loading}\n        isCreditSystemEnabled={!!data?.dropzone?.isCreditSystemEnabled}\n        isExitWeightDefined={!!data?.dropzone?.currentUser?.user?.exitWeight}\n        isMembershipInDate={!!data?.dropzone?.currentUser?.expiresAt && data?.dropzone?.currentUser?.expiresAt > (new Date().getTime() / 1000)}\n        isReserveInDate={\n          !!data?.dropzone?.currentUser?.user?.rigs?.some((rig) => {\n            const isRigInspected = data.dropzone?.currentUser?.rigInspections?.map((inspection) => inspection?.rig?.id === rig.id);\n            const isRepackInDate = (rig.repackExpiresAt || 0) > (new Date().getTime() / 1000);\n            return isRigInspected && isRepackInDate;\n          })\n        }\n        isRigInspectionComplete={!!data?.dropzone?.currentUser?.rigInspections?.length}\n        isRigSetUp={!!data?.dropzone?.currentUser?.user?.rigs?.length}\n      />\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { DropzoneUser, Slot } from '../../graphql/schema';\nimport { useAppSelector } from '../../redux';\n\nconst ManifestScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestScreen'));\nconst LoadScreen = React.lazy(() => import('../../screens/authenticated/load/LoadScreen'));\nconst CreateLoadScreen = React.lazy(() => import('../../screens/authenticated/load/CreateLoadScreen'));\nconst ManifestGroupScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupScreen'));\nconst ManifestGroupUserSelectScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupUserSelectScreen'));\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  LoadScreen: undefined;\n  CreateLoadScreen: undefined;\n  ManifestGroupUserSelectScreen: undefined;\n  ManifestGroupScreen: {\n    users?: DropzoneUser[];\n    slots?: Slot[]\n    loadId?: number\n  };\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Loads\" }}/>\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n      <Manifest.Screen name=\"ManifestGroupScreen\" component={ManifestGroupScreen} options={{ title: \"Manifest group\" }}/>\n      <Manifest.Screen name=\"ManifestGroupUserSelectScreen\" component={ManifestGroupUserSelectScreen} options={{ title: \"Select users\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function PackingScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/PackingScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport PackingScreen from '../../screens/authenticated/packing/PackingScreen';\n\nexport type IPackingTabParams = {\n  PackingScreen: undefined;\n}\n\nconst Packing = createStackNavigator<IPackingTabParams>();\n\nexport default function PackingTab() {\n  return (\n    <Packing.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Packing.Screen name=\"PackingScreen\" component={PackingScreen} />\n    </Packing.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\nimport { useAppSelector } from '../../redux';\n\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nconst RigScreen = React.lazy(() => import('../../screens/authenticated/rig/RigScreen'));\nconst UpdateUserScreen = React.lazy(() => import('../../screens/authenticated/profile/UpdateUserScreen'));\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  RigScreen: undefined;\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentDropzone?.currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n      <Profile.Screen name=\"RigScreen\" component={RigScreen} options={{ title: \"Rig\" }} />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst SettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/SettingsScreen'));\nconst DropzoneSettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneSettingsScreen'));\nconst TicketTypeSettingsScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/TicketTypesScreen'));\nconst CreatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/CreatePlaneScreen'));\nconst UpdatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/UpdatePlaneScreen'));\nconst UpdateDropzoneScreen = React.lazy(() => import('../../screens/authenticated/dropzones/UpdateDropzoneScreen'));\nconst PlanesScreen = React.lazy(() => import('../../screens/authenticated/planes/PlanesScreen'));\nconst RigInspectionTemplateScreen = React.lazy(() => import('../../screens/authenticated/settings/RigInspectionTemplateScreen'));\n\nconst CreateTicketTypeScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/CreateTicketTypeScreen'));\nconst UpdateTicketTypeScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/UpdateTicketTypeScreen'));\n\nconst CreateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/CreateExtraScreen'));\nconst UpdateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/UpdateExtraScreen'));\nconst ExtrasScreen = React.lazy(() => import('../../screens/authenticated/extras/ExtrasScreen'));\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  DropzoneSettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  CreateTicketTypeScreen: undefined;\n  UpdateTicketTypeScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n  RigInspectionTemplateScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"DropzoneSettingsScreen\" component={DropzoneSettingsScreen} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateTicketTypeScreen\" component={CreateTicketTypeScreen} options={{ title: \"New ticket type\" }} />\n      <Settings.Screen name=\"UpdateTicketTypeScreen\" component={UpdateTicketTypeScreen} options={{ title: \"Edit ticket type\" }}/>\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n      <Settings.Screen name=\"RigInspectionTemplateScreen\" component={RigInspectionTemplateScreen} options={{ title: \"Rig Inspection Form\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst UsersScreen = React.lazy(() => import('../../screens/authenticated/users/UsersScreen'));\nconst SearchableAppBar = React.lazy(() => import('../../screens/authenticated/users/AppBar'));\nconst RigInspectionScreen = React.lazy(() => import('../../screens/authenticated/rig/RigInspectionScreen'));\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nimport { useAppDispatch, useAppSelector, usersActions } from '../../redux';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: {\n    select?: boolean;\n    loadId: number;\n    onSelect?(): void;\n  };\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.usersScreen);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(usersActions.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(usersActions.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport PackingTab from \"./tabs/packing\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useRestriction from '../hooks/useRestriction';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(\"readUser\");\n  const canCreatePacks = useRestriction(\"createPackjob\");\n  const canManageDropzone = useRestriction(\"updateDropzone\");\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n        style: {\n          backgroundColor: theme.colors.primary,\n        }\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n      { false && canCreatePacks && (\n        <BottomTab.Screen\n          name=\"Packing\"\n          component={PackingTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"parachute\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { canManageDropzone && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { globalActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation } from '@react-navigation/core';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) =>\n          <Card\n            style={{\n              width: (Dimensions.get(\"window\").width / 2) - 32,\n              margin: 8\n            }}\n            onPress={async ()=> {\n              if (item?.node) {\n                dispatch(\n                  globalActions.setDropzone(item.node)\n                );\n              }\n            }}\n          >\n            <Card.Cover source={{ uri: item?.node?.banner as string }} />\n            <Card.Content>\n              <Title>{item?.node?.name}</Title>\n            </Card.Content>\n          </Card>\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 32,\n    right: 16,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(snackbarActions.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(globalActions.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Text, View } from '../../../components/Themed';\nimport { useAppSelector, useAppDispatch, globalActions, snackbarActions } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              globalActions.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              globalActions.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(snackbarActions.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign in</Text>\n\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button style={styles.button} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 10,\n    width: \"100%\",\n    padding: 96,\n  },\n  button: {\n    marginTop: 10,\n    width: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"./slice\";\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.signup);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          globalActions.setCredentials(payload.credentials)\n        );\n        dispatch(\n          globalActions.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen contentContainerStyle={{ padding: 48, alignItems: \"center\" }}>\n      <Text style={styles.title}>Sign up</Text>\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) =>\n            !newValue || /\\d+/.test(newValue) ? dispatch(actions.setField([\"exitWeight\", parseFloat(newValue || \"0\")])) : null\n          }\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          onPress={() =>\n            onSignUp({\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React, { Suspense } from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator, ProgressBar } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Notifications from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\n\n\n\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  return (\n    <Suspense\n      fallback={\n        <View style={{ flex: 1, flexGrow: 1 }}>\n          <ProgressBar indeterminate color={state?.theme?.colors?.accent} visible />\n        </View>\n      }\n    >\n      <Apollo>\n        <MaterialProvider theme={state.theme}>\n          <SafeAreaProvider>\n            <NavigationContainer\n              linking={LinkingConfiguration}\n              theme={state.theme}>\n              <RootNavigator />\n            </NavigationContainer>\n\n            <StatusBar />\n            <Notifications />\n          </SafeAreaProvider>\n        </MaterialProvider>\n      </Apollo>\n    </Suspense>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}