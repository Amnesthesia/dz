{"version":3,"sources":["components/Themed.tsx","components/NoResults.tsx","components/JumpTypeSelect.tsx","components/TicketTypeSelect.tsx","components/RigSelect.tsx","components/forms/slot/SlotForm.tsx","components/dialogs/ManifestUserDialog.tsx","screens/authenticated/manifest/GetStarted.tsx","components/GcaChip.tsx","components/LoadMasterChip.tsx","components/PilotChip.tsx","components/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","screens/authenticated/manifest/ManifestScreen.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","NoResults","title","subtitle","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","QUERY_JUMP_TYPES","gql","JumpTypeSelect","useState","isMenuOpen","setMenuOpen","useAppSelector","state","global","useQuery","variables","allowedForUserId","userId","data","loading","refetch","Subheader","Menu","onDismiss","visible","anchor","Item","onPress","value","name","description","required","jumpTypes","map","jumpType","onSelect","QUERY_TICKET_TYPES","TicketTypeSelect","globalState","dropzoneId","Number","currentDropzone","id","allowManifestingSelf","ticketTypes","ticketType","QUERY_RIGS","RigSelect","make","model","canopySize","left","Icon","icon","rigs","rig","actions","slice","SlotForm","slotForm","dispatch","useAppDispatch","React","fields","user","exitWeight","setField","length","isEdit","original","allowedToManifestOthers","currentUser","useRestriction","console","log","HelperText","type","error","extras","ScrollView","horizontal","ticketAddons","extra","Chip","selected","some","filter","cost","Divider","TextInput","field","mode","label","toString","keyboardType","Affix","text","onChangeText","newValue","marginBottom","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","useCallback","hasErrors","setFieldError","JSON","stringify","onManifest","a","async","jumpTypeId","extraIds","loadId","load","rigId","ticketTypeId","result","createSlot","fieldErrors","message","errors","snackbarActions","showSnackbar","variant","onSuccess","Portal","Dialog","open","ProgressBar","indeterminate","colors","accent","Title","Content","Actions","Button","reset","onClose","GetStarted","hasPlanes","hasTicketTypes","palette","isPublic","usePalette","separator","success","fontSize","fontWeight","marginVertical","QUERY_DROPZONE_USERS","GCAChip","permissions","marginHorizontal","dropzone","dropzoneUsers","edges","edge","node","LoadMasterChip","allowed","slots","slot","PilotChip","QUERY_PLANES","PlaneChip","planes","plane","QUERY_LOAD","MUTATION_UPDATE_LOAD","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","useNavigation","loadNumber","canManifest","mutationUpdateLoad","mutation","updatePilot","pilot","pilotId","updateGCA","gca","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","dispatchAt","Math","ceil","onLanded","hasLanded","canUpdateLoad","canEditSelf","canEditOthers","getSlotPressAction","onSlotPress","maxSlots","Card","elevation","undefined","overflow","flexDirection","loadMaster","DataTable","Header","numeric","Row","pointerEvents","Cell","altitude","Array","from","v","i","Paragraph","differenceInMinutes","flexGrow","marginLeft","disabled","Boolean","QUERY_DROPZONE","ManifestScreen","isDialogOpen","setDialogOpen","earliestTimestamp","startOfDay","fetchPolicy","navigation","isFocused","useIsFocused","isSetupComplete","globalActions","setDropzone","setUser","primaryColor","primary","setPrimaryColor","secondaryColor","canCreateLoad","Dimensions","get","loads","contentContainerStyle","numColumns","refreshing","onRefresh","renderItem","item","index","key","isOpen","isFull","setOriginal","FAB","small","navigate"],"mappings":"yOAMO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAQC,cACRC,EAAiBJ,EAAME,GAE7B,OAAIE,GAGKC,IAAOH,GAAOD,GAYlB,SAASK,EAAKN,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/BW,EAAQZ,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,QAEpE,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEI,SAASJ,IAAYG,IAG9C,SAASI,EAAKd,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/Be,EAAkBhB,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,cAE9E,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEQ,mBAAmBR,IAAYG,M,iCCvC/D,wFAKe,SAASM,EAAT,GAA6E,IAAxDC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,SACzC,OACE,kBAAC,IAAD,CAAMX,MAAOY,EAAOC,OAClB,kBAAC,IAAD,KAAQH,GACR,kBAAC,IAAD,CAAWV,MAAO,CAAEc,UAAW,WAC5BH,IAOT,IAAMC,EAASG,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,QAAS,EACTC,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ,GAEVZ,MAAO,CACLK,KAAM,EACNQ,WAAY,SACZC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,W,mXCnBNC,EAAmBC,YAAH,yJASP,SAASC,EAAevC,GAAyB,IAAD,MAC3BwC,oBAAS,GADkB,WACtDC,EADsD,KAC1CC,EAD0C,QAEzCC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAEfC,mBAAgBT,EAAkB,CACnEU,UAAW,CACTC,iBAAkBhD,EAAMiD,WAFpBC,EAJqD,EAIrDA,KAJqD,EAI/CC,QAJ+C,EAItCC,QAKvB,OACE,oCACA,kBAAC,IAAKC,UAAN,kBAGA,kBAACC,EAAA,EAAD,CACEC,UAAW,kBAAMb,GAAY,IAC7Bc,QAASf,EACTgB,OACE,kBAAC,IAAKC,KAAN,CACEC,QAAS,WACPjB,GAAY,IAEdzB,OACE,SAAAjB,EAAM4D,YAAN,IAAaC,OAAQ,0BAEvBC,YAAc9D,EAAM+D,SAAwB,KAAb,cAXrC,MAeIb,GAfJ,SAeIA,EAAMc,gBAfV,EAeI,EAAiBC,KAAI,SAACC,GAAD,OACnB,kBAAC,IAAKR,KAAN,CACEC,QAAS,WACPjB,GAAY,GACZ1C,EAAMmE,SAASD,IAEjBjD,MACEiD,EAASL,MAAQ,WC7C/B,IAAMO,EAAqB9B,YAAH,4RAeT,SAAS+B,EAAiBrE,GAA2B,IAAD,QAC/BwC,oBAAS,GADsB,WAC1DC,EAD0D,KAC9CC,EAD8C,KAE3D4B,EAAc3B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAFe,EAI9BC,mBAAgBsB,EAAoB,CACrErB,UAAW,CACTwB,WAAYC,OAAM,SAACF,EAAYG,sBAAb,EAAC,EAA6BC,IAChDC,qBAAsB3E,EAAM2E,wBAHxBzB,EAJyD,EAIzDA,KAJyD,EAInDC,QAJmD,EAI1CC,QAMvB,OACE,oCACE,kBAAC,IAAKC,UAAN,eAGA,kBAACC,EAAA,EAAD,CACEC,UAAW,kBAAMb,GAAY,IAC7Bc,QAASf,EACTgB,OACE,kBAAC,IAAKC,KAAN,CACEC,QAAS,WACPjB,GAAY,IAEdzB,OACE,SAAAjB,EAAM4D,YAAN,IAAaC,OAAQ,4BAEvBC,YAAc9D,EAAM+D,SAAwB,KAAb,cAXrC,MAeIb,GAfJ,SAeIA,EAAM0B,kBAfV,EAeI,EAAmBX,KAAI,SAACY,GAAD,OACrB,kBAAC,IAAKnB,KAAN,CACEC,QAAS,WACPjB,GAAY,GACZ1C,EAAMmE,SAASU,IAEjB5D,MACE4D,EAAWhB,MAAQ,W,eCnD7BiB,EAAaxC,YAAH,4NAeD,SAASyC,EAAU/E,GAAoB,IAAD,YACjBwC,oBAAS,GADQ,WAC5CC,EAD4C,KAChCC,EADgC,KAE7C4B,EAAc3B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAE1CK,EAASJ,mBAAgBgC,EAAY,CAC3C/B,UAAW,CACTwB,WAAYC,OAAM,SAACF,EAAYG,sBAAb,EAAC,EAA6BC,OAF5CxB,KAKR,OACE,kBAACI,EAAA,EAAD,CACEC,UAAW,kBAAMb,GAAY,IAC7Bc,QAASf,EACTgB,OACE,kBAAC,IAAKC,KAAN,CACEC,QAAS,WACPjB,GAAY,IAEdzB,MACEjB,EAAM4D,OAAN,SACK5D,EAAM4D,YADX,EACK,EAAaoB,MADlB,cAC0BhF,EAAM4D,YADhC,EAC0B,EAAaqB,OADvC,OACiD,SAAAjF,EAAM4D,YAAN,IAAasB,aAAc,KAD5E,QAEE,aAEJpB,YAAc9D,EAAM+D,SAAwB,KAAb,WAC/BoB,KAAM,kBAAM,kBAAC,IAAKC,KAAN,CAAWC,KAAK,kBAdlC,MAkBInC,GAlBJ,SAkBIA,EAAMoC,WAlBV,EAkBI,EAAYrB,KAAI,SAACsB,GAAD,iBACd,kBAAC,IAAK7B,KAAN,CACEC,QAAS,WACPjB,GAAY,GACZ1C,EAAMmE,SAASoB,IAEjBtE,OAAK,SACAjB,EAAM4D,YADN,EACA,EAAaoB,MADb,cACqBhF,EAAM4D,YAD3B,EACqB,EAAaqB,OAEvCnB,aAAW,SACN9D,EAAM4D,YADA,EACN,EAAasB,YADP,c,ICvDfM,EAAYC,IAAZD,QACO,SAASE,IAAY,IAAD,gDAC3B9C,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAM+C,YACtCC,EAAWC,cACXvB,EAAc3B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAElDiD,aAAgB,WAAO,IAAD,EACU,EAA9B,SAAIlD,EAAMmD,OAAOC,OAAb,EAAmBpC,QAChBhB,EAAMmD,OAAOE,WAAWrC,OAC3BgC,EACEJ,EAAQU,SAAS,CAAC,aAAc1B,OAAO5B,EAAMmD,OAAOC,KAAKpC,MAAMqC,YAAc,QAI5ErD,EAAMmD,OAAOR,IAAI3B,OAAlB,SAA2BhB,EAAMmD,OAAOC,KAAKpC,MAAM0B,OAAxB,EAA8Ba,QAC3DP,EACEJ,EAAQU,SAAS,CAAC,MAAOtD,EAAMmD,OAAOC,KAAKpC,MAAM0B,KAAK,SAK3D,UAAC1C,EAAMmD,SAAP,SAAC,EAAcC,OAAf,SAAC,EAAoBpC,YAArB,EAAC,EAA2Bc,KAE/B,IAAM0B,EAAM,MAAGxD,GAAH,SAAGA,EAAOyD,eAAV,EAAG,EAAiB3B,GAQ1B4B,GAPc,MAAL1D,GAAA,SAAAA,EAAOmD,SAAP,WAAeC,OAAf,WAAqBpC,QAArB,EAA4Bc,GAA5B,SAAmCJ,EAAYiC,cAAZ,EAAyB7B,GAG7C8B,YAC5BJ,EAAS,aAAe,cAGMI,YAC9BJ,EAAS,iBAAmB,mBAI9B,OAFAK,QAAQC,IAAI,SAAU9D,EAAMmD,QAG1B,gCACE,gBAACxD,EAAD,CACEqB,MAAOhB,EAAMmD,OAAO7B,SAASN,MAC7BG,UAAQ,EACRd,OAAQuB,OAAM,MAAC5B,GAAD,SAACA,EAAOmD,SAAR,SAAC,EAAeC,OAAhB,SAAC,EAAqBpC,YAAtB,EAAC,EAA4Bc,KAAO,KAClDP,SAAU,SAACP,GAAD,OAAWgC,EAASJ,EAAQU,SAAS,CAAC,WAAYtC,QAE9D,gBAAC+C,EAAA,EAAD,CAAYC,KAAQhE,EAAMmD,OAAO7B,SAAS2C,MAAQ,QAAU,QACxDjE,EAAMmD,OAAO7B,SAAS2C,OAAS,IAGnC,gBAACxC,EAAD,CACET,MAAOhB,EAAMmD,OAAOlB,WAAWjB,MAC/BG,UAAQ,EACRY,sBAAuB2B,EACvBnC,SAAU,SAACP,GAAD,OAAWgC,EAASJ,EAAQU,SAAS,CAAC,aAActC,QAEhE,gBAAC+C,EAAA,EAAD,CAAYC,KAAQhE,EAAMmD,OAAOlB,WAAWgC,MAAQ,QAAU,QAC1DjE,EAAMmD,OAAOlB,WAAWgC,OAAS,KAI9B,MAALjE,GAAA,SAAAA,EAAOmD,SAAP,WAAelB,aAAf,WAA2BjB,QAA3B,WAAkCkD,aAAlC,IAA0CX,SACxC,gBAAC,IAAK9C,UAAN,sBAKJ,gBAAC0D,EAAA,EAAD,CAAYC,YAAU,EAACzG,MAAOY,EAAO8F,cAArC,MACGrE,GADH,SACGA,EAAOmD,SADV,SACG,EAAelB,aADlB,SACG,EAA2BjB,QAD9B,SACG,EAAkCkD,aADrC,EACG,EAA0C7C,KAAI,SAACiD,GAAD,mBAC7C,gBAACC,EAAA,EAAD,CACEC,SAAQ,MAAExE,GAAF,SAAEA,EAAOmD,SAAT,SAAE,EAAee,OAAOlD,YAAxB,EAAE,EAA6ByD,MAAK,qBAAE3C,KAAewC,EAAMxC,MACnEf,QACO,MAALf,GAAA,SAAAA,EAAOmD,SAAP,WAAee,OAAOlD,QAAtB,EAA6ByD,MAAK,qBAAE3C,KAAewC,EAAMxC,MACvD,0BAAMkB,EAASJ,EAAQU,SAAS,CAAC,SAAD,MAAWtD,GAAX,SAAWA,EAAOmD,SAAlB,SAAW,EAAee,OAAOlD,YAAjC,EAAW,EAA6B0D,QAAO,qBAAG5C,KAAgBwC,EAAMxC,UACxG,0BAAMkB,EAASJ,EAAQU,SAAS,CAAC,SAAD,eAAqB,MAALtD,GAAA,SAAAA,EAAOmD,SAAP,WAAee,aAAf,IAAuBlD,QAAS,IAAhD,CAAqDsD,SAGrFA,EAAMrD,KARZ,MAQsBqD,EAAMK,KAR5B,SAYJ,gBAACZ,EAAA,EAAD,CAAYC,KAAQhE,EAAMmD,OAAOe,OAAOD,MAAQ,QAAU,QACtDjE,EAAMmD,OAAOe,OAAOD,OAAS,IAEjC,gBAACW,EAAA,EAAD,MACA,gBAACzC,EAAD,CACEnB,MAAOhB,EAAMmD,OAAOR,IAAI3B,MACxBX,OAAQuB,OAAM,SAAC5B,EAAMmD,OAAOC,OAAd,SAAC,EAAmBpC,YAApB,EAAC,EAA0Bc,IACzCH,WAAYC,OAAM,SAACF,EAAYG,sBAAb,EAAC,EAA6BC,IAChDP,SAAU,SAACP,GAAD,OAAWgC,EAASJ,EAAQU,SAAS,CAAC,WAAYtC,QAE9D,gBAAC+C,EAAA,EAAD,CAAYC,KAAQhE,EAAMmD,OAAOR,IAAIsB,MAAQ,QAAU,QACnDjE,EAAMmD,OAAOR,IAAIsB,OAAS,IAE9B,gBAACY,EAAA,EAAD,CACElH,MAAOY,EAAOuG,MACdC,KAAK,WACLC,MAAM,cACNf,QAASjE,EAAMmD,OAAOE,WAAWY,MACjCjD,OAAO,SAAAhB,EAAMmD,OAAOE,aAAb,WAAyBrC,YAAzB,IAAgCiE,aAAc,GACrDC,aAAa,0BACb/F,MAAO,kBAAM,gBAAC0F,EAAA,EAAUM,MAAX,CAAiBC,KAAK,QACnCC,aAAc,SAACC,GAAD,OAActC,EAASJ,EAAQU,SAAS,CAAC,aAAc1B,OAAO0D,SAG9E,gBAACvB,EAAA,EAAD,CAAYC,KAAQhE,EAAMmD,OAAOE,WAAWY,MAAQ,QAAU,QAC1DjE,EAAMmD,OAAOE,WAAWY,OAAS,KAM3C,I,EAAM1F,EAASG,IAAWC,OAAO,CAC/BwE,OAAQ,CACNtE,KAAM,GAGRiG,MAAO,CACLS,aAAc,GAEhBlB,aAAc,CACZkB,aAAc,KCvHZC,EAAuB9F,cAAH,4uDAoGX,SAAS+F,EAAmBrI,GAA6B,IAAD,UAC/D4F,EAAWC,cACXjD,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAM+C,YACtCrB,EAAc3B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAHmB,EAI1ByF,sBAAsBF,GAJI,WAI9DG,EAJ8D,KAI1CC,EAJ0C,KAM/DC,EAAWC,uBAAY,WAAO,IAAD,IAC7BC,GAAY,EAehB,OAdI,SAAC/F,EAAMmD,OAAO7B,SAASN,QAAtB,EAA6Bc,KAChCiE,GAAY,EACZ/C,EACED,IAASiD,cAAc,CAAC,WAAY,wCAIpC,SAAChG,EAAMmD,OAAOlB,WAAWjB,QAAxB,EAA+Bc,KAClCiE,GAAY,EACZ/C,EACED,IAASiD,cAAc,CAAC,aAAc,iDAIlCD,IACP,CAACE,KAAKC,UAAUlG,EAAMmD,UACnBgD,EAAaL,uBAAY,oEAAAM,EAAAC,OAAA,mDAExBR,IAFwB,4EAAAO,EAAA,MAMNT,EAAmB,CACtCxF,UAAW,CACTmG,WAAY1E,OAAM,SAAC5B,EAAMmD,OAAO7B,SAASN,YAAvB,EAAC,EAA6Bc,IAChDyE,SAAQ,SAAEvG,EAAMmD,OAAOe,SAAf,SAAE,EAAqBlD,YAAvB,EAAE,EAA4BK,KAAI,gBAAGS,EAAH,EAAGA,GAAH,OAAYF,OAAOE,MAC7D0E,OAAQ5E,OAAM,SAAC5B,EAAMmD,OAAOsD,KAAKzF,YAAnB,EAAC,EAAyBc,IACxC4E,MAAO,SAAC1G,EAAMmD,OAAOR,IAAI3B,QAAjB,EAAwBc,GAAYF,OAAM,SAAC5B,EAAMmD,OAAOR,IAAI3B,YAAlB,EAAC,EAAwBc,IAAtC,KACrC6E,aAAc/E,OAAM,SAAC5B,EAAMmD,OAAOlB,aAAd,SAAC,EAAyBjB,YAA1B,EAAC,EAAgCc,IACrDzB,OAAQuB,OAAM,SAAC5B,EAAMmD,OAAOC,OAAd,SAAC,EAAmBpC,YAApB,EAAC,EAA0Bc,IACzCuB,WAAYrD,EAAMmD,OAAOE,WAAWrC,UAdb,UAMrB4F,EANqB,OAkB3B,SAAAA,EAAOtG,OAAP,WAAauG,aAAb,WAAyBC,cAAzB,EAAsCzF,KAAI,YAAyB,IAAtByD,EAAqB,EAArBA,MAAOiC,EAAc,EAAdA,QAClD,OAAQjC,GACN,IAAK,YACH,OAAO9B,EAASD,IAASiD,cAAc,CAAC,WAAYe,KACtD,IAAK,OACH,OAAO/D,EAASD,IAASiD,cAAc,CAAC,OAAQe,KAClD,IAAK,UACL,IAAK,SACL,IAAK,YACH,OAAO/D,EAASD,IAASiD,cAAc,CAAC,SAAUe,KACpD,IAAK,cACH,OAAO/D,EAASD,IAASiD,cAAc,CAAC,aAAce,KACxD,IAAK,MACH,OAAO/D,EAASD,IAASiD,cAAc,CAAC,MAAOe,KACjD,IAAK,OACH,OAAO/D,EAASD,IAASiD,cAAc,CAAC,OAAQe,KAClD,IAAK,cACH,OAAO/D,EAASD,IAASiD,cAAc,CAAC,aAAce,SAnCjC,MAsCvBH,GAtCuB,SAsCvBA,EAAQtG,OAtCe,SAsCvB,EAAcuG,aAtCS,SAsCvB,EAA0BG,UAA1B,EAAkCzD,OAtCX,yCAuClBP,EAASiE,IAAgBC,aAAa,CAAEH,QAAO,MAAEH,GAAF,SAAEA,EAAQtG,OAAV,SAAE,EAAcuG,iBAAhB,EAAE,EAA0BG,OAAO,GAAIG,QAAS,YAvC7E,OAyCvB,SAACP,EAAOtG,OAAR,SAAC,EAAauG,aAAd,SAAC,EAAyBC,cAAzB,EAAsCvD,QACzCnG,EAAMgK,YA1CmB,kDA8C3BpE,EAASiE,IAAgBC,aAAa,CAAEH,QAAS,KAAMA,QAASI,QAAS,WA9C9C,mEAgD5B,CAAClB,KAAKC,UAAUlG,EAAMmD,QAASwC,EAAoBvI,EAAMgK,YAE5D,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ1G,UAAWxD,EAAMmK,MACvB,kBAACC,EAAA,EAAD,CAAaC,eAAa,EAAC7G,QAASgF,EAAarF,QAASxC,MAAO2D,EAAYpE,MAAMoK,OAAOC,SAC1F,kBAACL,EAAA,EAAOM,MAAR,wBACe5H,GADf,SACeA,EAAOmD,SADtB,SACe,EAAeC,OAD9B,SACe,EAAqBpC,YADpC,EACe,EAA4BC,MAD3C,iBACsDjB,EAAMmD,OAAOsD,OADnE,SACsD,EAAmBzF,YADzE,EACsD,EAA0BC,OAEhF,kBAACqG,EAAA,EAAOO,QAAR,KACE,kBAAC/E,EAAD,OAEF,kBAACwE,EAAA,EAAOQ,QAAR,CAAgBnK,MAAO,CAAE2B,eAAgB,aACvC,kBAACyI,EAAA,EAAD,CACEhH,QAAS,WACPiC,EAASD,IAASiF,SAClB5K,EAAM6K,YAHV,UAQA,kBAACF,EAAA,EAAD,CAAQhH,QAASoF,GAAjB,e,gCC5LK,SAAS+B,GAAT,GAIO,IAHpBC,EAGmB,EAHnBA,UACAC,EAEmB,EAFnBA,eAGMC,GADa,EADnBC,SAEgBC,gBAEhB,OACI,gBAAC,IAAD,CAAM5K,MAAO,CAAE4B,MAAO,QACtB,gBAAC,IAAD,CAAM5B,MAAOY,GAAOF,OAApB,mBACA,gBAAC,IAAD,CAAMV,MAAOY,GAAOiK,UAAW5K,WAAW,OAAOC,UAAU,0BACzD,gBAAC,IAAKiD,KAAN,CACEzC,MAAM,kBACNkE,KACE,kBACE,gBAAC,IAAKC,KAAN,CACEzE,MAAOsK,EAAQI,QACfhG,KAAK,aAKb,gBAAC,IAAK3B,KAAN,CACEzC,MAAM,cACNkE,KACE,kBACG4F,EAKC,gBAAC,IAAK3F,KAAN,CACEzE,MAAOsK,EAAQI,QACfhG,KAAK,UANP,gBAAC,IAAKD,KAAN,CACEzE,MAAOsK,EAAQpE,MACfxB,KAAK,aAQf,gBAAC,IAAK3B,KAAN,CACEzC,MAAM,yBACNkE,KACE,kBACC6F,EAKC,gBAAC,IAAK5F,KAAN,CACEzE,MAAOsK,EAAQI,QACfhG,KAAK,UANP,gBAAC,IAAKD,KAAN,CACEzE,MAAOsK,EAAQpE,MACfxB,KAAK,cAYrB,I,MAAMlE,GAASG,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNQ,WAAY,SACZC,eAAgB,UAElBjB,MAAO,CACLqK,SAAU,GACVC,WAAY,QAEdH,UAAW,CACTI,eAAgB,GAChBpJ,OAAQ,EACRD,MAAO,S,kDCtELsJ,GAAuBnJ,YAAH,+cA4BX,SAASoJ,GAAQ1L,GAAwB,IAAD,gBACnBwC,oBAAS,GADU,WAC9CC,EAD8C,KAClCC,EADkC,KAE/C4B,EAAc3B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAE1CK,EAASJ,mBAAgB2I,GAAsB,CACrD1I,UAAW,CACTwB,WAAYC,OAAM,SAACF,EAAYG,sBAAb,EAAC,EAA6BC,IAChDiH,YAAa,CAAC,eAHVzI,KAQR,OAFgBsD,YAAe,cAO7B,kBAAClD,EAAA,EAAD,CACEC,UAAW,kBAAMb,GAAY,IAC7Bc,QAASf,EACTgB,OACE,kBAAC0D,EAAA,EAAD,CACEQ,KAAK,WACLtC,KAAK,iBACL9E,MAAO,CAAEqL,iBAAkB,GAC3BjI,QAAS,kBAAMjB,GAAY,KAE1B,SAAA1C,EAAM4D,QAAN,EAAac,GAAb,SAAkB1E,EAAM4D,YAAxB,EAAkB,EAAaC,KAAO,WAV7C,MAcIX,GAdJ,SAcIA,EAAM2I,WAdV,SAcI,EAAgBC,gBAdpB,SAcI,EAA+BC,YAdnC,EAcI,EAAsC9H,KAAI,SAAC+H,GAAD,eACxC,kBAAC,IAAKtI,KAAN,CACEC,QAAS,WAAO,IAAD,EACbjB,GAAY,GACZ1C,EAAMmE,SAAN,MAAe6H,GAAf,SAAeA,EAAMC,WAArB,EAAe,EAAYjG,OAE7B/E,MAAK,MACH+K,GADG,SACHA,EAAMC,OADH,SACH,EAAYjG,WADT,EACH,EAAkBnC,WAxB5B,kBAACsD,EAAA,EAAD,CAAMQ,KAAK,WAAWtC,KAAK,mBACxB,SAAArF,EAAM4D,YAAN,IAAaC,OAAQ,UC5Cb,SAASqI,GAAelM,GAA+B,IAAD,UACjCwC,oBAAS,GADwB,WAC5DC,EAD4D,KAChDC,EADgD,KAE7DyJ,EAAU3F,YAAe,cAE/B,OACG2F,EAID,kBAAC7I,EAAA,EAAD,CACEC,UAAW,kBAAMb,GAAY,IAC7Bc,QAASf,EACTgB,OACE,kBAAC0D,EAAA,EAAD,CACEQ,KAAK,WACLtC,KAAK,YACL9E,MAAO,CAAEqL,iBAAkB,GAC3BjI,QAAS,kBAAMwI,GAAWzJ,GAAY,KAErC,SAAA1C,EAAM4D,QAAN,EAAac,GAAb,SAAkB1E,EAAM4D,YAAxB,EAAkB,EAAaC,KAAO,kBAV7C,SAcI7D,EAAMoM,YAdV,EAcI,EAAanI,KAAI,SAACoI,GAAD,aACf,kBAAC,IAAK3I,KAAN,CACEC,QAAS,WACPjB,GAAY,GACZ1C,EAAMmE,SAASkI,EAAKrG,OAEtB/E,MAAK,MACHoL,GADG,SACHA,EAAMrG,WADH,EACH,EAAYnC,WAxBtB,kBAACsD,EAAA,EAAD,CAAMQ,KAAK,WAAWtC,KAAK,mBACxB,SAAArF,EAAM4D,YAAN,IAAaC,OAAQ,iBCN5B,I,GAAM4H,GAAuBnJ,YAAH,+cA4BX,SAASgK,GAAUtM,GAA0B,IAAD,gBACvBwC,oBAAS,GADc,WAClDC,EADkD,KACtCC,EADsC,KAEnD4B,EAAc3B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAE1CK,EAASJ,mBAAgB2I,GAAsB,CACrD1I,UAAW,CACTwB,WAAYC,OAAM,SAACF,EAAYG,sBAAb,EAAC,EAA6BC,IAChDiH,YAAa,CAAC,iBAHVzI,KAQR,OAFgBsD,YAAe,cAO7B,kBAAClD,EAAA,EAAD,CACEC,UAAW,kBAAMb,GAAY,IAC7Bc,QAASf,EACTgB,OACE,kBAAC0D,EAAA,EAAD,CACEQ,KAAK,WACLtC,KAAK,mBACL9E,MAAO,CAAEqL,iBAAkB,GAC3BjI,QAAS,kBAAMjB,GAAY,KAE5B,SAAA1C,EAAM4D,QAAN,EAAac,GAAb,SAAkB1E,EAAM4D,YAAxB,EAAkB,EAAaC,KAAO,aAV3C,MAcIX,GAdJ,SAcIA,EAAM2I,WAdV,SAcI,EAAgBC,gBAdpB,SAcI,EAA+BC,YAdnC,EAcI,EAAsC9H,KAAI,SAAC+H,GAAD,eACxC,kBAAC,IAAKtI,KAAN,CACEC,QAAS,WAAO,IAAD,EACbjB,GAAY,GACZ1C,EAAMmE,SAAN,MAAe6H,GAAf,SAAeA,EAAMC,WAArB,EAAe,EAAYjG,OAE7B/E,MAAK,MACH+K,GADG,SACHA,EAAMC,OADH,SACH,EAAYjG,WADT,EACH,EAAkBnC,WAxB5B,kBAACsD,EAAA,EAAD,CAAMQ,KAAK,WAAWtC,KAAK,mBACxB,SAAArF,EAAM4D,YAAN,IAAaC,OAAQ,YC7C5B,I,MAAM0I,GAAejK,YAAH,iQAiBH,SAASkK,GAAUxM,GAA0B,IAAD,UACvBwC,oBAAS,GADc,WAClDC,EADkD,KACtCC,EADsC,KAEnD4B,EAAc3B,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAE1CK,EAASJ,mBAAgByJ,GAAc,CAC7CxJ,UAAW,CACTwB,WAAYC,OAAM,SAACF,EAAYG,sBAAb,EAAC,EAA6BC,OAF5CxB,KAKFiJ,EAAU3F,YAAe,cAE/B,OACG2F,EAID,kBAAC7I,EAAA,EAAD,CACEC,UAAW,kBAAMb,GAAY,IAC7Bc,QAASf,EACTgB,OACE,kBAAC0D,EAAA,EAAD,CACEQ,KAAK,WACLtC,KAAK,WACL9E,MAAO,CAAEqL,iBAAkB,GAC3BjI,QAAS,kBAAMwI,GAAWzJ,GAAY,MAErC,SAAA1C,EAAM4D,YAAN,IAAaC,OAAQ,aAV5B,MAcIX,GAdJ,SAcIA,EAAMuJ,aAdV,EAcI,EAAcxI,KAAI,SAACyI,GAAD,OAChB,kBAAC,IAAKhJ,KAAN,CACEC,QAAS,WACPjB,GAAY,GACZ1C,EAAMmE,SAASuI,IAEjBzL,MACEyL,EAAM7I,WAxBhB,kBAACsD,EAAA,EAAD,CAAMQ,KAAK,WAAWtC,KAAK,qBACxB,SAAArF,EAAM4D,YAAN,IAAaC,OAAQ,YClB5B,IAAM8I,GAAarK,cAAH,i9BAqEVsK,GAAuBtK,cAAH,o7CAsFX,SAASuK,GAAS7M,GAAmB,IAAD,oDAC3C4C,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UADK,EAEfiD,YAAe,GAFA,WAE1CgH,EAF0C,KAE9BC,EAF8B,OAGPjH,YAAe,GAHR,WAG1CkH,EAH0C,KAG1BC,EAH0B,KAMzC5D,GADW6D,0BACmClN,EAA9CqJ,MAAkBN,GAA4B/I,EAAxCmN,WAAwCnN,EAA5B+I,YAAYqE,EAAgBpN,EAAhBoN,YANW,EAOvBtK,mBAAgB6J,GAAY,CACpD5J,UAAW,CACT2B,GAAIF,OAAO6E,EAAK3E,OAFZxB,EAPyC,EAOzCA,KAAMC,GAPmC,EAOnCA,QAPmC,GAcVmF,sBAAsBsE,IAdZ,aAc1CS,GAd0C,MActBC,GAdsB,MAe3CC,GAAczH,eAAkB,SAAO0H,GAAP,SAAAxE,EAAAC,OAAA,2EAAAD,EAAA,MAE5BqE,GAAmB,CAAEtK,UAAW,CAAE2B,GAAIF,OAAO6E,EAAK3E,IAAK+I,QAASjJ,OAAOgJ,EAAM9I,QAFjD,uHAMnC,CAAC2I,GAAoBxE,KAAKC,UAAUO,KAEjCqE,GAAY5H,eAAkB,SAAO6H,GAAP,SAAA3E,EAAAC,OAAA,2EAAAD,EAAA,MAE1BqE,GAAmB,CAAEtK,UAAW,CAAE2B,GAAIF,OAAO6E,EAAK3E,IAAKkJ,MAAOpJ,OAAOmJ,EAAIjJ,QAF/C,uHAMjC,CAAC2I,GAAoBxE,KAAKC,UAAUO,KAEjCwE,GAAc/H,eAAkB,SAAO4G,GAAP,SAAA1D,EAAAC,OAAA,2EAAAD,EAAA,MAE5BqE,GAAmB,CAAEtK,UAAW,CAAE2B,GAAIF,OAAO6E,EAAK3E,IAAKoJ,QAAStJ,OAAOkI,EAAMhI,QAFjD,uHAMnC,CAAC2I,GAAoBxE,KAAKC,UAAUO,KAEjC0E,GAAmBjI,eAAkB,SAAOkI,GAAP,SAAAhF,EAAAC,OAAA,2EAAAD,EAAA,MAEjCqE,GAAmB,CAAEtK,UAAW,CAAE2B,GAAIF,OAAO6E,EAAK3E,IAAKuJ,aAAczJ,OAAOwJ,EAAGtJ,QAF9C,uHAMxC,CAAC2I,GAAoBxE,KAAKC,UAAUO,KAEjC6E,GAAapI,eAAkB,SAAOqI,GAAP,eAAAnF,EAAAC,OAAA,uDAC7BmF,EAAgBD,EAAiBE,aAAW,IAAIC,KAAQH,GAASI,UAAY,IAAnD,KADG,oBAAAvF,EAAA,MAI3BqE,GAAmB,CACvBtK,UAAW,CACT2B,GAAIF,OAAO6E,EAAK3E,IAChB8J,WAAYJ,EAAeK,KAAKC,KAAKN,GAAgB,SAPxB,uHAalC,CAACf,GAAoBxE,KAAKC,UAAUO,KAEjCsF,GAAW7I,eAAkB,oBAAAkD,EAAAC,OAAA,2EAAAD,EAAA,MAEzBqE,GAAmB,CACvBtK,UAAW,CACT2B,GAAIF,OAAO6E,EAAK3E,IAChBkK,WAAW,MALgB,uHAWhC,CAACvB,GAAoBxE,KAAKC,UAAUO,KAEjCwF,GAAgBrI,YAAe,cAC/BsI,GAActI,YAAe,cAC7BuI,GAAgBvI,YAAe,kBAE/BwI,GAAqBlJ,eAAkB,SAACuG,GAAgB,IAAD,IAE3D,IAAQ,MAAJA,GAAA,SAAAA,EAAMrG,WAAN,IAAYtB,OAAZ,SAAmB9B,EAAM2D,kBAAzB,EAAmB,EAAmB7B,KAAOqK,GAGjD,OAAO,WAAO,IAAD,KACP,SAAA1C,EAAKrG,WAAL,IAAWtB,OAAX,SAAkB9B,EAAM2D,kBAAxB,EAAkB,EAAmB7B,IACnCoK,IACF9O,EAAMiP,YAAY5C,GAEX0C,IACT/O,EAAMiP,YAAY5C,MAGrB,CAACxD,KAAKC,UAAUO,GAAO0F,GAAe/O,EAAMiP,cAU/C,OARAnJ,aAAgB,WAAO,IAAD,IACZ,MAAJ5C,GAAA,SAAAA,EAAMmG,OAAN,EAAY6F,WAAgB,MAAJhM,GAAA,SAAAA,EAAMmG,WAAN,IAAY6F,UAAW,IAAMpC,GACvDC,GAAY,KAEb,OAAC7J,GAAD,SAACA,EAAMmG,WAAP,EAAC,EAAY6F,WAKhB,gBAACC,GAAA,EAAD,CAAM5O,MAAO,CAAEuB,OAAQ,IAAMsN,UAAW,GACtC,gBAACD,GAAA,EAAK3E,MAAN,CACEvJ,MAAK,eAAUiC,GAAV,SAAUA,EAAMmG,WAAhB,EAAU,EAAY8D,YAC3BjM,SAAUmI,EAAKxF,OAEjB,gBAACuG,EAAA,EAAD,CACE5G,QAASL,IAAWmK,GAASnK,QAC7BxC,MAAOiC,EAAM1C,MAAMoK,OAAOC,SAE5B,gBAAC4E,GAAA,EAAK1E,QAAN,CAAclK,MAAO,CAAEiL,eAAgB,EAAGpJ,OAAQ0K,OAAauC,EAAY,IAAKC,SAAU,WACxF,gBAAC,IAAD,CAAM/O,MAAO,CAAEgP,cAAe,QAC5B,gBAACxI,EAAA,EAAD,CAAYC,YAAU,GACpB,gBAACwF,GAAD,CACEjI,WAAYC,OAAM,SAAC5B,EAAM6B,sBAAP,EAAC,EAAuBC,IAC1Cd,MAAK,MAAEV,GAAF,SAAEA,EAAMmG,WAAR,EAAE,EAAYqD,MACnBvI,SAAU0J,KAEZ,gBAACnC,GAAD,CACEnH,WAAYC,OAAM,SAAC5B,EAAM6B,sBAAP,EAAC,EAAuBC,IAC1Cd,MAAK,MAAEV,GAAF,SAAEA,EAAMmG,OAAR,SAAE,EAAYsE,UAAd,EAAE,EAAiB3H,KACxB7B,SAAUuJ,KAEZ,gBAACpB,GAAD,CACE/H,WAAYC,OAAM,SAAC5B,EAAM6B,sBAAP,EAAC,EAAuBC,IAC1Cd,MAAK,MAAEV,GAAF,SAAEA,EAAMmG,OAAR,SAAE,EAAYmE,YAAd,EAAE,EAAmBxH,KAC1B7B,SAAUoJ,KAEZ,gBAACrB,GAAD,CACE3H,WAAYC,OAAM,SAAC5B,EAAM6B,sBAAP,EAAC,EAAuBC,IAC1Cd,MAAK,MAAEV,GAAF,SAAEA,EAAMmG,OAAR,SAAE,EAAYmG,iBAAd,EAAE,EAAwBxJ,KAC/BoG,OAAW,MAAJlJ,OAAA,EAAAA,EAAMmG,KAAK+C,QAAS,GAC3BjI,SAAU4J,OAIhB,gBAAC0B,GAAA,EAAD,KACE,gBAACA,GAAA,EAAUC,OAAX,CAAkBnP,MAAO,CAAE4B,MAAO,SAChC,gBAACsN,GAAA,EAAUjF,MAAX,aACA,gBAACiF,GAAA,EAAUjF,MAAX,CAAiBmF,SAAO,GAAxB,eACA,gBAACF,GAAA,EAAUjF,MAAX,CAAiBmF,SAAO,GAAxB,aACA,gBAACF,GAAA,EAAUjF,MAAX,CAAiBmF,SAAO,GAAxB,aALJ,MAQMzM,GARN,SAQMA,EAAMmG,OARZ,SAQM,EAAY+C,YARlB,EAQM,EAAmBnI,KAAI,SAAAoI,GAAS,IAAD,MAE7B,OACE,gBAACoD,GAAA,EAAUG,IAAX,CAAejM,QAASqL,GAAmB3C,GAAOwD,cAAc,QAC9D,gBAACJ,GAAA,EAAUK,KAAX,WAAiBzD,GAAjB,SAAiBA,EAAMrG,WAAvB,EAAiB,EAAYnC,MAC7B,gBAAC4L,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,MAAyBtD,OAAzB,EAAyBA,EAAMpG,YAC/B,gBAACwJ,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,MAAyBtD,GAAzB,SAAyBA,EAAMnI,eAA/B,EAAyB,EAAgBL,MACzC,gBAAC4L,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,MAAyBtD,GAAzB,SAAyBA,EAAMxH,iBAA/B,EAAyB,EAAkBkL,cAMjDC,MAAMC,KAAK,CAAC9J,SAAa,MAAJkD,OAAA,EAAAA,EAAM6F,WAAY,KAAU,MAAJ7F,GAAA,SAAAA,EAAM+C,YAAN,IAAajG,SAAU,KAAK,SAAC+J,EAAGC,GAAJ,OAAUA,KAAGlM,KAAI,kBACxF,gBAACwL,GAAA,EAAUG,IAAX,KACE,gBAACH,GAAA,EAAUK,KAAX,sBACA,gBAACL,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,KACA,gBAACF,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,KACA,gBAACF,GAAA,EAAUK,KAAX,CAAgBH,SAAO,GAAvB,aAOT,MAACzM,GAAD,SAACA,EAAMmG,QAAN,EAAYmF,cAAkB,MAAJtL,GAAA,SAAAA,EAAMmG,WAAN,IAAYmF,aAAc,IAAIF,MAAOC,UAAY,KAC3E,gBAAC,IAAD,CAAMhO,MAAO,CAAEkB,KAAM,EAAGV,gBAAiB,UAAWW,QAAS,IAC3D,gBAAC0O,GAAA,EAAD,oBAEmBC,aAAoB,IAAI/B,KAA6C,KAArC,MAACpL,GAAD,SAACA,EAAMmG,WAAP,EAAC,EAAYmF,aAFhE,SAON,gBAACW,GAAA,EAAKzE,QAAN,KAEQ,MAAJxH,GAAA,SAAAA,EAAMmG,OAAN,EAAY6F,WAAgB,MAAJhM,GAAA,SAAAA,EAAMmG,WAAN,IAAY6F,UAAW,EAAI,KACjD,gBAACvE,EAAA,EAAD,CAAQhH,QAAS,kBAAMoJ,GAAaD,KAChCA,EAAa,YAAc,aAGnC,gBAAC,IAAD,CAAMvM,MAAO,CAAE+P,SAAU,MAEvBzB,IAAkB,MAAC3L,GAAD,SAACA,EAAMmG,OAAN,EAAYuF,UAAY,KAErC,MAAJ1L,GAAA,SAAAA,EAAMmG,OAAN,EAAYmF,WAER,gBAAC7D,EAAA,EAAD,CAAQhD,KAAK,WAAWhE,QAAS,kBAAMuK,GAAW,QAAlD,UAIA,gBAAC5K,EAAA,EAAD,CACEC,UAAW,kBAAM0J,GAAgB,IACjCzJ,QAASwJ,EACTvJ,OACE,gBAACkH,EAAA,EAAD,CAAQhD,KAAK,WAAWhE,QAAS,kBAAMsJ,GAAgB,KAAvD,aAKF,gBAAC,IAAKvJ,KAAN,CACEC,QAAS,WACPsJ,GAAgB,GAChBiB,GAAW,KAEbjN,MAAM,mBAER,gBAAC,IAAKyC,KAAN,CACEC,QAAS,WACPsJ,GAAgB,GAChBiB,GAAW,KAEbjN,MAAM,mBAER,gBAAC,IAAKyC,KAAN,CACEC,QAAS,WACPsJ,GAAgB,GAChBiB,GAAW,KAEbjN,MAAM,mBAER,gBAAC,IAAKyC,KAAN,CACEC,QAAS,WACPsJ,GAAgB,GAChBiB,GAAW,IAEbjN,MAAM,mBAMZ,MAAJiC,GAAA,SAAAA,EAAMmG,OAAN,EAAYuF,UAAY,KAClB,MAAJ1L,GAAA,SAAAA,EAAMmG,OAAN,EAAYmF,aAAkB,MAAJtL,OAAA,EAAAA,EAAMmG,KAAKmF,aAAa,IAAIF,MAAOC,UAAY,KAAQM,GAC7E,gBAAClE,EAAA,EAAD,CAAQpK,MAAO,CAAEgQ,WAAY,GAAK5I,KAAK,YAAYhE,QAAS,kBAAMgL,OAAlE,kBAGA,gBAAChE,EAAA,EAAD,CACEpK,MAAO,CAACgQ,WAAY,GACpB5I,KAAK,YACLhE,QAAS,kBAAMoF,KACfyH,UAAWpD,GAAeqD,SAAY,MAAJvN,GAAA,SAAAA,EAAMmG,WAAN,IAAYmF,aAActL,EAAKmG,KAAKmF,YAAa,IAAIF,MAAOC,UAAY,MAJ5G,cAgBd,I,GAAejN,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNQ,WAAY,SACZC,eAAgB,SAChBsJ,eAAgB,GAElBvK,MAAO,CACLqK,SAAU,GACVC,WAAY,QAEdH,UAAW,CACTI,eAAgB,GAChBpJ,OAAQ,EACRD,MAAO,OAETP,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ,K,qkBC7bZ,IAAM0O,GAAiBpO,YAAH,2+BA6DL,SAASqO,KAAkB,IAAD,0BACjC/N,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UADL,EAEDiD,YAAe,GAFd,WAEhC8K,EAFgC,KAElBC,EAFkB,KAGjCjL,EAAWC,cAHsB,EAIJ/C,mBAAgB4N,GAAgB,CACjE3N,UAAW,CACTwB,WAAYC,OAAM,SAAC5B,EAAM6B,sBAAP,EAAC,EAAuBC,IAC1CoM,kBAAmBC,YAAW,IAAIzC,MAAQC,UAAY,KAExDyC,YAAa,aALP9N,EAJ+B,EAI/BA,KAAMC,EAJyB,EAIzBA,QAASC,EAJgB,EAIhBA,QAQjB6N,EAAa/D,0BACbgE,EAAYC,yBAElBrL,aAAgB,WACVoL,GACF9N,MAED,CAAC8N,IAEJ,IAAMnG,IAAa,MAAC7H,GAAD,SAACA,EAAM2I,WAAP,SAAC,EAAgBY,UAAhB,EAAwBtG,QACtC6E,IAAkB,MAAC9H,GAAD,SAACA,EAAM2I,WAAP,SAAC,EAAgBjH,eAAhB,EAA6BuB,QAChD+E,IAAY,MAAChI,GAAD,SAACA,EAAM2I,YAAN,EAAgBX,UAC7BkG,EAAkBrG,GAAaC,EAErClF,aAAgB,WAAO,IAAD,EACI,EAAxB,MAAI5C,GAAJ,SAAIA,EAAM2I,WAAN,EAAgBnH,KAClBkB,EAASyL,IAAcC,YAAYpO,EAAK2I,WAExCjG,EACEyL,IAAcE,QAAd,eACK3O,OADL,EACKA,EAAO2D,cACF,MAAJrD,GAAA,SAAAA,EAAM2I,eAAN,IAAgBtF,YAAYP,OAAQ,SAI7C,CAAC6C,KAAKC,UAAL,MAAe5F,OAAf,EAAeA,EAAM2I,YAEzB/F,aAAgB,WAAO,IAAD,gBACZ,MAAJ5C,GAAA,SAAAA,EAAM2I,WAAN,EAAgB2F,eAAoB,MAAJtO,GAAA,SAAAA,EAAM2I,eAAN,IAAgB2F,iBAAhB,SAAiC5O,EAAM1C,QAAvC,SAAiC,EAAaoK,aAA9C,EAAiC,EAAqBmH,UACxF7L,EAASyL,IAAcK,gBAAgBxO,EAAK2I,SAAS2F,eAG/C,MAAJtO,GAAA,SAAAA,EAAM2I,WAAN,EAAgB8F,iBAAsB,MAAJzO,GAAA,SAAAA,EAAM2I,eAAN,IAAgB8F,mBAAhB,SAAmC/O,EAAM1C,QAAzC,SAAmC,EAAaoK,aAAhD,EAAmC,EAAqBC,SAC5F3E,EAASyL,IAAcK,gBAAgBxO,EAAK2I,SAAS8F,mBAEtD,OACDzO,GADC,SACDA,EAAM2I,eADL,EACD,EAAgB2F,aADf,MAEDtO,GAFC,SAEDA,EAAM2I,eAFL,EAED,EAAgB8F,iBAGlB,IAAMxF,EAAU3F,YAAe,cACzBoL,EAAgBpL,YAAe,cAErC,OACE,gCAEA,gBAAC6B,EAAD,CACE8B,KAAMyG,EACN/F,QAAS,kBAAMgG,GAAc,IAC7B7G,UAAW,kBAAM6G,GAAc,MAEjC,gBAACzG,EAAA,EAAD,CAAa5G,QAASL,EAASkH,eAAa,EAAC1J,MAAOiC,EAAM1C,MAAMoK,OAAOC,SACrE,gBAAC,IAAD,CAAMhK,MAAOY,GAAOK,YAGf2B,IACEiO,EAEK,gBAAC,IAAD,CAAM7Q,MAAO,CAAE4B,MAAO,OAAQV,KAAM,EAAIW,OAAQyP,IAAWC,IAAI,UAAU1P,WAClE,MAAJc,GAAA,SAAAA,EAAM2I,WAAN,WAAgBkG,QAAhB,WAAuBhG,YAAvB,IAA8B5F,SAAU,GAAK,EAC5C,gBAACnF,EAAA,EAAD,CACEC,MAAM,wBACNC,SAAS,uBAEX,gBAAC,IAAD,CACEX,MAAO,CAAEkB,KAAM,EAAGW,OAAQyP,IAAWC,IAAI,UAAU1P,QACnD4P,sBAAuB,CAAE1B,SAAU,GACnC2B,WAAY,EACZ/O,MAAU,MAAJA,GAAA,SAAAA,EAAM2I,WAAN,WAAgBkG,YAAhB,IAAuBhG,QAAS,GACtCmG,WAAY/O,EACZgP,UAAW/O,EACXgP,WAAY,0BAASpG,EAAT,EAAGqG,KAAYC,EAAf,EAAeA,MAAf,OACV,MAACtG,KAAMC,KACL,gBAACY,GAAD,CACE0F,IAAG,QAAUvG,EAAKC,KAAKvH,GACvB2E,KAAM2C,EAAKC,KACXmB,YAAajB,IAAO,MAAIH,GAAJ,SAAIA,EAAMC,WAAV,EAAI,EAAYuG,WAAU,MAACxG,GAAD,SAACA,EAAMC,OAAN,EAAYwG,QAC3DtF,aAAiB,MAAJjK,GAAA,SAAAA,EAAM2I,WAAN,WAAgBkG,QAAhB,WAAuBhG,YAAvB,IAA8B5F,SAAU,GAAKmM,EAC1DrD,YAAa,SAAC5C,GACZzG,EAASD,IAAS+M,YAAYrG,IAC9BzG,EACED,IAASO,SAAS,CAAC,OAAQ8F,EAAKC,QAElC4E,GAAc,IAEhB9H,WAAY,WACVnD,EACED,IAASO,SAAS,CAAC,OAAQtD,EAAM2D,eAEnCX,EACED,IAASO,SAAS,CAAC,OAAQ8F,EAAKC,QAElC4E,GAAc,MApBN,SAfxB,gBAAC/F,GAAD,CAAkBC,YAAWC,iBAAgBE,cA4CnD0G,GAAiBR,GACjB,gBAACuB,EAAA,EAAD,CACEpS,MAAOY,GAAOS,IACdgR,OAAK,EACLvN,KAAK,OACL1B,QAAS,kBAAMsN,EAAW4B,SAAS,qBACnCjL,MAAM,eAQlB,IAAMzG,GAASG,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNQ,WAAY,SACZC,eAAgB,UAElBjB,MAAO,CACLqK,SAAU,GACVC,WAAY,QAEdH,UAAW,CACTI,eAAgB,GAChBpJ,OAAQ,EACRD,MAAO,OAETP,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ","file":"static/js/38.853322ee.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { JumpType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nconst QUERY_JUMP_TYPES = gql`\n  query JumpTypes($allowedForUserId: Int) {\n    jumpTypes(allowedForUserId: $allowedForUserId) {\n      id\n      name\n    }\n  }\n`;\n\nexport default function JumpTypeSelect(props: IJumpTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_JUMP_TYPES, {\n    variables: {\n      allowedForUserId: props.userId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      Jump type\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select jump type\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.jumpTypes?.map((jumpType) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(jumpType);\n            }}\n            title={\n              jumpType.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { TicketType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  allowManifestingSelf?: boolean | null;\n  onSelect(jt: TicketType): void;\n}\n\nconst QUERY_TICKET_TYPES = gql`\n  query TicketTypes($allowManifestingSelf: Boolean, $dropzoneId: Int!) {\n    ticketTypes(allowManifestingSelf: $allowManifestingSelf, dropzoneId: $dropzoneId) {\n      id\n      name\n\n      extras {\n        id\n        name\n        cost\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeSelect(props: ITicketTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      allowManifestingSelf: props.allowManifestingSelf,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.name || \"Please select ticket type\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.ticketTypes?.map((ticketType) => \n            <List.Item\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(ticketType);\n              }}\n              title={\n                ticketType.name || \"-\"\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Rig, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryRigs(\n    $dropzoneId: Int\n    $userId: Int\n  ) {\n    rigs(dropzoneId: $dropzoneId, userId: $userId) {\n      id\n      make\n      model\n      canopySize\n      serial\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_RIGS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.rigs?.map((rig) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            title={\n              `${props.value?.make} ${props.value?.model}`\n            }\n            description={\n              `${props.value?.canopySize} sqft`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport JumpTypeSelect from '../../JumpTypeSelect';\nimport TicketTypeSelect from '../../TicketTypeSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../RigSelect';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.slotForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.fields.user?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", Number(state.fields.user.value.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.user.value.rigs?.length) {\n        dispatch(\n          actions.setField([\"rig\", state.fields.user.value.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.user?.value?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.fields?.user?.value?.id === globalState.currentUser?.id;\n\n  \n  const allowedToManifestSelf = useRestriction(\n    isEdit ? \"updateSlot\" : \"createSlot\"\n  );\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? \"updateUserSlot\" : \"createUserSlot\"\n  )\n  console.log(\"Fields\", state.fields);\n\n  return ( \n    <> \n      <JumpTypeSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.user?.value?.id) || null}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeSelect\n        value={state.fields.ticketType.value}\n        required\n        allowManifestingSelf={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        state?.fields?.ticketType?.value?.extras?.length && (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      <RigSelect\n        value={state.fields.rig.value}\n        userId={Number(state.fields.user?.value?.id)}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { slotForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport SlotForm from \"../forms/slot/SlotForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $userId: Int\n    $exitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          userId: $userId\n          exitWeight: $exitWeight\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            ticketType {\n              id\n              name\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.slotForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          userId: Number(state.fields.user?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(slotForm.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(slotForm.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(slotForm.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(slotForm.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(slotForm.setFieldError([\"rig\", message]));\n          case \"user\":\n            return dispatch(slotForm.setFieldError([\"user\", message]));\n          case \"exit_weight\":\n            return dispatch(slotForm.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.user?.value?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <SlotForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(slotForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { Slot, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  slots: Slot[];\n  onSelect(user: User): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"parachute\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.user as User);\n            }}\n            title={\n              slot?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane-takeoff\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneChipSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport { useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Badge, Button, Card, DataTable, List, Menu, Paragraph, ProgressBar } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport GCAChip from '../../../components/GcaChip';\nimport LoadMasterChip from '../../../components/LoadMasterChip';\nimport PilotChip from '../../../components/PilotChip';\nimport PlaneChip from '../../../components/PlaneChip';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Plane, Slot } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { useAppSelector } from '../../../redux';\n\ninterface ILoadCard {\n  load: Load;\n  loadNumber: number;\n  canManifest: boolean;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nconst QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        user {\n          id\n          name\n        }\n        ticketType {\n          id\n          name\n          altitude\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const navigation = useNavigation();\n  const { load, loadNumber, onManifest, canManifest } = props;\n  const { data, loading } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const updatePilot = React.useCallback(async (pilot: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const canUpdateLoad = useRestriction(\"updateLoad\");\n  const canEditSelf = useRestriction(\"updateSlot\");\n  const canEditOthers = useRestriction(\"updateUserSlot\");\n\n  const getSlotPressAction = React.useCallback((slot: Slot) => {\n\n    if (slot?.user?.id !== state.currentUser?.id && !canEditOthers) {\n      return;\n    }\n    return () => {\n      if (slot.user?.id === state.currentUser?.id) {\n        if (canEditSelf) {\n          props.onSlotPress(slot);\n        }\n      } else if (canEditOthers) {\n        props.onSlotPress(slot);\n      }\n    }\n  }, [JSON.stringify(load), canEditOthers, props.onSlotPress]);\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  \n\n  return (\n  <Card style={{ margin: 16 }} elevation={3}>\n    <Card.Title\n      title={`Load ${data?.load?.loadNumber}`}\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal>\n          <PlaneChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.plane}\n            onSelect={updatePlane}\n          />\n          <GCAChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.gca?.user}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.pilot?.user}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.loadMaster?.user}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Exit weight</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              \n              return (\n                <DataTable.Row onPress={getSlotPressAction(slot)} pointerEvents=\"none\">\n                  <DataTable.Cell>{slot?.user?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.exitWeight}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.jumpType?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric>{slot?.ticketType?.altitude}</DataTable.Cell>\n                </DataTable.Row>\n              )\n            })\n          }\n          {\n            Array.from({length: (load?.maxSlots || 0) - (load?.slots?.length || 0)}, (v, i) => i).map(() =>\n              <DataTable.Row>\n                <DataTable.Cell>- Available -</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"#FF8800\", padding: 8 }}>\n          <Paragraph>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)}>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)}>\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button mode=\"outlined\" onPress={() => setDispatchOpen(true)}>\n                    Dispatch\n                  </Button>\n                }\n              >\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button style={{ marginLeft: 8 }} mode=\"contained\" onPress={() => onLanded()}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => onManifest()}\n                disabled={!canManifest || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport { startOfDay } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserDialog from '../../../components/dialogs/ManifestUserDialog';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { globalActions, slotForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\n\nconst QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"no-cache\"\n  });\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!data?.dropzone?.planes?.length;\n  const hasTicketTypes = !!data?.dropzone?.ticketTypes?.length;\n  const isPublic = !!data?.dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(globalActions.setDropzone(data.dropzone));\n    \n      dispatch(\n        globalActions.setUser({\n          ...state?.currentUser,\n          ...(data?.dropzone?.currentUser.user || {})\n        })\n      );\n    }\n  }, [JSON.stringify(data?.dropzone)]);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.primaryColor && data?.dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.primaryColor));\n    }\n\n    if (data?.dropzone?.secondaryColor && data?.dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.secondaryColor));\n    }\n  }, [\n    data?.dropzone?.primaryColor,\n    data?.dropzone?.secondaryColor\n  ])\n\n  const allowed = useRestriction(\"createSlot\");\n  const canCreateLoad = useRestriction(\"createLoad\");\n\n  return (\n    <>\n    \n    <ManifestUserDialog\n      open={isDialogOpen}\n      onClose={() => setDialogOpen(false)}\n      onSuccess={() => setDialogOpen(false)}\n    />\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (data?.dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={1}\n                        data={data?.dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              canManifest={allowed && edge?.node?.isOpen && !edge?.node?.isFull}\n                              loadNumber={(data?.dropzone?.loads?.edges?.length || 0) - index}\n                              onSlotPress={(slot) => {\n                                dispatch(slotForm.setOriginal(slot));\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                              onManifest={() => {\n                                dispatch(\n                                  slotForm.setField([\"user\", state.currentUser])\n                                );\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => navigation.navigate(\"CreateLoadScreen\")}\n            label=\"New load\"\n          />\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n"],"sourceRoot":""}