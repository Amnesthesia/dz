{"version":3,"sources":["components/notifications/index.ts","components/forms/extra/ExtraForm.tsx","screens/authenticated/extras/CreateExtraScreen.tsx"],"names":["actions","slice","Notifications","QUERY_TICKET_TYPES","gql","ExtraForm","state","useAppSelector","extraForm","dispatch","useAppDispatch","globalState","global","useQuery","variables","dropzoneId","Number","currentDropzone","id","data","loading","refetch","style","styles","field","mode","label","error","fields","name","value","onChangeText","newValue","setField","type","cost","toString","width","Subheader","ticketTypes","map","ticket","Item","status","ticketTypeIds","includes","onPress","xor","StyleSheet","create","flex","marginBottom","MUTATION_CREATE_EXTRA","globalSlice","CreateExtraScreen","navigation","useNavigation","isFocused","useIsFocused","React","reset","useMutation","mutationCreateExtra","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","result","createExtra","extra","snackbar","showSnackbar","message","variant","goBack","contentContainerStyle","paddingHorizontal","size","color","alignSelf","disabled","container","alignItems","title","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/15.14865648.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.extraForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <View style={{ width: \"100%\"}}>\n        <List.Subheader>\n          Compatible tickets\n        </List.Subheader>\n        {\n          data?.ticketTypes.map((ticket) =>\n            <Checkbox.Item\n              label={ticket.name!}\n              status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n                ? \"checked\"\n                : \"unchecked\"\n              }\n              onPress={\n                () => dispatch(actions.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n              }\n            />\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_EXTRA = gql`\n  mutation CreateExtra(\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    createExtra(input: {\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const [mutationCreateExtra, data] = useMutation<Mutation>(MUTATION_CREATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateExtra({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.createExtra?.extra) {\n          const { extra } = result.data.createExtra;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added extra ${extra.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateExtra]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket-percent\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}