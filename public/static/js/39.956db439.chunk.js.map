{"version":3,"sources":["ListAccordionGroup.tsx","ListAccordion.tsx","ListIcon.tsx","ListItem.tsx","ListSubheader.tsx","ListSection.tsx","components/Themed.tsx","screens/authenticated/settings/SettingsScreen.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","children","value","expandedIdProp","onAccordionPress","newExpandedId","setExpandedId","currentExpandedId","ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expandedProp","expanded","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","isExpanded","handlePress","id","onPress","setExpanded","style","styles","onLongPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","testID","borderless","pointerEvents","left","selectable","numberOfLines","description","right","name","size","direction","I18nManager","child","StyleSheet","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme","ListIcon","source","iconColor","width","ListItem","rest","marginVerticalNone","ellipsizeMode","renderDescription","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","ListSubheader","font","fonts","textColor","colors","paddingHorizontal","paddingVertical","ListSection","titleStyle","useThemeColor","props","colorName","useColorScheme","colorFromProps","Colors","Text","lightColor","darkColor","otherProps","light","dark","View","backgroundColor","SettingsScreen","navigation","useNavigation","state","useAppSelector","global","Section","Item","navigate","dropzone","currentDropzone","Icon","icon","create","display","fab","position","bottom","empty"],"mappings":"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","file":"static/js/39.956db439.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n        borderless\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            {right ? (\n              right({\n                isExpanded: isExpanded,\n              })\n            ) : (\n              <MaterialCommunityIcon\n                name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                color={titleColor}\n                size={24}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            )}\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n","import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst ICON_SIZE = 24;\n\n/**\n * A component to show an icon in a list item.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/list-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <List.Icon color={Colors.blue500} icon=\"folder\" />\n *     <List.Icon color={Colors.blue500} icon=\"equal\" />\n *     <List.Icon color={Colors.blue500} icon=\"calendar\" />\n *   </>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListIcon = ({ icon, color: iconColor, style }: Props) => (\n  <View style={[styles.item, style]} pointerEvents=\"box-none\">\n    <Icon source={icon} size={ICON_SIZE} color={iconColor} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nListIcon.displayName = 'List.Icon';\n\nexport default ListIcon;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          <Text\n            selectable={false}\n            ellipsizeMode={titleEllipsizeMode}\n            numberOfLines={titleNumberOfLines}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const font = fonts.medium;\n  const textColor = color(colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <Text\n      numberOfLines={1}\n      {...rest}\n      style={[styles.container, { color: textColor, ...font }, style]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default withTheme(ListSubheader);\n","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport ListSubheader from './ListSubheader';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title text for the section.\n   */\n  title?: string;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to group list items.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/list-section.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Section>\n *     <List.Subheader>Some title</List.Subheader>\n *     <List.Item title=\"First Item\" left={() => <List.Icon icon=\"folder\" />} />\n *     <List.Item\n *       title=\"Second Item\"\n *       left={() => <List.Icon color=\"#000\" icon=\"folder\" />}\n *     />\n *   </List.Section>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListSection = ({\n  children,\n  title,\n  titleStyle,\n  style,\n  ...rest\n}: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {title ? <ListSubheader style={titleStyle}>{title}</ListSubheader> : null}\n    {children}\n  </View>\n);\n\nListSection.displayName = 'List.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n});\n\nexport default withTheme(ListSection);\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { View } from '../../../components/Themed';\nimport { useAppSelector } from '../../../redux';\n\n\n\n\nexport default function SettingsScreen() {\n  \n  const navigation = useNavigation();\n  const state = useAppSelector(state => state.global);\n \n\n  return (\n    <View style={styles.container}>\n      <List.Section title=\"Dropzone\">\n        <List.Item\n          title=\"Configuration\"\n          onPress={() => navigation.navigate(\"UpdateDropzoneScreen\", { dropzone: state.currentDropzone })}\n          left={() => <List.Icon color=\"#000\" icon=\"information-outline\" />}\n        />\n        <List.Item\n          title=\"Planes\"\n          onPress={() => navigation.navigate(\"PlanesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"airplane\" />}\n        />\n        <List.Item\n          title=\"Rigs\"\n          left={() => <List.Icon color=\"#000\" icon=\"parachute\" />}\n          description=\"Coming soon\"\n        />\n      </List.Section>\n\n      <List.Section title=\"Tickets\">\n        <List.Item\n          title=\"Ticket types\"\n          onPress={() => navigation.navigate(\"TicketTypesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"ticket\" />}\n          />\n        <List.Item\n          title=\"Ticket add-ons\"\n          onPress={() => navigation.navigate(\"ExtrasScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"plus\" />}\n        />\n      </List.Section>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}