{"version":3,"sources":["components/notifications/index.ts","components/forms/plane/PlaneForm.tsx","screens/authenticated/planes/CreatePlaneScreen.tsx"],"names":["actions","slice","Notifications","DropzoneForm","state","useAppSelector","planeForm","dispatch","useAppDispatch","style","styles","field","mode","label","error","fields","name","value","onChangeText","newValue","setField","type","registration","hours","toString","placeholder","Number","minSlots","keyboardType","maxSlots","StyleSheet","create","width","flex","marginBottom","MUTATION_CREATE_PLANE","globalSlice","gql","CreatePlaneScreen","globalState","global","navigation","useNavigation","useMutation","mutationCreatePlane","data","isFocused","useIsFocused","React","reset","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","nextMaintenanceHours","variables","dropzoneId","currentDropzone","id","result","createPlane","plane","snackbar","showSnackbar","message","variant","goBack","contentContainerStyle","content","size","color","alignSelf","disabled","loading","onPress","paddingHorizontal","title","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/17.394807ab.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport ScrollableScreen from '../../ScrollableScreen';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.planeForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, Text } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreatePlane({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.createPlane?.plane) {\n          const { plane } = result.data.createPlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreatePlane]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <PlaneForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}