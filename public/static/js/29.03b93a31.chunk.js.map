{"version":3,"sources":["components/Themed.tsx","components/ScrollableScreen.tsx","components/notifications/index.ts","components/forms/extra/ExtraForm.tsx","screens/authenticated/extras/UpdateExtraScreen.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","ScrollableScreen","height","useWindowDimensions","useAppSelector","state","global","styles","container","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","actions","slice","Notifications","QUERY_TICKET_TYPES","gql","ExtraForm","extraForm","dispatch","useAppDispatch","globalState","useQuery","variables","dropzoneId","Number","currentDropzone","id","data","loading","refetch","field","mode","label","error","fields","name","value","onChangeText","newValue","setField","type","cost","toString","width","Subheader","ticketTypes","map","ticket","Item","status","ticketTypeIds","includes","onPress","xor","marginBottom","MUTATION_UPDATE_EXTRA","globalSlice","UpdateExtraScreen","navigation","useNavigation","extra","useRoute","params","React","setOriginal","useMutation","mutationUpdateExtra","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","original","result","updateExtra","snackbar","showSnackbar","message","variant","goBack","size","alignSelf","disabled","title","fontSize","fontWeight","separator","marginVertical"],"mappings":"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","file":"static/js/29.03b93a31.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.extraForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <View style={{ width: \"100%\"}}>\n        <List.Subheader>\n          Compatible tickets\n        </List.Subheader>\n        {\n          data?.ticketTypes.map((ticket) =>\n            <Checkbox.Item\n              label={ticket.name!}\n              status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n                ? \"checked\"\n                : \"unchecked\"\n              }\n              onPress={\n                () => dispatch(actions.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n              }\n            />\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation, Extra } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_EXTRA = gql`\n  mutation UpdateExtra(\n    $id: Int!,\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    updateExtra(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { extra: Extra }}>();\n  const extra = route.params!.extra;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(extra));\n  }, [extra?.id]);\n\n  const [mutationUpdateExtra, data] = useMutation<Mutation>(MUTATION_UPDATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateExtra({\n          variables: {\n            id: Number(state.original!.id!),\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.updateExtra?.extra) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateExtra]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket-percent\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}