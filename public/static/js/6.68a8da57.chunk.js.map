{"version":3,"sources":["ListAccordionGroup.tsx","ListAccordion.tsx","ListIcon.tsx","ListItem.tsx","ListSubheader.tsx","ListSection.tsx","components/Themed.tsx","components/ScrollableScreen.tsx","node_modules/react-native-web/dist/exports/useWindowDimensions/index.js","HelperText.tsx","CheckboxIOS.tsx","CheckboxAndroid.tsx","Checkbox.tsx","CheckboxItem.tsx","index.ts","Divider.tsx","components/notifications/index.ts","components/forms/ticket_type/TicketTypeForm.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","children","value","expandedIdProp","onAccordionPress","newExpandedId","setExpandedId","currentExpandedId","ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expandedProp","expanded","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","isExpanded","handlePress","id","onPress","setExpanded","style","styles","onLongPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","testID","borderless","pointerEvents","left","selectable","numberOfLines","description","right","name","size","direction","I18nManager","child","StyleSheet","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme","ListIcon","source","iconColor","width","ListItem","rest","marginVerticalNone","ellipsizeMode","renderDescription","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","ListSubheader","font","fonts","textColor","colors","paddingHorizontal","paddingVertical","ListSection","titleStyle","useThemeColor","props","colorName","useColorScheme","colorFromProps","Colors","Text","lightColor","darkColor","otherProps","light","dark","View","backgroundColor","ScrollableScreen","useWindowDimensions","useAppSelector","state","global","surface","contentContainerStyle","create","flexGrow","paddingBottom","_useState","useState","Dimensions","get","dims","setDims","useEffect","handleChange","_ref","window","addEventListener","removeEventListener","text","type","visible","shown","Animated","current","textHeight","scale","toValue","duration","useNativeDriver","onLayout","e","opacity","transform","translateY","inputRange","outputRange","CheckboxIOS","checked","status","indeterminate","checkedColor","disabled","rippleColor","icon","accessibilityState","accessibilityLiveRegion","allowFontScaling","borderRadius","CheckboxAndroid","scaleAnim","isFirstRendering","animation","ANIMATION_DURATION","uncheckedColor","checkboxColor","borderWidth","borderColor","fillContainer","fill","Checkbox","Platform","CheckboxItem","checkboxProps","checkbox","mode","label","flexShrink","Item","Android","IOS","hairlineWidth","inset","isDarkTheme","actions","slice","Notifications","QUERY_EXTRAS","gql","TicketTypeForm","ticketTypeForm","dispatch","useAppDispatch","globalState","altitudeMenuOpen","setAltitudeMenuOpen","useQuery","variables","dropzoneId","Number","currentDropzone","data","loading","refetch","field","error","fields","onChangeText","newValue","setField","cost","toString","onDismiss","position","anchor","altitude","includes","Icon","isTandem","allowManifestingSelf","Subheader","extras","map","extra","filter","marginBottom"],"mappings":"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","file":"static/js/6.68a8da57.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n        borderless\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            {right ? (\n              right({\n                isExpanded: isExpanded,\n              })\n            ) : (\n              <MaterialCommunityIcon\n                name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                color={titleColor}\n                size={24}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            )}\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n","import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst ICON_SIZE = 24;\n\n/**\n * A component to show an icon in a list item.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/list-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <List.Icon color={Colors.blue500} icon=\"folder\" />\n *     <List.Icon color={Colors.blue500} icon=\"equal\" />\n *     <List.Icon color={Colors.blue500} icon=\"calendar\" />\n *   </>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListIcon = ({ icon, color: iconColor, style }: Props) => (\n  <View style={[styles.item, style]} pointerEvents=\"box-none\">\n    <Icon source={icon} size={ICON_SIZE} color={iconColor} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nListIcon.displayName = 'List.Icon';\n\nexport default ListIcon;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          <Text\n            selectable={false}\n            ellipsizeMode={titleEllipsizeMode}\n            numberOfLines={titleNumberOfLines}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const font = fonts.medium;\n  const textColor = color(colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <Text\n      numberOfLines={1}\n      {...rest}\n      style={[styles.container, { color: textColor, ...font }, style]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default withTheme(ListSubheader);\n","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport ListSubheader from './ListSubheader';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title text for the section.\n   */\n  title?: string;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to group list items.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/list-section.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Section>\n *     <List.Subheader>Some title</List.Subheader>\n *     <List.Item title=\"First Item\" left={() => <List.Icon icon=\"folder\" />} />\n *     <List.Item\n *       title=\"Second Item\"\n *       left={() => <List.Icon color=\"#000\" icon=\"folder\" />}\n *     />\n *   </List.Section>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListSection = ({\n  children,\n  title,\n  titleStyle,\n  style,\n  ...rest\n}: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {title ? <ListSubheader style={titleStyle}>{title}</ListSubheader> : null}\n    {children}\n  </View>\n);\n\nListSection.displayName = 'List.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n});\n\nexport default withTheme(ListSection);\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      // $FlowFixMe\n      setDims(window);\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n","import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n","import * as React from 'react';\nimport { Platform } from 'react-native';\nimport CheckboxIOS from './CheckboxIOS';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [checked, setChecked] = React.useState(false);\n *\n *   return (\n *     <Checkbox\n *       status={checked ? 'checked' : 'unchecked'}\n *       onPress={() => {\n *         setChecked(!checked);\n *       }}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Checkbox = (props: Props) =>\n  Platform.OS === 'ios' ? (\n    <CheckboxIOS {...props} />\n  ) : (\n    <CheckboxAndroid {...props} />\n  );\n\nexport default withTheme(Checkbox);\n\n// @component-docs ignore-next-line\nconst CheckboxWithTheme = withTheme(Checkbox);\n// @component-docs ignore-next-line\nexport { CheckboxWithTheme as Checkbox };\n","import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        <Text style={[styles.label, { color: theme.colors.text }, labelStyle]}>\n          {label}\n        </Text>\n        {checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n","import CheckboxComponent from './Checkbox';\nimport CheckboxItem from './CheckboxItem';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\n\nconst Checkbox = Object.assign(\n  // @component ./Checkbox.tsx\n  CheckboxComponent,\n  {\n    // @component ./CheckboxItem.tsx\n    Item: CheckboxItem,\n    // @component ./CheckboxAndroid.tsx\n    Android: CheckboxAndroid,\n    // @component ./CheckboxIOS.tsx\n    IOS: CheckboxIOS,\n  }\n);\n\nexport default Checkbox;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({ inset, style, theme, ...rest }: Props) => {\n  const { dark: isDarkTheme } = theme;\n  return (\n    <View\n      {...rest}\n      style={[\n        isDarkTheme ? styles.dark : styles.light,\n        inset && styles.inset,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_EXTRAS = gql`\n  query QueryExtras(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeForm() {\n  const state = useAppSelector(state => state.ticketTypeForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_EXTRAS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"Name of the ticket users will see\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"Base cost without extra ticket addons\" }\n      </HelperText>\n      <View style={{ width: \"100%\" }}>\n\n      <Menu\n        onDismiss={() => setAltitudeMenuOpen(false)}\n        visible={altitudeMenuOpen}\n\n        style={{position:'absolute',right:'10%',left:'10%', flex: 1 }}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setAltitudeMenuOpen(true);\n            }}\n            title={\n              state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"Height\",\n                  \"4000\": \"Hop n Pop\",\n                }[state.fields.altitude.value.toString()] :\n                \"Custom\"\n            }\n            style={{ width: \"100%\", flex: 1 }}\n            right={ () =>\n              <List.Icon icon={state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"airplane\",\n                  \"4000\": \"parachute\",\n                }[state.fields.altitude.value.toString()] as string :\n                \"pencil-plus\" \n              } />\n            }\n          />\n        }>\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 4000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Hop n Pop\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 14000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Height\"\n            right={() => <List.Icon icon=\"airplane-takeoff\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 7000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Other\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n      </Menu>\n\n      {\n        (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Custom altitude\"\n            error={!!state.fields.altitude.error}\n            value={state.fields.altitude?.value?.toString()}\n            onChangeText={(newValue) => dispatch(actions.setField([\"altitude\", Number(newValue)]))}\n          />\n        )\n      }\n\n      <Checkbox.Item\n        label=\"Tandem\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.isTandem.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"isTandem\", !state.fields.isTandem.value]))\n        }\n      />\n      <HelperText type={!!state.fields.isTandem.error ? \"error\" : \"info\"}>\n        { state.fields.isTandem.error || \"Allow also manifesting a passenger when using this ticket type\" }\n      </HelperText>\n\n      <Checkbox.Item\n        label=\"Public manifesting\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.allowManifestingSelf.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"allowManifestingSelf\", !state.fields.allowManifestingSelf.value]))\n        }\n      />\n      \n      <HelperText type={!!state.fields.allowManifestingSelf.error ? \"error\" : \"info\"}>\n        { state.fields.allowManifestingSelf.error || \"Allow users to manifest themselves with this ticket\" }\n      </HelperText>\n\n      <Divider />\n      <List.Subheader>Enabled ticket add-ons</List.Subheader>\n      {\n        data?.extras.map((extra) =>\n          <Checkbox.Item\n            label={extra.name!}\n            status={state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(\n                actions.setField([\n                  \"extras\",\n                  state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n                  ? state.fields.extras.value?.filter(({ id }) => id !== extra.id)\n                  : [...state.fields.extras.value!, extra]\n                ])\n              )\n            }\n          />\n        )\n      }\n\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n"],"sourceRoot":""}