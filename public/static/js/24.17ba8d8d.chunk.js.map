{"version":3,"sources":["useLinkProps.tsx","useLinkTo.tsx","useLinkBuilder.tsx","Link.tsx","node_modules/@babel/runtime/helpers/taggedTemplateLiteralLoose.js","SafeAreaProviderCompat.tsx","ResourceSavingScene.tsx","Badge.tsx","TabBarIcon.tsx","BottomTabItem.tsx","BottomTabBarHeightCallbackContext.tsx","BottomTabBar.tsx","useWindowDimensions.tsx","useIsKeyboardShown.tsx","BottomTabBarHeightContext.tsx","BottomTabView.tsx","createBottomTabNavigator.tsx"],"names":["useLinkProps","action","navigation","React","linkTo","useLinkTo","href","accessibilityRole","onPress","e","shouldHandle","Platform","undefined","to","String","linking","path","options","state","getStateFromPath","root","current","getActionFromState","useLinkBuilder","getRootStateForNavigate","parent","parentState","index","routes","name","params","getPathFromState","Link","rest","props","web","onClick","default","module","exports","strings","raw","slice","__esModule","initialSafeAreaInsets","top","getStatusBarHeight","bottom","getBottomSpace","right","left","initialWindowSafeAreaInsets","SafeAreaProviderCompat","children","insets","render","this","activityState","isVisible","active","style","styles","display","collapsable","removeClippedSubviews","pointerEvents","detached","StyleSheet","container","flex","overflow","attached","Badge","visible","size","Animated","theme","useTheme","toValue","duration","useNativeDriver","finished","setRendered","opacity","backgroundColor","restStyle","textColor","color","borderRadius","fontSize","Math","numberOfLines","transform","scale","inputRange","outputRange","lineHeight","height","minWidth","alignSelf","textAlign","paddingHorizontal","TabBarIcon","horizontal","activeOpacity","renderIcon","focused","activeTintColor","inactiveOpacity","inactiveTintColor","badge","icon","position","alignItems","justifyContent","width","iconVertical","iconHorizontal","marginTop","badgeVertical","badgeHorizontal","BottomTabBarItem","button","activeBackgroundColor","inactiveBackgroundColor","showLabel","colors","customActiveTintColor","customInactiveTintColor","Color","scene","route","onLongPress","testID","accessibilityLabel","accessibilityState","selected","accessibilityStates","badgeStyle","iconStyle","label","allowFontScaling","renderLabel","tab","tabPortrait","flexDirection","tabLandscape","labelBeneath","labelBeside","marginLeft","shouldUseHorizontalLabels","adaptive","tabStyle","labelPosition","layout","maxTabItemWidth","flattenedStyle","dimensions","getPaddingBottom","ios","getTabBarHeight","customHeight","isLandscape","horizontalLabels","paddingBottom","BottomTabBar","keyboardHidesTabBar","buildLink","focusedRoute","focusedOptions","descriptors","Dimensions","onChange","window","setDimensions","d","useWindowDimensions","isKeyboardShown","handleKeyboardShow","setIsKeyboardShown","handleKeyboardHide","Keyboard","useIsKeyboardShown","onHeightChange","shouldShowTabBar","visibilityAnimationConfigRef","visibilityAnimationConfig","animation","setIsTabBarHidden","defaultInsets","useSafeArea","safeAreaInsets","tabBarHeight","hasHorizontalLabels","borderTopColor","border","translateY","isTabBarHidden","onLayout","topBorderWidth","setLayout","key","value","event","type","target","canPreventDefault","CommonActions","labelStyle","tabBar","borderTopWidth","elevation","content","SceneContent","accessibilityElementsHidden","importantForAccessibility","isFocused","background","constructor","tabBarOptions","loaded","detachInactiveScreens","sceneContainerStyle","enabled","pages","descriptor","unmountOnBlur","lazy","BottomTabBarHeightContext","BottomTabBarHeightCallbackContext","handleTabBarHeightChange","focusedRouteKey","nextProps","prevState","BottomTabView","createNavigatorFactory","useNavigationBuilder","initialRouteName","backBehavior","screenOptions"],"mappings":"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","file":"static/js/24.17ba8d8d.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Platform, GestureResponderEvent } from 'react-native';\nimport {\n  NavigationAction,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport useLinkTo from './useLinkTo';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps({ to, action }: Props) {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\n            `To 'to' option is invalid (found '${String(\n              to\n            )}'. It must be a valid string for navigation.`\n          );\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n","import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.dangerouslyGetParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state, options?.config);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n","import * as React from 'react';\nimport {\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n  getPathFromState,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.dangerouslyGetParent();\n\n  if (parent) {\n    const parentState = parent.dangerouslyGetState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n","import * as React from 'react';\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\nimport type { NavigationAction } from '@react-navigation/core';\nimport useLinkProps from './useLinkProps';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link({ to, action, ...rest }: Props) {\n  const props = useLinkProps({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n","function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nmodule.exports = _taggedTemplateLiteralLoose;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nexport const initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n","import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n","import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible ? true : false);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          backgroundColor,\n          color: textColor,\n          fontSize,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n","import React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport type { Route } from '@react-navigation/native';\nimport Badge from './Badge';\n\ntype Props = {\n  route: Route<string>;\n  horizontal: boolean;\n  badge?: string | number;\n  badgeStyle?: StyleProp<TextStyle>;\n  activeOpacity: number;\n  inactiveOpacity: number;\n  activeTintColor: string;\n  inactiveTintColor: string;\n  renderIcon: (props: {\n    focused: boolean;\n    color: string;\n    size: number;\n  }) => React.ReactNode;\n  style: StyleProp<ViewStyle>;\n};\n\nexport default function TabBarIcon({\n  horizontal,\n  badge,\n  badgeStyle,\n  activeOpacity,\n  inactiveOpacity,\n  activeTintColor,\n  inactiveTintColor,\n  renderIcon,\n  style,\n}: Props) {\n  const size = 25;\n\n  // We render the icon twice at the same position on top of each other:\n  // active and inactive one, so we can fade between them.\n  return (\n    <View\n      style={[horizontal ? styles.iconHorizontal : styles.iconVertical, style]}\n    >\n      <View style={[styles.icon, { opacity: activeOpacity }]}>\n        {renderIcon({\n          focused: true,\n          size,\n          color: activeTintColor,\n        })}\n      </View>\n      <View style={[styles.icon, { opacity: inactiveOpacity }]}>\n        {renderIcon({\n          focused: false,\n          size,\n          color: inactiveTintColor,\n        })}\n      </View>\n      <Badge\n        visible={badge != null}\n        style={[\n          styles.badge,\n          horizontal ? styles.badgeHorizontal : styles.badgeVertical,\n          badgeStyle,\n        ]}\n        size={(size * 3) / 4}\n      >\n        {badge}\n      </Badge>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    // We render the icon twice at the same position on top of each other:\n    // active and inactive one, so we can fade between them:\n    // Cover the whole iconContainer:\n    position: 'absolute',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    width: '100%',\n    // Workaround for react-native >= 0.54 layout bug\n    minWidth: 25,\n  },\n  iconVertical: {\n    flex: 1,\n  },\n  iconHorizontal: {\n    height: '100%',\n    marginTop: 3,\n  },\n  badge: {\n    position: 'absolute',\n    left: 3,\n  },\n  badgeVertical: {\n    top: 3,\n  },\n  badgeHorizontal: {\n    top: 7,\n  },\n});\n","import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <TouchableWithoutFeedback\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n        >\n          <View style={style}>{children}</View>\n        </TouchableWithoutFeedback>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n","import * as React from 'react';\n\nexport default React.createContext<((height: number) => void) | undefined>(\n  undefined\n);\n","import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Platform,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  TabNavigationState,\n  ParamListBase,\n  CommonActions,\n  useTheme,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport { useSafeArea, EdgeInsets } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport type { BottomTabBarProps, LabelPosition } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\ntype Options = {\n  state: TabNavigationState<ParamListBase>;\n  layout: { height: number; width: number };\n  dimensions: { height: number; width: number };\n  tabStyle: StyleProp<ViewStyle>;\n  labelPosition: LabelPosition | undefined;\n  adaptive: boolean | undefined;\n};\n\nconst shouldUseHorizontalLabels = ({\n  state,\n  layout,\n  dimensions,\n  adaptive = true,\n  labelPosition,\n  tabStyle,\n}: Options) => {\n  if (labelPosition) {\n    return labelPosition === 'beside-icon';\n  }\n\n  if (!adaptive) {\n    return false;\n  }\n\n  if (layout.width >= 768) {\n    // Screen size matches a tablet\n    let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n    const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n    if (flattenedStyle) {\n      if (typeof flattenedStyle.width === 'number') {\n        maxTabItemWidth = flattenedStyle.width;\n      } else if (typeof flattenedStyle.maxWidth === 'number') {\n        maxTabItemWidth = flattenedStyle.maxWidth;\n      }\n    }\n\n    return state.routes.length * maxTabItemWidth <= layout.width;\n  } else {\n    return dimensions.width > dimensions.height;\n  }\n};\n\nconst getPaddingBottom = (insets: EdgeInsets) =>\n  Math.max(insets.bottom - Platform.select({ ios: 4, default: 0 }), 0);\n\nexport const getTabBarHeight = ({\n  dimensions,\n  insets,\n  style,\n  ...rest\n}: Options & {\n  insets: EdgeInsets;\n  style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n}) => {\n  // @ts-ignore\n  const customHeight = StyleSheet.flatten(style)?.height;\n\n  if (typeof customHeight === 'number') {\n    return customHeight;\n  }\n\n  const isLandscape = dimensions.width > dimensions.height;\n  const horizontalLabels = shouldUseHorizontalLabels({ dimensions, ...rest });\n  const paddingBottom = getPaddingBottom(insets);\n\n  if (\n    Platform.OS === 'ios' &&\n    !Platform.isPad &&\n    isLandscape &&\n    horizontalLabels\n  ) {\n    return COMPACT_TABBAR_HEIGHT + paddingBottom;\n  }\n\n  return DEFAULT_TABBAR_HEIGHT + paddingBottom;\n};\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  iconStyle,\n  safeAreaInsets,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const dimensions = useWindowDimensions();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const onHeightChange = React.useContext(BottomTabBarHeightCallbackContext);\n\n  const shouldShowTabBar =\n    focusedOptions.tabBarVisible !== false &&\n    !(keyboardHidesTabBar && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    focusedOptions.tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current =\n      focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const topBorderWidth =\n      // @ts-ignore\n      StyleSheet.flatten([styles.tabBar, style])?.borderTopWidth;\n\n    onHeightChange?.(\n      height +\n        paddingBottom +\n        (typeof topBorderWidth === 'number' ? topBorderWidth : 0)\n    );\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  const paddingBottom = getPaddingBottom(insets);\n  const tabBarHeight = getTabBarHeight({\n    state,\n    insets,\n    dimensions,\n    layout,\n    adaptive,\n    labelPosition,\n    tabStyle,\n    style,\n  });\n\n  const hasHorizontalLabels = shouldUseHorizontalLabels({\n    state,\n    dimensions,\n    layout,\n    adaptive,\n    labelPosition,\n    tabStyle,\n  });\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  layout.height + paddingBottom + StyleSheet.hairlineWidth,\n                  0,\n                ],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: tabBarHeight,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={hasHorizontalLabels}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  badge={options.tabBarBadge}\n                  badgeStyle={options.tabBarBadgeStyle}\n                  label={label}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  iconStyle={iconStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n","import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n","import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n","import * as React from 'react';\n\nexport default React.createContext<number | undefined>(undefined);\n","import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  NavigationHelpersContext,\n  ParamListBase,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat, {\n  initialSafeAreaInsets,\n} from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar, { getTabBarHeight } from './BottomTabBar';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: string[];\n  tabBarHeight: number;\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n  style,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }, style]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedRouteKey)\n        ? prevState.loaded\n        : [...prevState.loaded, focusedRouteKey],\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { state, tabBarOptions } = this.props;\n\n    const dimensions = Dimensions.get('window');\n    const tabBarHeight = getTabBarHeight({\n      state,\n      dimensions,\n      layout: { width: dimensions.width, height: 0 },\n      insets: initialSafeAreaInsets,\n      adaptive: tabBarOptions?.adaptive,\n      labelPosition: tabBarOptions?.labelPosition,\n      tabStyle: tabBarOptions?.tabStyle,\n      style: tabBarOptions?.style,\n    });\n\n    this.state = {\n      loaded: [state.routes[state.index].key],\n      tabBarHeight: tabBarHeight,\n    };\n  }\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n      descriptors,\n    } = this.props;\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  private handleTabBarHeightChange = (height: number) => {\n    this.setState((state) => {\n      if (state.tabBarHeight !== height) {\n        return { tabBarHeight: height };\n      }\n\n      return null;\n    });\n  };\n\n  render() {\n    const {\n      state,\n      descriptors,\n      navigation,\n      lazy,\n      detachInactiveScreens = true,\n      sceneContainerStyle,\n    } = this.props;\n    const { routes } = state;\n    const { loaded, tabBarHeight } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <SafeAreaProviderCompat>\n          <View style={styles.container}>\n            <ScreenContainer\n              // @ts-ignore\n              enabled={detachInactiveScreens}\n              style={styles.pages}\n            >\n              {routes.map((route, index) => {\n                const descriptor = descriptors[route.key];\n                const { unmountOnBlur } = descriptor.options;\n                const isFocused = state.index === index;\n\n                if (unmountOnBlur && !isFocused) {\n                  return null;\n                }\n\n                if (lazy && !loaded.includes(route.key) && !isFocused) {\n                  // Don't render a screen if we've never navigated to it\n                  return null;\n                }\n\n                return (\n                  <ResourceSavingScene\n                    key={route.key}\n                    style={StyleSheet.absoluteFill}\n                    isVisible={isFocused}\n                    enabled={detachInactiveScreens}\n                  >\n                    <SceneContent\n                      isFocused={isFocused}\n                      style={sceneContainerStyle}\n                    >\n                      <BottomTabBarHeightContext.Provider value={tabBarHeight}>\n                        {descriptor.render()}\n                      </BottomTabBarHeightContext.Provider>\n                    </SceneContent>\n                  </ResourceSavingScene>\n                );\n              })}\n            </ScreenContainer>\n            <BottomTabBarHeightCallbackContext.Provider\n              value={this.handleTabBarHeightChange}\n            >\n              {this.renderTabBar()}\n            </BottomTabBarHeightCallbackContext.Provider>\n          </View>\n        </SafeAreaProviderCompat>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  pages: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n});\n","import * as React from 'react';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  TabRouter,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n  ParamListBase,\n} from '@react-navigation/native';\nimport BottomTabView from '../views/BottomTabView';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<BottomTabNavigationOptions> &\n  TabRouterOptions &\n  BottomTabNavigationConfig;\n\nfunction BottomTabNavigator({\n  initialRouteName,\n  backBehavior,\n  children,\n  screenOptions,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    TabNavigationState<ParamListBase>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    BottomTabNavigationOptions,\n    BottomTabNavigationEventMap\n  >(TabRouter, {\n    initialRouteName,\n    backBehavior,\n    children,\n    screenOptions,\n  });\n\n  return (\n    <BottomTabView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n      sceneContainerStyle={sceneContainerStyle}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  TabNavigationState<ParamListBase>,\n  BottomTabNavigationOptions,\n  BottomTabNavigationEventMap,\n  typeof BottomTabNavigator\n>(BottomTabNavigator);\n"],"sourceRoot":""}