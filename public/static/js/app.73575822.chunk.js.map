{"version":3,"sources":["redux/global.ts","components/notifications/slice.ts","screens/unauthenticated/login/slice.ts","screens/unauthenticated/signup/slice.ts","screens/authenticated/users/slice.ts","components/forms/dropzone/slice.tsx","components/forms/plane/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","components/forms/slot/slice.tsx","components/forms/user/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/rig/slice.tsx","redux/store.ts","graphql/Apollo.tsx","constants/Colors.ts","hooks/usePalette.ts","components/notifications/Notifications.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","components/JumpTypeSelect.tsx","components/TicketTypeSelect.tsx","hooks/useRestriction.ts","components/RigSelect.tsx","components/forms/slot/SlotForm.tsx","components/dialogs/ManifestUserDialog.tsx","components/Themed.tsx","components/NoResults.tsx","screens/authenticated/manifest/GetStarted.tsx","components/GcaChip.tsx","components/LoadMasterChip.tsx","components/PilotChip.tsx","components/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","screens/authenticated/manifest/ManifestScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/authenticated/load/LoadScreen.tsx","components/notifications/index.ts","components/PlaneSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","graphql/createQuery.tsx","components/DropzoneUserSelect.tsx","components/forms/load/LoadForm.tsx","screens/authenticated/load/CreateLoadScreen.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","screens/authenticated/packing/PackingScreen.tsx","navigation/tabs/packing.tsx","components/DatePicker.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/RigDialog.tsx","components/ScrollableScreen.tsx","components/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","screens/authenticated/profile/ProfileScreen.tsx","screens/authenticated/rig/RigScreen.tsx","components/LicenseSelect.tsx","components/FederationSelect.tsx","components/forms/user/UserForm.tsx","screens/authenticated/profile/UpdateUserScreen.tsx","navigation/tabs/profile.tsx","screens/authenticated/settings/SettingsScreen.tsx","screens/authenticated/settings/DropzoneSettingsScreen.tsx","screens/authenticated/ticket_types/TicketTypesScreen.tsx","components/forms/plane/PlaneForm.tsx","screens/authenticated/planes/CreatePlaneScreen.tsx","screens/authenticated/planes/UpdatePlaneScreen.tsx","components/forms/dropzone/DropzoneForm.tsx","screens/authenticated/dropzones/UpdateDropzoneScreen.tsx","screens/authenticated/planes/PlanesScreen.tsx","components/forms/ticket_type/TicketTypeForm.tsx","screens/authenticated/ticket_types/CreateTicketTypeScreen.tsx","screens/authenticated/ticket_types/UpdateTicketTypeScreen.tsx","components/forms/extra/ExtraForm.tsx","screens/authenticated/extras/CreateExtraScreen.tsx","screens/authenticated/extras/UpdateExtraScreen.tsx","screens/authenticated/extras/ExtrasScreen.tsx","navigation/tabs/settings.tsx","screens/authenticated/users/UsersScreen.tsx","screens/authenticated/users/AppBar.tsx","screens/authenticated/rig/UserRigScreen.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/createMutation.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","colors","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","initialState","currentUser","currentDropzone","permissions","credentials","theme","isDarkMode","createSlice","name","reducers","setCredentials","state","action","payload","setUser","setPermissions","setPrimaryColor","primary","setAccentColor","accent","setDropzone","primaryColor","secondaryColor","toggleDarkMode","logout","key","typedKey","queue","hideSnackbar","slice","showSnackbar","push","fields","email","value","error","password","setEmail","setPassword","setEmailError","setPasswordError","reset","federation","passwordConfirmation","exitWeight","phone","license","setFederation","setField","field","setFieldError","isSearchVisible","searchText","setSearchText","setSearchVisible","original","banner","isCreditSystemEnabled","isPublic","setOriginal","registration","minSlots","maxSlots","hours","nextMaintenanceHours","cost","altitude","allowManifestingSelf","extraIds","ticketTypeIds","ticketTypes","map","id","Number","gca","dispatchAt","isOpen","loadMaster","pilot","plane","jumpType","extras","load","rig","ticketType","user","rigs","role","credits","expiresAt","make","model","serial","repackExpiresAt","canopySize","globalActions","loginSlice","actions","signUpSlice","globalSlice","usersActions","usersSlice","snackbarActions","notificationSlice","slotForm","planeFormSlice","dropzoneFormSlice","ticketTypeFormSlice","extraFormSlice","loadFormSlice","slotFormSlice","userForm","userFormSlice","dropzoneUserForm","dropzoneUserFormSlice","rigForm","rigFormSlice","persistConfig","storage","Platform","OS","MMKV","whitelist","console","log","localStorage","reducer","persistCombineReducers","global","notifications","login","signup","dropzoneForm","planeForm","ticketTypeForm","extraForm","loadForm","usersScreen","store","configureStore","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","httpLink","createHttpLink","uri","Constants","manifest","extra","url","Apollo","children","dispatch","errorLink","useMemo","onError","graphQLErrors","networkError","message","locations","path","variant","statusCode","authLink","setContext","_","headers","accessToken","tokenType","JSON","stringify","client","ApolloClient","link","concat","cache","InMemoryCache","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","usePalette","MyComponent","StyleSheet","create","container","flex","justifyContent","palette","notification","length","variantStyle","backgroundColor","Snackbar","visible","onDismiss","duration","style","prefixes","Linking","config","screens","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","View","styles","Text","title","TouchableOpacity","onPress","replace","linkText","alignItems","padding","fontSize","fontWeight","marginTop","paddingVertical","color","QUERY_JUMP_TYPES","gql","JumpTypeSelect","props","useState","isMenuOpen","setMenuOpen","useQuery","variables","allowedForUserId","userId","data","loading","refetch","Subheader","Menu","anchor","Item","description","required","jumpTypes","onSelect","QUERY_TICKET_TYPES","TicketTypeSelect","globalState","dropzoneId","QUERY_PERMISSIONS","useRestriction","permission","fetchPolicy","dropzone","includes","QUERY_RIGS","RigSelect","left","Icon","icon","SlotForm","React","isEdit","allowedToManifestOthers","ScrollView","contentContainerStyle","flexGrow","HelperText","type","horizontal","ticketAddons","Chip","selected","some","filter","Divider","TextInput","mode","label","toString","keyboardType","right","Affix","onChangeText","newValue","marginBottom","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","useCallback","hasErrors","onManifest","a","async","jumpTypeId","loadId","rigId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","open","ProgressBar","indeterminate","Title","Content","Actions","Button","onClose","useThemeColor","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","NoResults","subtitle","empty","Paragraph","textAlign","display","fab","position","margin","bottom","width","height","GetStarted","hasPlanes","hasTicketTypes","separator","marginVertical","QUERY_DROPZONE_USERS","GCAChip","marginHorizontal","dropzoneUsers","edges","edge","node","LoadMasterChip","allowed","slots","slot","PilotChip","QUERY_PLANES","PlaneChip","planes","QUERY_LOAD","MUTATION_UPDATE_LOAD","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","useNavigation","loadNumber","canManifest","mutationUpdateLoad","mutation","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","Math","ceil","canUpdateLoad","canEditSelf","canEditOthers","getSlotPressAction","onSlotPress","Card","elevation","undefined","overflow","flexDirection","DataTable","Header","numeric","Row","Cell","Array","from","v","i","differenceInMinutes","marginLeft","disabled","QUERY_DROPZONE","ManifestScreen","isDialogOpen","setDialogOpen","earliestTimestamp","startOfDay","isSetupComplete","canCreateLoad","Dimensions","get","loads","numColumns","refreshing","onRefresh","renderItem","item","index","isFull","FAB","small","navigate","MonoText","fontFamily","EditScreenInfo","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","lineHeight","contentContainer","paddingTop","welcomeContainer","welcomeImage","resizeMode","codeHighlightText","borderRadius","paddingHorizontal","PlaneSelect","createQuery","query","options","getPayload","opts","previousData","transformedData","useEffect","showSnackbarErrors","DropzoneUserSelect","useQueryDropzoneUsers","requiredPermissions","LoadForm","placeholder","Checkbox","status","dzUser","MUTATION_CREATE_LOAD","CreateLoadScreen","mutationCreateLoad","hasError","onSave","createLoad","snackbar","goBack","QUERY_DROPZONES","AppBar","previous","scene","dropzoneMenuOpen","setDropzoneMenuOpen","hasRig","hasExitWeight","showSetupWarning","Appbar","BackAction","descriptor","marginRight","dropzones","Manifest","createStackNavigator","ManifestTab","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","DatePicker","setOpen","date","onChange","timestamp","format","selectedDays","onDayClick","RigForm","time","MUTATION_CREATE_RIG","MUTATION_UPDATE_RIG","RigDialog","mutationCreateRig","createData","mutationUpdateRig","updateData","response","updateRig","createRig","ScrollableScreen","setHeight","addEventListener","window","removeEventListener","content","QUERY_ROLES","RoleSelect","paddingLeft","roles","DropzoneUserForm","canUpdateRole","newRole","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","dropzoneUserId","QUERY_DROPZONE_USER","rigDialogOpen","setRigDialogOpen","dropzoneUserDialogOpen","setDropzoneUserDialogOpen","route","useRoute","isSelf","params","getRigPressAction","card","dropzoneUser","join","paddingBottom","spacer","RigScreen","QUERY_LICENSES","LicenseSelect","federationId","licenses","QUERY_FEDERATIONS","FederationSelect","federations","MUTATION_CREATE_USER","UpdateUserScreen","mutationUpdateUser","emailRegex","RegExp","test","licenseId","parseFloat","updateUser","Profile","ProfileTab","initialParams","SettingsScreen","Section","DropzoneSettingsScreen","QUERY_TICKET_TYPE","MUTATION_UPDATE_TICKET_TYPE","TicketTypesScreen","mutationUpdateTicketType","refreshControl","RefreshControl","Switch","onValueChange","DropzoneForm","MUTATION_CREATE_PLANE","CreatePlaneScreen","mutationCreatePlane","createPlane","UpdatePlaneScreen","mutationUpdatePlane","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","onPickImage","getDocumentAsync","multiple","onColorSelected","sliderComponent","SliderComponent","defaultColor","hideSliders","current","next","maxHeight","Cover","source","subheader","QUERY_DROPZONE_DETAILS","MUTATION_UPDATE_DROPZONE","UpdateDropzoneScreen","mutationUpdateDropzone","updateDropzone","PlanesScreen","FlatList","ListEmptyComponent","QUERY_EXTRAS","TicketTypeForm","altitudeMenuOpen","setAltitudeMenuOpen","xor","MUTATION_CREATE_TICKET_TYPE","CreateTicketTypeScreen","mutationCreateTicketType","createTicketType","UpdateTicketTypeScreen","updateTicketType","ExtraForm","ticket","MUTATION_CREATE_extra","CreateExtraScreen","mutationCreateExtra","createExtra","MUTATION_UPDATE_EXTRA","UpdateExtraScreen","mutationUpdateExtra","updateExtra","ExtrasScreen","Settings","SettingsTab","TicketTypeSettingsScreen","UsersScreen","search","isFocused","useIsFocused","inputContainer","input","borderColor","onSearch","searchVisible","MaterialIcons","size","UserRigScreen","BottomTab","createMaterialBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","canManageDropzone","initialRouteName","tabBarIcon","UsersTab","isRequired","pattern","validates","callback","createMutation","fieldErrorMap","onFieldError","mutate","Object","keys","forEach","x","variable","validator","fieldName","createDropzone","SignupScreen","useMutationCreateDropzone","e","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","userLogin","authenticatable","secureTextEntry","button","userSignUp","useMutationSignUp","onSignUp","Boolean","textContentType","passwordRules","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","NavigationContainer","linking","LinkingConfiguration","StatusBar","Notifications","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","require","warn","useCachedResources","ActivityIndicator","module","exports"],"mappings":"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","file":"static/js/app.73575822.chunk.js","sourcesContent":["import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n\ninterface IGlobalState {\n  currentUser: User | null;\n  credentials: Credential | null;\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nconst initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  permissions: [],\n  credentials: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone>) => {\n      state.currentDropzone = action.payload;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport default createSlice({\n  name: 'notifications',\n  initialState: {\n    queue: []\n  } as INotificationState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nconst initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'usersScreen',\n  initialState,\n  reducers: {\n    \n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<Dropzone>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nconst initialState: IPlaneEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IPlaneEditState, action: PayloadAction<Plane>) => {\n      state.original = action.payload;\n      state.fields.hours.value = action.payload.hours!;\n      state.fields.minSlots.value = action.payload.minSlots!;\n      state.fields.maxSlots.value = action.payload.maxSlots!;\n      state.fields.name.value = action.payload.name!;\n      state.fields.registration.value = action.payload.registration!;\n      state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema\";\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    altitude: {\n      value: number;\n      error: string | null;\n    },\n    allowManifestingSelf: {\n      value: boolean;\n      error: string | null;\n    },\n    extraIds: {\n      value: number[];\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ITicketTypeEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    extraIds: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'ticketTypeForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ITicketTypeEditState, action: PayloadAction<TicketType>) => {\n      state.original = action.payload;\n      state.fields.altitude.value = action.payload.altitude!;\n      state.fields.cost.value = action.payload.cost!;\n      state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nconst initialState: IExtraEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'ExtraForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IExtraEditState, action: PayloadAction<Extra>) => {\n      state.original = action.payload;\n      state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n      state.fields.cost.value = action.payload.cost;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ILoadEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'loadForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ILoadEditState, action: PayloadAction<Load>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"user\"\n  | \"exitWeight\"\n  | \"extras\"\n>;\n\ninterface ISlotEditState {\n  original: Slot | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Slot[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    user: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<Slot>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IUserEditState = {\n  original: null,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'userForm',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IUserEditState, action: PayloadAction<User>) => {\n      state.original = action.payload;\n      state.federation.value = action.payload.license?.federation!;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"credits\"\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneUserEditState = {\n  original: null,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    credits: {\n      value: 0,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'dropzoneUserForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IDropzoneUserEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IRigEditState = {\n  original: null,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'rigForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IRigEditState, action: PayloadAction<Rig>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport MMKV from \"react-native-mmkv-storage\";\nimport { persistStore, persistCombineReducers } from \"redux-persist\";\nimport storage from 'redux-persist/lib/storage';\n\nimport globalSlice from \"./global\";\nimport { Platform } from \"react-native\";\nimport notificationSlice from \"../components/notifications/slice\";\n\nimport loginSlice from \"../screens/unauthenticated/login/slice\";\nimport signUpSlice from \"../screens/unauthenticated/signup/slice\";\nimport usersSlice from \"../screens/authenticated/users/slice\";\nimport dropzoneFormSlice from \"../components/forms/dropzone/slice\";\nimport planeFormSlice from \"../components/forms/plane/slice\";\nimport ticketTypeFormSlice from \"../components/forms/ticket_type/slice\";\nimport extraFormSlice from \"../components/forms/extra/slice\";\nimport loadFormSlice from \"../components/forms/load/slice\";\nimport slotFormSlice from \"../components/forms/slot/slice\";\nimport userFormSlice from \"../components/forms/user/slice\";\nimport dropzoneUserFormSlice from \"../components/forms/dropzone_user/slice\";\nimport rigFormSlice from \"../components/forms/rig/slice\";\n\n// Re-export actions:\nexport const { actions: loginActions } = loginSlice;\nexport const { actions: signUpActions } = signUpSlice;\nexport const { actions: globalActions } = globalSlice;\nexport const { actions: usersActions } = usersSlice;\nexport const { actions: snackbarActions } = notificationSlice;\nexport const { actions: planeForm } = planeFormSlice;\nexport const { actions: dropzoneForm } = dropzoneFormSlice;\nexport const { actions: ticketTypeForm } = ticketTypeFormSlice;\nexport const { actions: extraForm } = extraFormSlice;\nexport const { actions: loadForm } = loadFormSlice;\nexport const { actions: slotForm } = slotFormSlice;\nexport const { actions: userForm } = userFormSlice;\nexport const { actions: dropzoneUserForm } = dropzoneUserFormSlice;\nexport const { actions: rigForm } = rigFormSlice;\n\nconst persistConfig = {\n  key: 'root',\n  storage: Platform.OS === \"web\" ? storage : MMKV(),\n  whitelist: [\"global\", \"notifications\"],\n};\n\nconsole.log({ localStorage, MMKV });\n\nconst reducer = persistCombineReducers(persistConfig, {\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    login: loginSlice.reducer,\n    signup: signUpSlice.reducer,\n    dropzoneForm: dropzoneFormSlice.reducer,\n    planeForm: planeFormSlice.reducer,\n    ticketTypeForm: ticketTypeFormSlice.reducer,\n    extraForm: extraFormSlice.reducer,\n    loadForm: loadFormSlice.reducer,\n    slotForm: slotFormSlice.reducer,\n    userForm: userFormSlice.reducer,\n    dropzoneUserForm: dropzoneUserFormSlice.reducer,\n    rigForm: rigFormSlice.reducer,\n    usersScreen: usersSlice.reducer,\n  });\n\nexport const store = configureStore({\n  reducer\n});\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport React, { useCallback, useMemo } from 'react';\nimport Constants from \"expo-constants\";\nimport { globalActions, snackbarActions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path }) =>\n        dispatch(\n          snackbarActions.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n        )\n      );\n    if (networkError) {\n      dispatch(\n        snackbarActions.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n      )\n    }\n\n    if (\n      networkError &&\n      networkError.name ==='ServerError' &&\n      (networkError as ServerError).statusCode === 401\n    ) {\n      dispatch(\n        globalActions.logout()\n      );\n    }\n  }),\n  [dispatch]);\n\n  const authLink = useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\nconst successColor = \"#00C851\";\nconst errorColor = \"#ff4444\";\nconst warningColor = \"#FF8800\";\nconst infoColor = \"#0099CC\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default MyComponent;","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"dz://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { JumpType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nconst QUERY_JUMP_TYPES = gql`\n  query JumpTypes($allowedForUserId: Int) {\n    jumpTypes(allowedForUserId: $allowedForUserId) {\n      id\n      name\n    }\n  }\n`;\n\nexport default function JumpTypeSelect(props: IJumpTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_JUMP_TYPES, {\n    variables: {\n      allowedForUserId: props.userId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      Jump type\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select jump type\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.jumpTypes?.map((jumpType) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(jumpType);\n            }}\n            title={\n              jumpType.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { TicketType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  allowManifestingSelf?: boolean | null;\n  onSelect(jt: TicketType): void;\n}\n\nconst QUERY_TICKET_TYPES = gql`\n  query TicketTypes($allowManifestingSelf: Boolean, $dropzoneId: Int!) {\n    ticketTypes(allowManifestingSelf: $allowManifestingSelf, dropzoneId: $dropzoneId) {\n      id\n      name\n\n      extras {\n        id\n        name\n        cost\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeSelect(props: ITicketTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      allowManifestingSelf: props.allowManifestingSelf,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.name || \"Please select ticket type\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.ticketTypes?.map((ticketType) => \n            <List.Item\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(ticketType);\n              }}\n              title={\n                ticketType.name || \"-\"\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useAppSelector } from \"../redux\";\n\nconst QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: string): boolean {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  return data?.dropzone?.currentUser?.permissions?.includes(permission as any) || false;\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Rig, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryRigs(\n    $dropzoneId: Int\n    $userId: Int\n  ) {\n    rigs(dropzoneId: $dropzoneId, userId: $userId) {\n      id\n      make\n      model\n      canopySize\n      serial\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_RIGS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.rigs?.map((rig) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            title={\n              `${props.value?.make} ${props.value?.model}`\n            }\n            description={\n              `${props.value?.canopySize} sqft`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport JumpTypeSelect from '../../JumpTypeSelect';\nimport TicketTypeSelect from '../../TicketTypeSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../RigSelect';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.slotForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.fields.user?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", Number(state.fields.user.value.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.user.value.rigs?.length) {\n        dispatch(\n          actions.setField([\"rig\", state.fields.user.value.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.user?.value?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.fields?.user?.value?.id === globalState.currentUser?.id;\n\n  \n  const allowedToManifestSelf = useRestriction(\n    isEdit ? \"updateSlot\" : \"createSlot\"\n  );\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? \"updateUserSlot\" : \"createUserSlot\"\n  )\n  console.log(\"Fields\", state.fields);\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ flexGrow: 1}}>\n      \n      <JumpTypeSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.user?.value?.id) || null}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeSelect\n        value={state.fields.ticketType.value}\n        required\n        allowManifestingSelf={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        state?.fields?.ticketType?.value?.extras?.length && (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      <RigSelect\n        value={state.fields.rig.value}\n        userId={Number(state.fields.user?.value?.id)}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { slotForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport SlotForm from \"../forms/slot/SlotForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $userId: Int\n    $exitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          userId: $userId\n          exitWeight: $exitWeight\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            ticketType {\n              id\n              name\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.slotForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          userId: Number(state.fields.user?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(slotForm.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(slotForm.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(slotForm.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(slotForm.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(slotForm.setFieldError([\"rig\", message]));\n          case \"user\":\n            return dispatch(slotForm.setFieldError([\"user\", message]));\n          case \"exit_weight\":\n            return dispatch(slotForm.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.user?.value?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <SlotForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(slotForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { Slot, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  slots: Slot[];\n  onSelect(user: User): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"parachute\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.user as User);\n            }}\n            title={\n              slot?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane-takeoff\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneChipSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport { useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Badge, Button, Card, DataTable, List, Menu, Paragraph, ProgressBar } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport GCAChip from '../../../components/GcaChip';\nimport LoadMasterChip from '../../../components/LoadMasterChip';\nimport PilotChip from '../../../components/PilotChip';\nimport PlaneChip from '../../../components/PlaneChip';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Plane, Slot } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { useAppSelector } from '../../../redux';\n\ninterface ILoadCard {\n  load: Load;\n  loadNumber: number;\n  canManifest: boolean;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nconst QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        user {\n          id\n          name\n        }\n        ticketType {\n          id\n          name\n          altitude\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const navigation = useNavigation();\n  const { load, loadNumber, onManifest, canManifest } = props;\n  const { data, loading } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const updatePilot = React.useCallback(async (pilot: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const canUpdateLoad = useRestriction(\"updateLoad\");\n  const canEditSelf = useRestriction(\"updateSlot\");\n  const canEditOthers = useRestriction(\"updateUserSlot\");\n\n  const getSlotPressAction = React.useCallback((slot: Slot) => {\n\n    if (slot?.user?.id !== state.currentUser?.id && !canEditOthers) {\n      return;\n    }\n    return () => {\n      if (slot.user?.id === state.currentUser?.id) {\n        if (canEditSelf) {\n          props.onSlotPress(slot);\n        }\n      } else if (canEditOthers) {\n        props.onSlotPress(slot);\n      }\n    }\n  }, [JSON.stringify(load), canEditOthers, props.onSlotPress]);\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  \n\n  return (\n  <Card style={{ marginVertical: 16 }} elevation={3}>\n    <Card.Title\n      title={`Load ${loadNumber}`}\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal>\n          <PlaneChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.plane}\n            onSelect={updatePlane}\n          />\n          <GCAChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.gca?.user}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.pilot?.user}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.loadMaster?.user}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Exit weight</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              \n              return (\n                <DataTable.Row onPress={getSlotPressAction(slot)}>\n                  <DataTable.Cell onPress={getSlotPressAction(slot)}>{slot?.user?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric onPress={getSlotPressAction(slot)}>{slot?.exitWeight}</DataTable.Cell>\n                  <DataTable.Cell numeric onPress={getSlotPressAction(slot)}>{slot?.jumpType?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric onPress={getSlotPressAction(slot)}>{slot?.ticketType?.altitude}</DataTable.Cell>\n                </DataTable.Row>\n              )\n            })\n          }\n          {\n            Array.from({length: (load?.maxSlots || 0) - (load?.slots?.length || 0)}, (v, i) => i).map(() =>\n              <DataTable.Row>\n                <DataTable.Cell>- Available -</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && (\n        <View style={{ flex: 1, backgroundColor: \"#FF8800\", padding: 8 }}>\n          <Paragraph>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)}>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)}>\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button mode=\"outlined\" onPress={() => setDispatchOpen(true)}>\n                    Dispatch\n                  </Button>\n                }\n              >\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <List.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      <Button style={{marginLeft: 8 }} mode=\"contained\" onPress={() => onManifest()} disabled={!canManifest}>\n        Manifest\n      </Button>\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { useQuery } from '@apollo/client';\nimport { useNavigation } from '@react-navigation/core';\nimport { startOfDay } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserDialog from '../../../components/dialogs/ManifestUserDialog';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { globalActions, slotForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\n\nconst QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"no-cache\"\n  });\n\n  const navigation = useNavigation();\n\n  const hasPlanes = !!data?.dropzone?.planes?.length;\n  const hasTicketTypes = !!data?.dropzone?.ticketTypes?.length;\n  const isPublic = !!data?.dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(globalActions.setDropzone(data.dropzone));\n    \n      dispatch(\n        globalActions.setUser({\n          ...state?.currentUser,\n          ...(data?.dropzone?.currentUser.user || {})\n        })\n      );\n    }\n  }, [JSON.stringify(data?.dropzone)]);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.primaryColor && data?.dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.primaryColor));\n    }\n\n    if (data?.dropzone?.secondaryColor && data?.dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.secondaryColor));\n    }\n  }, [\n    data?.dropzone?.primaryColor,\n    data?.dropzone?.secondaryColor\n  ])\n\n  const allowed = useRestriction(\"createSlot\");\n  const canCreateLoad = useRestriction(\"createLoad\");\n\n  return (\n    <>\n    \n    <ManifestUserDialog\n      open={isDialogOpen}\n      onClose={() => setDialogOpen(false)}\n      onSuccess={() => setDialogOpen(false)}\n    />\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (data?.dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={1}\n                        data={data?.dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              canManifest={allowed && edge?.node?.isOpen && !edge?.node?.isFull}\n                              loadNumber={(data?.dropzone?.loads?.edges?.length || 0) - index}\n                              onSlotPress={(slot) => {\n                                dispatch(slotForm.setOriginal(slot));\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                              onManifest={() => {\n                                dispatch(\n                                  slotForm.setField([\"user\", state.currentUser])\n                                );\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => navigation.navigate(\"CreateLoadScreen\")}\n            label=\"New load\"\n          />\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function LoadScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/LoadScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Plane, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  required?: boolean;\n  onSelect(plane: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneSelect(props: IPlaneSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"No plane selected\"\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"airplane\" />}\n        />\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane);\n            }}\n            title={\n              plane.name || \"-\"\n            }\n            description={\n              plane.registration\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { FieldError, Query } from \"../graphql/schema\";\nimport { snackbarActions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends {}, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            snackbarActions.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        onError!(error.message);\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import React, { useState } from \"react\";\nimport { List, Menu, Title } from \"react-native-paper\";\nimport useQueryDropzoneUsers from \"../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IDropzoneUserSelect {\n  dropzoneId: number;\n  requiredPermissions: string[];\n  value: DropzoneUser | null;\n  required?: boolean;\n  label: string;\n  onSelect(dzUser: DropzoneUser): void;\n}\n\n\n\n\nexport default function DropzoneUserSelect(props: IDropzoneUserSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: props.requiredPermissions\n    }\n  });\n\n  return (\n    <>\n      <Title>{props.label}</Title>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.user?.id ? props.value?.user.name : \"No user selected\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.edges?.map((edge) => \n            <List.Item\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(edge?.node as DropzoneUser);\n              }}\n              title={\n                edge?.node?.user?.name || \"-\"\n              }\n              description={\n                edge?.node?.role?.name || null\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport PlaneSelect from '../../PlaneSelect';\nimport DropzoneUserSelect from '../../DropzoneUserSelect';\n\nconst { actions } = slice;\n\n\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.loadForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingHorizontal: 16 }}>\n      \n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <PlaneSelect\n        value={state.fields.plane.value}\n        onSelect={(value) => {\n          dispatch(actions.setField([\"plane\", value]));\n          dispatch(actions.setField([\"maxSlots\", value.maxSlots]));\n        }}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n      />\n      <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n        { state.fields.plane.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.value}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n\n      \n      <Checkbox.Item\n        label=\"Allow public manifesting\"\n        status={!!state.fields.isOpen.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"isOpen\", !state.fields.isOpen.value]))\n        }\n      />\n\n      <Divider />\n      <DropzoneUserSelect\n        label=\"GCA\"\n        onSelect={dzUser => dispatch(actions.setField([\"gca\", dzUser]))}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        value={state.fields.gca.value || null}\n        requiredPermissions={[\"actAsGCA\"]}\n        required\n      />\n      <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n        { state.fields.gca.error || \"\" }\n      </HelperText>\n      \n      <DropzoneUserSelect\n        label=\"Pilot\"\n        onSelect={dzUser => dispatch(actions.setField([\"pilot\", dzUser]))}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        value={state.fields.pilot.value || null}\n        requiredPermissions={[\"actAsPilot\"]}\n      />\n      <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n        { state.fields.pilot.error || \"\" }\n      </HelperText>\n\n      \n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\nimport { useNavigation } from '@react-navigation/core';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/load/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport LoadForm from '../../../components/forms/load/LoadForm';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function CreateLoadScreen() {\n  const { loadForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateLoad, data] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(plane.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <View style={styles.container}>\n        <LoadForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useState } from \"react\";\nimport { Appbar, Menu, Paragraph, Text, Button } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Dropzone, Query } from \"../graphql/schema\";\nimport { globalActions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { View, StyleSheet } from \"react-native\";\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzonesCompact {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\ninterface IAppBar extends StackHeaderProps {\n  searchEnabled: boolean;\n  searchVisible: boolean;\n  setSearchVisible(visible: boolean): void;\n}\n\n\nfunction AppBar({ navigation, previous, scene }: StackHeaderProps) {\n  const [dropzoneMenuOpen, setDropzoneMenuOpen] = useState(false);\n  const { data } = useQuery<Query>(QUERY_DROPZONES);\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  const hasRig = !!currentDropzone?.currentUser?.user?.rigs?.length;\n  const hasExitWeight = !!currentDropzone?.currentUser?.user?.exitWeight;\n\n  const showSetupWarning = !hasRig || !hasExitWeight;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} />\n      <Menu\n        onDismiss={() => setDropzoneMenuOpen(false)}\n        visible={dropzoneMenuOpen}\n        anchor={\n          <Text\n            onPress={() => setDropzoneMenuOpen(true)}\n            style={{ color: \"white\", marginRight: 8 }}\n          >\n            {currentDropzone?.name}\n          </Text>\n      }>\n        {\n          data?.dropzones?.edges?.map((edge) =>\n            <Menu.Item\n              title={edge?.node?.name}\n              onPress={() => {\n                dispatch(globalActions.setDropzone(edge?.node as Dropzone));\n                setDropzoneMenuOpen(false);\n              }}\n            />\n          )\n        }\n      </Menu>\n    </Appbar.Header>\n    { showSetupWarning && (\n      <View style={styles.warning}>\n        <Paragraph>\n          You need to complete your profile\n        </Paragraph>\n        <Button color=\"black\" mode=\"outlined\" onPress={() => navigation.navigate(\"Profile\")}>\n          Take me there\n        </Button>\n      </View>\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { useAppSelector } from '../../redux';\n\nimport ManifestScreen from '../../screens/authenticated/manifest/ManifestScreen';\nimport LoadScreen from '../../screens/authenticated/load/LoadScreen';\nimport CreateLoadScreen from '../../screens/authenticated/load/CreateLoadScreen';\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  LoadScreen: undefined;\n  CreateLoadScreen: undefined;\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Loads\" }}/>\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function PackingScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/PackingScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport PackingScreen from '../../screens/authenticated/packing/PackingScreen';\n\nexport type IPackingTabParams = {\n  PackingScreen: undefined;\n}\n\nconst Packing = createStackNavigator<IPackingTabParams>();\n\nexport default function PackingTab() {\n  return (\n    <Packing.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Packing.Screen name=\"PackingScreen\" component={PackingScreen} />\n    </Packing.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\n\nconst { actions } = slice;\n\nexport default function RigForm() {\n  const state = useAppSelector(state => state.rigForm);\n  const dispatch = useAppDispatch();\n  const [isDatePickerOpen, setDatePickerOpen] = React.useState(false);\n\n  return ( \n    <ScrollView style={styles.fields}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport { result } from \"lodash\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { rigForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.rigForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"repackExpiresAt\", \"Required\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(rigForm.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(rigForm.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(rigForm.setFieldError([\"serial\", message]));\n          case \"canopySize\":\n            return dispatch(rigForm.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(rigForm.setFieldError([\"repackExpiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading || updateData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <RigForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(rigForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps } from \"react-native\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const [height, setHeight] = useState(Dimensions.get('window').height)\n\n  useEffect(() => {\n    Dimensions.addEventListener('change', ({ window }) => setHeight(window.height))\n    return () => {\n      Dimensions.removeEventListener('change', ({ window }) => setHeight(window.height))\n    }\n  }, []);\n\n  return (\n    <ScrollView style={[styles.container, { height }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    alignItems: \"center\"\n  }\n})","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Query, UserRole } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport RoleSelect from '../../RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\n\nconst { actions } = slice;\n\nexport default function DropzoneUserForm() {\n  const { dropzoneUserForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermissions\");\n\n  return ( \n    <ScrollView style={styles.fields}>\n\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Credits\"\n        error={!!state.fields.credits.error}\n        value={state.fields.credits.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"credits\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.credits.error ? \"error\" : \"info\"}>\n        { state.fields.credits.error || `Current balance: $${state.original?.credits || 0}` }\n      </HelperText>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { dropzoneUserForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $credits: Float,\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          credits: $credits,\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.dropzoneUserForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.credits.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"credits\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          credits: state.fields.credits.value,\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(dropzoneUserForm.setFieldError([\"role\", message]));\n          case \"credits\":\n            return dispatch(dropzoneUserForm.setFieldError([\"credits\", message]));\n          case \"expires_at\":\n            return dispatch(dropzoneUserForm.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(dropzoneUserForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, FAB, List, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport RigDialog from '../../../components/dialogs/RigDialog';\nimport { dropzoneUserForm, globalActions, rigForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Query } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\n\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const [rigDialogOpen, setRigDialogOpen] = React.useState(false);\n  const [dropzoneUserDialogOpen, setDropzoneUserDialogOpen] = React.useState(false);\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = state.currentUser?.id === route.params.userId;\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      dropzoneUserId: Number(route.params.userId)\n    }\n  });\n\n  const getRigPressAction = React.useCallback((rig) => {\n    return () => {\n      dispatch(rigForm.setOriginal(rig));\n      setRigDialogOpen(true);\n    }\n  }, [dispatch, setRigDialogOpen]);\n\n  return (\n    <>\n    <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      \n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Basic information\" />\n          <Card.Content>\n            <List.Item\n              title=\"Name\"\n              left={() => <List.Icon icon=\"account-outline\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.name  || \"-\"}\n            />\n            <List.Item\n              title=\"Email\"\n              left={() => <List.Icon icon=\"at\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.email  || \"-\"}\n            />\n\n            <List.Item\n              title=\"Phone\"\n              left={() => <List.Icon icon=\"phone\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.phone  || \"-\"}\n            />\n\n            <List.Item\n              title=\"License\"\n              left={() => <List.Icon icon=\"ticket-account\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.license?.name || \"-\"}\n            />\n\n            <List.Item\n              title=\"Exit weight\"\n              left={() => <List.Icon icon=\"scale\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.exitWeight  || \"-\"}\n            />\n          </Card.Content>\n          {\n            isSelf && (\n              <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n                <Button\n                  icon=\"pencil\"\n                  onPress={() =>\n                    navigation.navigate(\"UpdateUserScreen\", { user: state.currentDropzone?.currentUser })\n                  }\n                >\n                  Edit\n                </Button>\n              </Card.Actions>\n            )}\n        </Card>\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title={state.currentDropzone?.name} />\n          <Card.Content>\n            <List.Item\n              title=\"Role\"\n              description={data?.dropzone?.dropzoneUser?.role?.name}\n              left={() => <List.Icon icon=\"lock\" />}\n            />\n            <List.Item\n              title=\"Credits\"\n              description={data?.dropzone?.dropzoneUser?.credits}\n              left={() => <List.Icon icon=\"cash-multiple\" />}\n            />\n            <List.Item\n              title=\"Membership\"\n              description={\n                !data?.dropzone?.dropzoneUser?.expiresAt ?\n                  <span>Not a member</span>\n                : format((data?.dropzone?.dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")\n              }\n              left={() =>\n                <List.Icon\n                  icon=\"card-account-details\"\n                  color={\n                    data?.dropzone?.dropzoneUser?.expiresAt && (\n                      data?.dropzone?.dropzoneUser?.expiresAt * 1000 > new Date().getTime()\n                    ) ? undefined : \"#B00020\"}\n                />\n              }\n\n            />\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n            <Button\n              icon=\"pencil\"\n              onPress={() => {\n                dispatch(dropzoneUserForm.setOriginal(data?.dropzone?.dropzoneUser!));\n                setDropzoneUserDialogOpen(true);\n              }}\n            >\n              Edit\n            </Button>\n          </Card.Actions>\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Rigs\" />\n          <Card.Content>\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>\n                  Container\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Repack due\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Canopy size\n                </DataTable.Title>\n              </DataTable.Header>\n\n              {\n                data?.dropzone?.dropzoneUser?.user?.rigs?.map((rig) =>\n                  <DataTable.Row onPress={getRigPressAction(rig)}>\n                    <DataTable.Cell onPress={getRigPressAction(rig)}>\n                      {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                    </DataTable.Cell>\n                    <DataTable.Cell onPress={getRigPressAction(rig)} numeric>\n                      {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                    </DataTable.Cell>\n                    <DataTable.Cell onPress={getRigPressAction(rig)} numeric>\n                      {`${rig?.canopySize}`}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                )\n              }\n            </DataTable>\n          </Card.Content>\n          {\n            isSelf && (\n            <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n              <Button onPress={() => setRigDialogOpen(true)}>\n                Add rig\n              </Button>\n            </Card.Actions>\n          )}\n        </Card>\n\n        { data?.dropzone?.dropzoneUser?.id === state.currentUser?.id && (\n          <Button color=\"#B00020\" onPress={() => dispatch(globalActions.logout())}>\n            Log out\n          </Button>\n        )}\n      \n      </ScrollableScreen>\n      \n      <RigDialog\n        onClose={() => setRigDialogOpen(false)}\n        onSuccess={() => setRigDialogOpen(false)}\n        userId={Number(data?.dropzone?.dropzoneUser?.user?.id)}\n        open={rigDialogOpen}\n      />\n      \n      <DropzoneUserDialog\n        onClose={() => setDropzoneUserDialogOpen(false)}\n        onSuccess={() => setDropzoneUserDialogOpen(false)}\n        open={dropzoneUserDialogOpen}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    alignItems: 'center',\n    flexGrow: 1,\n    paddingBottom: 56\n  },\n  card: {\n    marginVertical: 8,\n    width: \"80%\"\n  },\n  fields: {\n    width: \"80%\",\n    display: \"flex\",\n  },\n  spacer: {\n    width: \"100%\",\n    height: 32,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function RigScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/RigScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { License, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseSelect(props: ILicenseSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      License\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select a license\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.licenses?.map((license) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(license);\n            }}\n            title={\n              license.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Federation, Query } from \"../graphql/schema\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select federation\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.federations?.map((federation) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport LicenseSelect from '../../LicenseSelect';\nimport FederationSelect from '../../FederationSelect';\nimport useRestriction from '../../../hooks/useRestriction';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.userForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.original?.id === globalState.currentUser?.id;  \n\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ flexGrow: 1}}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      \n      <FederationSelect\n        value={state?.fields?.license?.value?.federation || state.federation.value}\n        onSelect={(value) => dispatch(actions.setFederation(value))}\n        required\n      />\n\n      <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n        { state.federation.error || \"\" }\n      </HelperText>\n\n      { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n        <>\n          <LicenseSelect\n            value={state.fields.license.value}\n            federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n            onSelect={(value) => dispatch(actions.setField([\"license\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n            { state.fields.license.error || \"\" }\n          </HelperText>\n        </>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"70%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, userForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/user/slice\";\nimport { Mutation, User } from '../../../graphql/schema';\nimport UserForm from '../../../components/forms/user/UserForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        phone: $phone,\n        email: $email,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateUserScreen() {\n  const { userForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { user: User }}>();\n  const user = route.params!.user;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(user));\n  }, [user?.id]);\n\n  const [mutationUpdateUser, data] = useMutation<Mutation>(MUTATION_CREATE_USER);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            licenseId: !license.value?.id ? null : Number(license.value!.id),\n            phone: phone.value,\n            exitWeight: parseFloat(exitWeight.value!),\n            email: email.value,\n          }\n        });\n        \n        if (result.data?.updateUser?.user) {\n          const { fieldErrors, errors } = result.data.updateUser;\n\n          if (fieldErrors) {\n            fieldErrors?.map(({ field, message }) => {\n              switch (field) {\n                case \"name\":\n                  return dispatch(userForm.setFieldError([\"name\", message]));\n                case \"exit_weight\":\n                  return dispatch(userForm.setFieldError([\"exitWeight\", message]));\n                case \"license_id\":\n                  return dispatch(userForm.setFieldError([\"license\", message]));\n                case \"phone\":\n                  return dispatch(userForm.setFieldError([\"phone\", message]));\n                case \"email\":\n                  return dispatch(userForm.setFieldError([\"email\", message]));\n              }\n            });\n          } else if (errors?.length) {\n            errors.map((message) =>\n              dispatch(\n                snackbar.showSnackbar({ message: message, variant: \"error\" })\n              )\n            );\n          } else {\n            dispatch(\n              snackbar.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n            );\n            navigation.goBack();\n            dispatch(userForm.reset());\n          }\n\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n  return (\n    <View style={styles.container}>\n        <UserForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport ProfileScreen from '../../screens/authenticated/profile/ProfileScreen';\nimport RigScreen from '../../screens/authenticated/rig/RigScreen';\nimport UpdateUserScreen from '../../screens/authenticated/profile/UpdateUserScreen';\nimport AppBar from '../AppBar';\nimport { useAppSelector } from '../../redux';\n\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  RigScreen: undefined;\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentDropzone?.currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n      <Profile.Screen name=\"RigScreen\" component={RigScreen} options={{ title: \"Rig\" }} />\n    </Profile.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { View } from '../../../components/Themed';\nimport { useAppSelector } from '../../../redux';\n\n\n\n\nexport default function SettingsScreen() {\n  \n  const navigation = useNavigation();\n  const state = useAppSelector(state => state.global);\n \n\n  return (\n    <View style={styles.container}>\n      <List.Section title=\"Dropzone\">\n        <List.Item\n          title=\"Configuration\"\n          onPress={() => navigation.navigate(\"UpdateDropzoneScreen\", { dropzone: state.currentDropzone })}\n          left={() => <List.Icon color=\"#000\" icon=\"information-outline\" />}\n        />\n        <List.Item\n          title=\"Planes\"\n          onPress={() => navigation.navigate(\"PlanesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"airplane\" />}\n        />\n        <List.Item\n          title=\"Rigs\"\n          left={() => <List.Icon color=\"#000\" icon=\"parachute\" />}\n          description=\"Coming soon\"\n        />\n      </List.Section>\n\n      <List.Section title=\"Tickets\">\n        <List.Item\n          title=\"Ticket types\"\n          onPress={() => navigation.navigate(\"TicketTypesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"ticket\" />}\n          />\n        <List.Item\n          title=\"Ticket add-ons\"\n          onPress={() => navigation.navigate(\"ExtrasScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"plus\" />}\n        />\n      </List.Section>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function DropzoneSettingsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/DropzoneSettingsScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, RefreshControl } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar, Switch } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Mutation, Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport { ScrollView,  } from 'react-native-gesture-handler';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      altitude\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketTypePublic(\n    $id: Int!,\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function TicketTypesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n  const [mutationUpdateTicketType, mutation] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n  \n  React.useEffect(() => {\n    if (route.name === \"TicketTypesScreen\") {\n      refetch();\n    }\n  }, [route.name])\n  return (\n      <ScrollView style={styles.container} contentContainerStyle={[styles.content, {  backgroundColor: \"white\" }]} refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Name</DataTable.Title>\n            <DataTable.Title numeric>Cost</DataTable.Title>\n            <DataTable.Title numeric>Altitude</DataTable.Title>\n            <DataTable.Title numeric>Public</DataTable.Title>\n          </DataTable.Header>\n\n          { data?.ticketTypes?.map((ticketType) =>\n            <DataTable.Row onPress={() => navigation.navigate(\"UpdateTicketTypeScreen\", { ticketType })}>\n              <DataTable.Cell>{ticketType.name}</DataTable.Cell>\n              <DataTable.Cell numeric>${ticketType.cost}</DataTable.Cell>\n              <DataTable.Cell numeric>\n                {ticketType.altitude}\n              </DataTable.Cell>\n              <DataTable.Cell numeric>\n                <Switch\n                  onValueChange={() => {\n                    mutationUpdateTicketType({\n                      variables: {\n                        id: Number(ticketType.id),\n                        allowManifestingSelf: !ticketType.allowManifestingSelf\n                      }\n                    })\n                  }}\n                  value={!!ticketType.allowManifestingSelf}\n                />\n              </DataTable.Cell>\n            </DataTable.Row>\n            )}\n        </DataTable>\n        \n        <FAB\n          style={styles.fab}\n          small\n          icon=\"plus\"\n          onPress={() => navigation.navigate(\"CreateTicketTypeScreen\")}\n          label=\"New ticket type\"\n        />\n      </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.planeForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingTop: 200 }}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useNavigation } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreatePlane({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.createPlane?.plane) {\n          const { plane } = result.data.createPlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreatePlane]);\n\n  return (\n    <View style={styles.container}>\n        <PlaneForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation, Plane } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { plane: Plane }}>();\n  const plane = route.params!.plane;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(plane));\n  }, [plane?.id]);\n\n  const [mutationUpdatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdatePlane({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.updatePlane?.plane) {\n          const { plane } = result.data.updatePlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdatePlane]);\n\n  return (\n    <View style={styles.container}>\n        <PlaneForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300}}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <View style={styles.fields}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"70%\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, ProgressBar } from 'react-native-paper';\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Dropzone, Mutation, Query } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\nconst QUERY_DROPZONE_DETAILS = gql`\n  query QueryDropzoneDetails($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateDropzoneScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const route = useRoute<{ key: string, name: string, params: { dropzone: Dropzone }}>();\n  const dropzone = route.params!.dropzone;\n  const navigation = useNavigation();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_DETAILS, {\n    variables: { dropzoneId: Number(dropzone.id)}\n  });\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(actions.setOriginal(data.dropzone));\n    }\n  }, [data?.dropzone?.id]);\n\n  const [mutationUpdateDropzone, mutation] = useMutation<Mutation>(MUTATION_UPDATE_DROPZONE);\n\n  const onSave = React.useCallback(async () => {\n    let hasError = false;\n    const { name, banner, federation, primaryColor, secondaryColor, isCreditSystemEnabled, isPublic } = state.fields;\n\n    if (!name.value?.length || name.value?.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (!hasError) {\n      try {\n        const result = await mutationUpdateDropzone({\n          variables: {\n            id: Number(dropzone?.id),\n            name: name.value,\n            banner: banner.value || null,\n            primaryColor: primaryColor.value,\n            secondaryColor: secondaryColor.value,\n            federationId: Number(federation?.value?.id),\n            isCreditSystemEnabled: !!isCreditSystemEnabled,\n            isPublic: !!isPublic\n          }\n        });\n\n        result?.data?.updateDropzone?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"federation\":\n            case \"federation_id\":\n              return dispatch(actions.setFieldError([\"federation\", message]));\n            case \"banner\":\n              return dispatch(actions.setFieldError([\"banner\", message]));\n            case \"primary_color\":\n              return dispatch(actions.setFieldError([\"primaryColor\", message]));\n            case \"secondary_color\":\n              return dispatch(actions.setFieldError([\"secondaryColor\", message]));\n            case \"is_credit_system_enabled\":\n              return dispatch(actions.setFieldError([\"isCreditSystemEnabled\", message]));\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"is_public\":\n              return dispatch(actions.setFieldError([\"isPublic\", message]));\n          }\n        });\n        if (result?.data?.updateDropzone?.errors?.length) {\n          return dispatch(snackbarActions.showSnackbar({\n            message: result?.data?.updateDropzone?.errors[0],\n            variant: \"error\"\n          }));\n        } else if (!result?.data?.updateDropzone?.fieldErrors?.length) {\n          // No errors:\n          if (result.data?.updateDropzone?.dropzone) {\n            dispatch(\n              globalActions.setDropzone({\n                ...(globalState.currentDropzone || {}),\n                ...result?.data?.updateDropzone?.dropzone,\n              })\n            );\n            dispatch(\n              snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n            );\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateDropzone]);\n\n  return (\n    <>\n    <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <DropzoneForm />\n      <View style={styles.fields}>\n        <Button mode=\"contained\" disabled={mutation.loading} onPress={onSave} loading={mutation.loading}>\n          Save\n        </Button>\n      </View>\n    </ScrollView>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n    display: \"flex\",\n  },\n  content: {\n    display: \"flex\",\n    flexGrow: 1,\n    alignItems: 'center',\n    paddingBottom: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlanesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // React.useEffect(() => {\n  //   if (route.name === \"PlanesScreen\") {\n  //     refetch();\n  //   }\n  // }, [route.name])\n \n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data?.planes || []}\n        numColumns={1}\n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <NoResults\n            title=\"No planes?\"\n            subtitle=\"You need to have at least one plane to manifest loads\"\n          />\n        }\n        renderItem={({ item }) =>\n          <List.Item\n            title={item.name}\n            onPress={() => navigation.navigate(\"UpdatePlaneScreen\", { plane: item })}\n            left={() => <List.Icon color=\"#000\" icon=\"airplane\" />}\n            right={() => <List.Icon color=\"#000\" icon=\"pencil\" />}\n          />\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreatePlaneScreen\")}\n        label=\"New plane\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_EXTRAS = gql`\n  query QueryExtras(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeForm() {\n  const state = useAppSelector(state => state.ticketTypeForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_EXTRAS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingTop: 200 }}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.value}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <Menu\n        onDismiss={() => setAltitudeMenuOpen(false)}\n        visible={altitudeMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setAltitudeMenuOpen(true);\n            }}\n            title={\n              [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"Height\",\n                  \"4000\": \"Hop n Pop\",\n                }[state.fields.altitude.value.toString()] :\n                \"Custom\"\n            }\n            right={ () =>\n              <List.Icon icon={[4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"airplane\",\n                  \"4000\": \"parachute\",\n                }[state.fields.altitude.value.toString()] as string :\n                \"pencil-plus\" \n              } />\n            }\n          />\n        }>\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 4000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Hop n Pop\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 14000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Height\"\n            right={() => <List.Icon icon=\"airplane-takeoff\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 7000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Other\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n      </Menu>\n\n      {\n        ![4000, 14000].includes(state.fields.altitude.value) && (\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Custom altitude\"\n            error={!!state.fields.altitude.value}\n            value={state.fields.altitude?.value?.toString()}\n            onChangeText={(newValue) => dispatch(actions.setField([\"altitude\", Number(newValue)]))}\n          />\n        )\n      }\n      <Checkbox.Item\n        label=\"Public manifesting\"\n        status={!!state.fields.allowManifestingSelf.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"allowManifestingSelf\", !state.fields.allowManifestingSelf.value]))\n        }\n      />\n\n      <Divider />\n      <List.Subheader>Enabled ticket add-ons</List.Subheader>\n      {\n        data?.extras.map((extra) =>\n          <Checkbox.Item\n            label={extra.name!}\n            status={state.fields.extraIds.value.includes(Number(extra.id))\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(actions.setField([\"extraIds\", xor(state.fields.extraIds.value, [Number(extra.id)])]))\n            }\n          />\n        )\n      }\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateTicketType, data] = useMutation<Mutation>(MUTATION_CREATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extraIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateTicketType({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extraIds.value,\n          }\n        });\n        \n        if (result.data?.createTicketType?.ticketType) {\n          const { ticketType } = result.data.createTicketType;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added ticket ${ticketType.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateTicketType]);\n\n  return (\n    <View style={styles.container}>\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation, TicketType } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { ticketType: TicketType }}>();\n  const ticketType = route.params!.ticketType;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(ticketType));\n  }, [ticketType?.id]);\n\n  const [mutationUpdateTicketType, data] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extraIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateTicketType({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extraIds.value,\n          }\n        });\n        \n        if (result.data?.updateTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateTicketType]);\n\n  return (\n    <View style={styles.container}>\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.extraForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingTop: 200 }}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.value}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <List.Subheader>\n        Compatible tickets\n      </List.Subheader>\n      {\n        data?.ticketTypes.map((ticket) =>\n          <Checkbox.Item\n            label={ticket.name!}\n            status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(actions.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n            }\n          />\n        )\n      }\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useNavigation } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_extra = gql`\n  mutation CreateExtra(\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    createExtra(input: {\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateExtra, data] = useMutation<Mutation>(MUTATION_CREATE_extra);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateExtra({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.createExtra?.extra) {\n          const { extra } = result.data.createExtra;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added extra ${extra.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateExtra]);\n\n  return (\n    <View style={styles.container}>\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation, Extra } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_EXTRA = gql`\n  mutation UpdateExtra(\n    $id: Int!,\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    updateExtra(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { extra: Extra }}>();\n  const extra = route.params!.extra;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(extra));\n  }, [extra?.id]);\n\n  const [mutationUpdateExtra, data] = useMutation<Mutation>(MUTATION_UPDATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateExtra({\n          variables: {\n            id: Number(state.original!.id!),\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.updateExtra?.extra) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateExtra]);\n\n  return (\n    <View style={styles.container}>\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport usePalette from '../../../hooks/usePalette';\nimport global from '../../../redux/global';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryExtra(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        altitude\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtrasScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // React.useEffect(() => {\n  //   if (route.name === \"PlanesScreen\") {\n  //     refetch();\n  //   }\n  // }, [route.name])\n \n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n    <View style={styles.container}>\n      <DataTable>\n        <DataTable.Header>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Cost</DataTable.Title>\n        </DataTable.Header>\n\n        { data?.extras?.map((extra) =>\n          <DataTable.Row>\n            <DataTable.Cell onPress={() => navigation.navigate(\"UpdateExtraScreen\", { extra })}>{extra.name}</DataTable.Cell>\n            <DataTable.Cell numeric>{extra.cost}</DataTable.Cell>\n          </DataTable.Row>\n        )}\n      </DataTable>\n      { !loading && !data?.extras?.length && (\n          <NoResults\n            title=\"No ticket addons\"\n            subtitle=\"You can add multiple addons to assign to tickets, e.g outside camera, or coach\"\n          />\n      )}\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateExtraScreen\")}\n        label=\"New ticket addon\"\n      />\n    </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport SettingsScreen from '../../screens/authenticated/settings/SettingsScreen';\nimport DropzoneSettingsScreen from '../../screens/authenticated/settings/DropzoneSettingsScreen';\nimport TicketTypeSettingsScreen from '../../screens/authenticated/ticket_types/TicketTypesScreen';\nimport CreatePlaneScreen from '../../screens/authenticated/planes/CreatePlaneScreen';\nimport UpdatePlaneScreen from '../../screens/authenticated/planes/UpdatePlaneScreen';\nimport UpdateDropzoneScreen from '../../screens/authenticated/dropzones/UpdateDropzoneScreen';\nimport PlanesScreen from '../../screens/authenticated/planes/PlanesScreen';\n\nimport CreateTicketTypeScreen from '../../screens/authenticated/ticket_types/CreateTicketTypeScreen';\nimport UpdateTicketTypeScreen from '../../screens/authenticated/ticket_types/UpdateTicketTypeScreen';\n\nimport CreateExtraScreen from '../../screens/authenticated/extras/CreateExtraScreen';\nimport UpdateExtraScreen from '../../screens/authenticated/extras/UpdateExtraScreen';\nimport ExtrasScreen from '../../screens/authenticated/extras/ExtrasScreen';\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  DropzoneSettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  CreateTicketTypeScreen: undefined;\n  UpdateTicketTypeScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"DropzoneSettingsScreen\" component={DropzoneSettingsScreen} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateTicketTypeScreen\" component={CreateTicketTypeScreen} options={{ title: \"New ticket type\" }} />\n      <Settings.Screen name=\"UpdateTicketTypeScreen\" component={UpdateTicketTypeScreen} options={{ title: \"Edit ticket type\" }}/>\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useNavigationState, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, ProgressBar } from 'react-native-paper';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport NoResults from '../../../components/NoResults';\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport { useAppDispatch, useAppSelector, usersActions } from '../../../redux';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function UsersScreen() {\n  const {global, usersScreen } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzone?.id),\n      search: usersScreen.searchText,\n    }\n  });\n\n  const navigation = useNavigation();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (usersScreen.isSearchVisible) {\n      dispatch(usersActions.setSearchVisible(false));\n    }\n  }, [isFocused]);\n\n  return (\n    <View style={styles.container}>\n      <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n      \n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n        <List.Item\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() => <List.Icon icon=\"account\" />}\n          onPress={() => navigation.navigate(\"UserProfileScreen\", { userId: edge?.node?.id })}\n        />\n      )}\n    </View>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import React from \"react\";\nimport { Appbar, List, TextInput } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql } from \"@apollo/client\";\nimport { useAppDispatch, useAppSelector } from \"../../../redux\";\nimport { StyleSheet, View } from \"react-native\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\n\n\n\ninterface ISearchableAppBar extends StackHeaderProps {\n  searchVisible: boolean;\n  searchText: string;\n  setSearchVisible(visible: boolean): void;\n  onSearch(text: string): void;\n}\n\n\nfunction AppBar({ navigation, previous, scene, onSearch, searchText, searchVisible, setSearchVisible }: ISearchableAppBar) {\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  return (\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      {searchVisible ? <Appbar.BackAction onPress={() => setSearchVisible(false)} /> : null}\n      {searchVisible\n        ? <View style={styles.inputContainer}>\n            <TextInput\n              style={styles.input}\n              value={searchText}\n              onChangeText={(text) => onSearch(text)}\n            />\n          </View>\n        : <Appbar.Content title={scene.descriptor.options.title} />\n      }\n      <MaterialIcons\n        name=\"search\"\n        onPress={() => setSearchVisible(!searchVisible)}\n        color=\"#FFFFFF\"\n        size={24}\n        style={styles.icon}\n      />\n    </Appbar.Header>\n  );\n}\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    flexGrow: 1\n  },\n  input: {\n    backgroundColor: \"transparent\",\n    height: \"100%\",\n    color: \"white\",\n    borderColor: \"none\"\n  },\n  icon: {\n    marginHorizontal: 8\n  },\n})\n\nexport default AppBar;","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function UserRigScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/UserRigScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport UsersScreen from '../../screens/authenticated/users/UsersScreen';\nimport SearchableAppBar from '../../screens/authenticated/users/AppBar';\nimport UserProfileScreen from '../../screens/authenticated/profile/UserProfileScreen';\nimport UserRigScreen from '../../screens/authenticated/rig/UserRigScreen';\nimport { useAppDispatch, useAppSelector, usersActions } from '../../redux';\nimport ProfileScreen from '../../screens/authenticated/profile/ProfileScreen';\n\nexport type ISettingsTabParams = {\n  UsersScreen: undefined;\n  UserRigScreen: undefined;\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.usersScreen);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(usersActions.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(usersActions.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"UserRigScreen\" component={UserRigScreen} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport * as React from 'react';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport PackingTab from \"./tabs/packing\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport useRestriction from '../hooks/useRestriction';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Settings: undefined;\n}\n\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\nconst BottomTab = createMaterialBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(\"readUser\");\n  const canCreatePacks = useRestriction(\"createPackjob\");\n  const canManageDropzone = useRestriction(\"updateDropzone\");\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: \"airplane\"\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: \"account-circle\"\n        }}\n      />\n      { false && canCreatePacks && (\n        <BottomTab.Screen\n          name=\"Packing\"\n          component={PackingTab}\n          options={{\n            tabBarIcon: \"parachute\"\n          }}\n        />\n      )}\n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: \"account-group\"\n          }}\n        />\n      )}\n      \n      { canManageDropzone && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: \"account-cog\"\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { globalActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation } from '@react-navigation/core';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) =>\n          <Card\n            style={{\n              width: (Dimensions.get(\"window\").width / 2) - 32,\n              margin: 8\n            }}\n            onPress={async ()=> {\n              if (item?.node) {\n                dispatch(\n                  globalActions.setDropzone(item.node)\n                );\n              }\n            }}\n          >\n            <Card.Cover source={{ uri: item?.node?.banner as string }} />\n            <Card.Content>\n              <Title>{item?.node?.name}</Title>\n            </Card.Content>\n          </Card>\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(snackbarActions.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(globalActions.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <View style={styles.container}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from '../../../components/notifications';\nimport { useAppSelector, useAppDispatch, globalActions, snackbarActions } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Mutation } from '../../../graphql/schema';\n\nconst { actions } = slice;\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              globalActions.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              globalActions.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(snackbarActions.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign in</Text>\n\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button style={styles.button} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 10,\n  },\n  button: {\n    marginTop: 10,\n    width: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"./slice\";\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.signup);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          globalActions.setCredentials(payload.credentials)\n        );\n        dispatch(\n          globalActions.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign up</Text>\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", parseFloat(newValue)]))}\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          onPress={() =>\n            onSignUp({\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Notifications from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\n\n\n\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  return (\n    <Apollo>\n      <MaterialProvider theme={state.theme}>\n        <SafeAreaProvider>\n          <NavigationContainer\n            linking={LinkingConfiguration}\n            theme={state.theme}>\n            <RootNavigator />\n          </NavigationContainer>\n\n          <StatusBar />\n          <Notifications />\n        </SafeAreaProvider>\n    </MaterialProvider>\n    </Apollo>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}