{"version":3,"sources":["components/ScrollableScreen.tsx","DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","components/DatePicker.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/RigDialog.tsx","components/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","screens/authenticated/profile/ProfileScreen.tsx"],"names":["ScrollableScreen","props","height","useWindowDimensions","theme","useAppSelector","state","global","style","styles","container","backgroundColor","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","DataTableCell","rest","numeric","numberOfLines","flexDirection","right","justifyContent","DataTableHeader","borderBottomColor","color","header","borderBottomWidth","withTheme","DataTableTitle","spinAnim","React","Animated","sortDirection","current","toValue","duration","useNativeDriver","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","size","direction","I18nManager","disabled","onPress","alignContent","paddingVertical","cell","lineHeight","fontSize","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","paddingLeft","label","marginRight","borderStyle","minHeight","pointerEvents","DataTable","width","DatePicker","open","setOpen","date","onChange","getTime","onDismiss","visible","anchor","Item","title","description","timestamp","format","left","Icon","selectedDays","Date","onDayClick","actions","slice","RigForm","rigForm","dispatch","useAppDispatch","TextInput","field","mode","error","fields","make","value","onChangeText","newValue","setField","HelperText","type","model","serial","canopySize","toString","keyboardType","Number","repackExpiresAt","time","marginBottom","MUTATION_CREATE_RIG","gql","MUTATION_UPDATE_RIG","RigDialog","globalState","useMutation","mutationCreateRig","createData","mutationUpdateRig","updateData","validate","useCallback","hasErrors","setFieldError","JSON","stringify","onSave","a","async","mutation","original","id","variables","userId","dropzoneId","response","result","data","updateRig","createRig","fieldErrors","map","message","errors","length","snackbarActions","showSnackbar","variant","onSuccess","Portal","Dialog","ProgressBar","indeterminate","loading","accent","Title","Content","Actions","Button","reset","onClose","QUERY_ROLES","RoleSelect","useState","isMenuOpen","setMenuOpen","useQuery","currentDropzone","refetch","Subheader","Menu","undefined","required","dropzone","roles","role","onSelect","DropzoneUserForm","dropzoneUserForm","canUpdateRole","useRestriction","newRole","expiresAt","credits","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","dropzoneUserId","QUERY_DROPZONE_USER","ProfileScreen","navigation","useNavigation","rigDialogOpen","setRigDialogOpen","dropzoneUserDialogOpen","setDropzoneUserDialogOpen","route","useRoute","isSelf","currentUser","params","canInspectRigs","getRigPressAction","rig","navigate","setOriginal","Card","elevation","card","dropzoneUser","user","email","phone","license","exitWeight","Header","rigs","Row","Cell","join","globalActions","logout","margin","display","spacer","fab","position","bottom","separator","marginVertical"],"mappings":"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","file":"static/js/8.fb36e59b.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function RigForm() {\n  const state = useAppSelector(state => state.rigForm);\n  const dispatch = useAppDispatch();\n  const [isDatePickerOpen, setDatePickerOpen] = React.useState(false);\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport { result } from \"lodash\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { rigForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.rigForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"repackExpiresAt\", \"Required\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(rigForm.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(rigForm.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(rigForm.setFieldError([\"serial\", message]));\n          case \"canopySize\":\n            return dispatch(rigForm.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(rigForm.setFieldError([\"repackExpiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading || updateData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <RigForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(rigForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Query, UserRole } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport RoleSelect from '../../RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function DropzoneUserForm() {\n  const { dropzoneUserForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermission\");\n\n  return ( \n    <>\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Credits\"\n        error={!!state.fields.credits.error}\n        value={state.fields.credits.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"credits\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.credits.error ? \"error\" : \"info\"}>\n        { state.fields.credits.error || `Current balance: $${state.original?.credits || 0}` }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { dropzoneUserForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $credits: Float,\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          credits: $credits,\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.dropzoneUserForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.credits.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"credits\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          credits: state.fields.credits.value,\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(dropzoneUserForm.setFieldError([\"role\", message]));\n          case \"credits\":\n            return dispatch(dropzoneUserForm.setFieldError([\"credits\", message]));\n          case \"expires_at\":\n            return dispatch(dropzoneUserForm.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} dropzone user`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(dropzoneUserForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, FAB, List, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport RigDialog from '../../../components/dialogs/RigDialog';\nimport { dropzoneUserForm, globalActions, rigForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Query } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\nimport useRestriction from '../../../hooks/useRestriction';\n\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const [rigDialogOpen, setRigDialogOpen] = React.useState(false);\n  const [dropzoneUserDialogOpen, setDropzoneUserDialogOpen] = React.useState(false);\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = state.currentDropzone?.currentUser?.id === route.params.userId;\n\n  const canInspectRigs = useRestriction(\"actAsRigInspector\");\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      dropzoneUserId: Number(route.params.userId)\n    }\n  });\n\n  const getRigPressAction = React.useCallback((rig) => {\n    return () => {\n      if (!isSelf) {\n        dispatch(rigForm.setOriginal(rig));\n        setRigDialogOpen(true);\n      } else if (canInspectRigs) {\n        navigation.navigate(\"RigInspectionScreen\", {\n          dropzoneUserId: Number(route.params.userId),\n          rig\n        });\n      }\n    }\n  }, [dispatch, setRigDialogOpen]);\n\n  return (\n    <>\n    <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      \n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Basic information\" />\n          <Card.Content>\n            <List.Item\n              title=\"Name\"\n              left={() => <List.Icon icon=\"account-outline\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.name  || \"-\"}\n            />\n            <List.Item\n              title=\"Email\"\n              left={() => <List.Icon icon=\"at\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.email  || \"-\"}\n            />\n\n            <List.Item\n              title=\"Phone\"\n              left={() => <List.Icon icon=\"phone\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.phone  || \"-\"}\n            />\n\n            <List.Item\n              title=\"License\"\n              left={() => <List.Icon icon=\"ticket-account\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.license?.name || \"-\"}\n            />\n\n            <List.Item\n              title=\"Exit weight\"\n              left={() => <List.Icon icon=\"scale\" />}\n              description={data?.dropzone?.dropzoneUser?.user?.exitWeight  || \"-\"}\n            />\n          </Card.Content>\n          {\n            isSelf && (\n              <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n                <Button\n                  icon=\"pencil\"\n                  onPress={() =>\n                    navigation.navigate(\"UpdateUserScreen\", { user: state.currentDropzone?.currentUser?.user })\n                  }\n                >\n                  Edit\n                </Button>\n              </Card.Actions>\n            )}\n        </Card>\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title={state.currentDropzone?.name} />\n          <Card.Content>\n            <List.Item\n              title=\"Role\"\n              description={data?.dropzone?.dropzoneUser?.role?.name}\n              left={() => <List.Icon icon=\"lock\" />}\n            />\n            <List.Item\n              title=\"Credits\"\n              description={data?.dropzone?.dropzoneUser?.credits}\n              left={() => <List.Icon icon=\"cash-multiple\" />}\n            />\n            <List.Item\n              title=\"Membership\"\n              description={\n                !data?.dropzone?.dropzoneUser?.expiresAt ?\n                  <span>Not a member</span>\n                : format((data?.dropzone?.dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")\n              }\n              left={() =>\n                <List.Icon\n                  icon=\"card-account-details\"\n                  color={\n                    data?.dropzone?.dropzoneUser?.expiresAt && (\n                      data?.dropzone?.dropzoneUser?.expiresAt * 1000 > new Date().getTime()\n                    ) ? undefined : \"#B00020\"}\n                />\n              }\n\n            />\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n            <Button\n              icon=\"pencil\"\n              onPress={() => {\n                dispatch(dropzoneUserForm.setOriginal(data?.dropzone?.dropzoneUser!));\n                setDropzoneUserDialogOpen(true);\n              }}\n            >\n              Edit\n            </Button>\n          </Card.Actions>\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Rigs\" />\n          <Card.Content>\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>\n                  Container\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Repack due\n                </DataTable.Title>\n                <DataTable.Title numeric>\n                  Canopy size\n                </DataTable.Title>\n              </DataTable.Header>\n\n              {\n                data?.dropzone?.dropzoneUser?.user?.rigs?.map((rig) =>\n                  <DataTable.Row onPress={getRigPressAction(rig)} pointerEvents=\"none\">\n                    <DataTable.Cell>\n                      {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      {`${rig?.canopySize}`}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                )\n              }\n            </DataTable>\n          </Card.Content>\n          {\n            isSelf && (\n            <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n              <Button onPress={() => setRigDialogOpen(true)}>\n                Add rig\n              </Button>\n            </Card.Actions>\n          )}\n        </Card>\n\n        { data?.dropzone?.dropzoneUser?.id === state.currentUser?.id && (\n          <Button color=\"#B00020\" onPress={() => dispatch(globalActions.logout())}>\n            Log out\n          </Button>\n        )}\n      \n      </ScrollableScreen>\n      \n      <RigDialog\n        onClose={() => setRigDialogOpen(false)}\n        onSuccess={() => setRigDialogOpen(false)}\n        userId={Number(data?.dropzone?.dropzoneUser?.user?.id)}\n        open={rigDialogOpen}\n      />\n      \n      <DropzoneUserDialog\n        onClose={() => setDropzoneUserDialogOpen(false)}\n        onSuccess={() => setDropzoneUserDialogOpen(false)}\n        open={dropzoneUserDialogOpen}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    alignItems: 'center',\n    flexGrow: 1,\n    paddingBottom: 56\n  },\n  card: {\n    margin: 8,\n    width: \"100%\",\n  },\n  fields: {\n    width: \"80%\",\n    display: \"flex\",\n  },\n  spacer: {\n    width: \"100%\",\n    height: 32,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"sourceRoot":""}