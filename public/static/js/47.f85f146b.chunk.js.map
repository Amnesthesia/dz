{"version":3,"sources":["screens/authenticated/ticket_types/UpdateTicketTypeScreen.tsx"],"names":["actions","slice","MUTATION_UPDATE_TICKET_TYPE","globalSlice","gql","UpdateTicketTypeScreen","useAppSelector","state","ticketTypeForm","dispatch","global","useAppDispatch","navigation","useNavigation","ticketType","useRoute","params","React","setOriginal","id","useMutation","mutationUpdateTicketType","data","validate","hasError","fields","name","value","length","setFieldError","cost","altitude","JSON","stringify","onSave","a","async","allowManifestingSelf","extras","isTandem","variables","Number","original","extraIds","map","result","updateTicketType","fieldErrors","field","message","errors","snackbarActions","showSnackbar","variant","snackbar","goBack","contentContainerStyle","paddingHorizontal","size","color","style","alignSelf","styles","mode","disabled","loading","onPress","StyleSheet","create","container","flex","alignItems","title","fontSize","fontWeight","separator","marginVertical","height","width","marginBottom"],"mappings":"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","file":"static/js/47.f85f146b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation, TicketType } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { ticketType: TicketType }}>();\n  const ticketType = route.params!.ticketType;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(ticketType));\n  }, [ticketType?.id]);\n\n  const [mutationUpdateTicketType, data] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateTicketType({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n\n\n        result?.data?.updateTicketType?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"altitude\":\n              return dispatch(actions.setFieldError([\"altitude\", message]));\n            case \"cost\":\n              return dispatch(actions.setFieldError([\"cost\", message]));\n            case \"allow_manifesting_self\":\n              return dispatch(actions.setFieldError([\"allowManifestingSelf\", message]));\n            case \"extras\":\n              return dispatch(actions.setFieldError([\"extras\", message]));\n          }\n        });\n\n        if (result?.data?.updateTicketType?.errors?.length) {\n          return dispatch(\n            snackbarActions.showSnackbar({\n              message: result?.data?.updateTicketType?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (result.data?.updateTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateTicketType]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginVertical: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}