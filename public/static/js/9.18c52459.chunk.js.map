{"version":3,"sources":["components/DatePicker.web.tsx","components/forms/rig_inspection_template/RigInspectionItem.tsx","components/forms/rig_inspection_template/RigInspectionTemplateForm.tsx","screens/authenticated/settings/RigInspectionTemplateScreen.tsx"],"names":["DatePicker","props","React","open","setOpen","date","onChange","getTime","onDismiss","visible","anchor","Item","onPress","disabled","title","label","description","timestamp","format","left","Icon","icon","selectedDays","Date","onDayClick","RigInspectionItem","canInspect","useRestriction","config","valueType","style","flex","mode","marginVertical","value","onChangeText","text","type","right","Android","status","keyboardType","Number","time","toString","RigForm","state","useAppSelector","rigInspectionTemplate","newItem","setNewItem","fabOpen","setFabOpen","dispatch","useAppDispatch","fields","map","item","index","View","display","flexDirection","alignItems","flexGrow","onTouchEnd","IconButton","rigInspectionTemplateForm","setFields","filter","_","i","Divider","Portal","Dialog","Title","Content","TextInput","placeholder","Checkbox","isRequired","Actions","Button","undefined","field","idx","FAB","Group","actions","onStateChange","StyleSheet","create","marginBottom","QUERY_RIG_INSPECTION","gql","MUTATION_UPDATE_FORM","RigInspectionTemplateScreen","globalState","global","useQuery","variables","dropzoneId","currentDropzone","id","data","canEdit","loading","useMutation","mutationUpdateForm","mutation","dropzone","setOriginal","JSON","stringify","updateForm","a","async","formId","definition","snackbarActions","showSnackbar","message","variant","original","ScrollableScreen","Card","width"],"mappings":"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","file":"static/js/9.18c52459.chunk.js","sourcesContent":["import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import React from \"react\";\nimport { View } from \"react-native\";\nimport { Checkbox, HelperText, List, TextInput } from \"react-native-paper\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport DatePicker from '../../DatePicker';\nimport { FieldItem } from \"./slice\";\n\ninterface IFormItemItem {\n  value: string | number | boolean;\n  onChange(value: FieldItem): void;\n  config: FieldItem;\n}\n\nexport default function RigInspectionItem(props: IFormItemItem) {\n  const canInspect = useRestriction(\"actAsRigInspector\");\n\n  if (props.config?.valueType && props.config?.valueType === \"string\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          mode=\"outlined\"\n          disabled={!canInspect}\n          style={{ marginVertical: 8 }}\n          value={props.value as string}\n          onChangeText={(text) => props.onChange({ ...props.config, value: text})}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"boolean\") {\n    return (\n      <List.Item\n        title={props.config.label || \"\"}\n        disabled={!canInspect}\n        description={props.config.description}\n        style={{ marginVertical: 8 }}\n        right={() =>\n          <Checkbox.Android\n            status={\n              !!props.value\n                ? \"checked\"\n                : \"unchecked\"\n            }\n          />\n        }\n        onPress={\n          () => props.onChange({ ...props.config, value: !props.value as boolean})\n        }\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"integer\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          disabled={!canInspect}\n          value={props.value as string}\n          mode=\"outlined\"\n          onChangeText={(text) => props.onChange({ ...props.config, value: text as string })}\n          label={props.config.label || \"\"}\n          keyboardType=\"number-pad\"\n          style={{ marginVertical: 8 }}\n\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"date\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <DatePicker\n          disabled={!canInspect}\n          timestamp={Number(props.value)}\n          onChange={(time) => props.onChange({ ...props.config, value: time.toString() as string })}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  }\n  \n  return null;\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { useAppSelector, useAppDispatch, rigInspectionTemplateForm } from '../../../redux';\n\nimport { FieldItem } from \"./slice\";\nimport RigInspectionItem from './RigInspectionItem';\nimport { Button, Checkbox, Dialog, Divider, FAB, IconButton, Portal, TextInput } from 'react-native-paper';\n\n\n\n\nexport default function RigForm() {\n  const { rigInspectionTemplate: state } = useAppSelector(state => state);\n  const [newItem, setNewItem] = React.useState<Partial<FieldItem> & { index?: number } | null>(null);\n  const [fabOpen, setFabOpen] = React.useState(false);\n\n  const dispatch = useAppDispatch();\n  \n\n  return ( \n    <>\n      {\n        state.fields?.map((item, index) => {\n          return (\n            <>\n              <View style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\"}}>\n                <View style={{ flexGrow: 1 }} onTouchEnd={() => setNewItem({ ...item, index })}>\n                  <RigInspectionItem\n                    config={item}\n                    value={item?.value || \"\"}\n                    onChange={() =>\n                      null\n                    }\n                  />\n                </View>\n                <IconButton icon=\"delete\" onPress={() => dispatch(rigInspectionTemplateForm.setFields(state.fields.filter((_, i) => i !== index)))} />\n              </View>\n              <Divider />\n            </>\n          )\n        })\n      }\n      <Portal>\n        <Dialog visible={!!newItem}>\n          <Dialog.Title>New field</Dialog.Title>\n          <Dialog.Content>\n            <TextInput\n              label=\"Name\"\n              mode=\"outlined\"\n              value={newItem?.label}\n              onChangeText={(text) => setNewItem({ ...newItem, label: text })}\n            />\n\n            <TextInput\n              label=\"Description\"\n              placeholder=\"optional\"\n              mode=\"outlined\"\n              value={newItem?.description}\n              onChangeText={(text) => setNewItem({ ...newItem, description: text })}\n            />\n\n            <Checkbox.Item\n              label=\"This is a required field\"\n              mode=\"android\"\n              onPress={() => setNewItem({ ...newItem, isRequired: !newItem?.isRequired })}\n              status={newItem?.isRequired ? \"checked\" : \"unchecked\"}\n            />\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={() => setNewItem(null)}>\n              Cancel\n            </Button>\n            <Button\n              onPress={() => {\n                if (newItem?.index !== undefined) {\n                  // If index was provided, replace existing field at that index\n                  dispatch(rigInspectionTemplateForm.setFields(state.fields.map((field, idx) => idx === newItem.index ? newItem : field) as FieldItem[]));\n                } else {\n                  dispatch(rigInspectionTemplateForm.setFields([...state.fields, newItem as FieldItem]));\n                }\n                setNewItem(null);\n              }}\n            >\n              Save\n            </Button>\n          </Dialog.Actions>\n        </Dialog>\n        <FAB.Group\n          open={fabOpen}\n          visible\n          icon={fabOpen ? 'close' : 'plus'}\n          actions={[\n            { icon: 'pencil', label: \"Text\", onPress: () => setNewItem({ valueType: \"string\" }), },\n            {\n              icon: 'calendar',\n              label: 'Date',\n              onPress: () => setNewItem({ valueType: \"date\" }),\n            },\n            {\n              icon: 'counter',\n              label: 'Number',\n              onPress: () => setNewItem({ valueType: \"integer\" }),\n            },\n            {\n              icon: 'checkbox-marked-circle-outline',\n              label: 'Checkbox',\n              onPress: () => setNewItem({ valueType: \"boolean\" }),\n            },\n          ]}\n          onStateChange={({ open }) => setFabOpen(open)}\n        />\n      </Portal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useRoute } from '@react-navigation/core';\nimport { format } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Button, Card, List } from 'react-native-paper';\nimport RigInspectionTemplateForm from \"../../../components/forms/rig_inspection_template/RigInspectionTemplateForm\";\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { DropzoneUser, Mutation, Query, Rig } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { rigInspectionForm, rigInspectionTemplateForm, snackbarActions, useAppDispatch, useAppSelector } from '../../../redux';\n\nconst QUERY_RIG_INSPECTION = gql`\n  query RigInspection($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      rigInspectionTemplate {\n        id\n        name\n        definition\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_FORM = gql`\n  mutation UpdateRigInspectionTemplate(\n    $dropzoneId: Int,\n    $formId: Int,\n    $definition: String\n  ) {\n    updateFormTemplate(input: {\n      id: $formId\n      attributes: {\n        dropzoneId: $dropzoneId,\n        definition: $definition\n      }\n    }) {\n      formTemplate {\n        id\n        name\n        definition\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\n\n\nexport default function RigInspectionTemplateScreen() {\n  const { global: globalState, rigInspectionTemplate } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTION, {\n    variables: {\n      dropzoneId: Number(globalState?.currentDropzone?.id)\n    }\n  });\n\n  const canEdit = useRestriction(\"updateFormTemplate\");\n  const [mutationUpdateForm, mutation] = useMutation<Mutation>(MUTATION_UPDATE_FORM);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.rigInspectionTemplate) {\n      \n      dispatch(\n        rigInspectionTemplateForm.setOriginal(\n          data.dropzone.rigInspectionTemplate\n        )\n      )\n    }\n  }, [JSON.stringify(data?.dropzone?.rigInspectionTemplate)]);\n\n  const updateForm = React.useCallback(async () => {\n    try {\n      await mutationUpdateForm({\n          variables: {\n            formId: Number(data?.dropzone.rigInspectionTemplate!.id),\n            dropzoneId: Number(data?.dropzone?.id),\n            definition: JSON.stringify(rigInspectionTemplate.fields),\n        }\n      });\n      dispatch(snackbarActions.showSnackbar({ message: \"Template saved\", variant: \"success\" }));\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    }\n  }, [JSON.stringify(rigInspectionTemplate.fields), rigInspectionTemplate?.original?.id, globalState?.currentDropzone?.id]);\n\n  return (\n    <ScrollableScreen>\n\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Rig Inspection Form Template\" />\n\n        <Card.Content>\n          <RigInspectionTemplateForm />\n        </Card.Content>\n\n        <Card.Actions>\n          <Button\n            disabled={!canEdit}\n            mode=\"contained\"\n            loading={mutation.loading}\n            onPress={() => updateForm()}\n            style={{ width: \"100%\"}}\n          >\n            Save template\n          </Button>\n        </Card.Actions>\n      </Card>\n    </ScrollableScreen>\n  );\n}\n\n"],"sourceRoot":""}