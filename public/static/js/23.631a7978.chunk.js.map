{"version":3,"sources":["components/notifications/index.ts","screens/authenticated/dropzones/UpdateDropzoneScreen.tsx"],"names":["actions","slice","Notifications","globalActions","globalSlice","QUERY_DROPZONE_DETAILS","gql","MUTATION_UPDATE_DROPZONE","UpdateDropzoneScreen","state","useAppSelector","dropzoneForm","globalState","global","dispatch","useAppDispatch","dropzone","useRoute","params","navigation","useNavigation","useQuery","variables","dropzoneId","Number","id","data","loading","React","setOriginal","useMutation","mutationUpdateDropzone","mutation","onSave","a","async","hasError","fields","name","banner","federation","primaryColor","secondaryColor","isCreditSystemEnabled","isPublic","value","length","setFieldError","federationId","result","updateDropzone","fieldErrors","map","field","message","errors","snackbarActions","showSnackbar","variant","setDropzone","currentDropzone","snackbar","goBack","JSON","stringify","indeterminate","color","theme","colors","accent","visible","contentContainerStyle","styles","content","style","mode","disabled","onPress","StyleSheet","create","container","flex","backgroundColor","display","flexGrow","alignItems","padding","title","fontSize","fontWeight","separator","marginVertical","height","width","marginBottom"],"mappings":"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","file":"static/js/23.631a7978.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, ProgressBar } from 'react-native-paper';\nimport { gql, useMutation, useQuery } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Dropzone, Mutation, Query } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\nconst QUERY_DROPZONE_DETAILS = gql`\n  query QueryDropzoneDetails($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateDropzoneScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const route = useRoute<{ key: string, name: string, params: { dropzone: Dropzone }}>();\n  const dropzone = route.params!.dropzone;\n  const navigation = useNavigation();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_DETAILS, {\n    variables: { dropzoneId: Number(dropzone.id)}\n  });\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(actions.setOriginal(data.dropzone));\n    }\n  }, [data?.dropzone?.id]);\n\n  const [mutationUpdateDropzone, mutation] = useMutation<Mutation>(MUTATION_UPDATE_DROPZONE);\n\n  const onSave = React.useCallback(async () => {\n    let hasError = false;\n    const { name, banner, federation, primaryColor, secondaryColor, isCreditSystemEnabled, isPublic } = state.fields;\n\n    if (!name.value?.length || name.value?.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (!hasError) {\n      try {\n        const result = await mutationUpdateDropzone({\n          variables: {\n            id: Number(dropzone?.id),\n            name: name.value,\n            banner: banner.value || null,\n            primaryColor: primaryColor.value,\n            secondaryColor: secondaryColor.value,\n            federationId: Number(federation?.value?.id),\n            isCreditSystemEnabled: !!isCreditSystemEnabled,\n            isPublic: !!isPublic\n          }\n        });\n\n        result?.data?.updateDropzone?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"federation\":\n            case \"federation_id\":\n              return dispatch(actions.setFieldError([\"federation\", message]));\n            case \"banner\":\n              return dispatch(actions.setFieldError([\"banner\", message]));\n            case \"primary_color\":\n              return dispatch(actions.setFieldError([\"primaryColor\", message]));\n            case \"secondary_color\":\n              return dispatch(actions.setFieldError([\"secondaryColor\", message]));\n            case \"is_credit_system_enabled\":\n              return dispatch(actions.setFieldError([\"isCreditSystemEnabled\", message]));\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"is_public\":\n              return dispatch(actions.setFieldError([\"isPublic\", message]));\n          }\n        });\n        if (result?.data?.updateDropzone?.errors?.length) {\n          return dispatch(snackbarActions.showSnackbar({\n            message: result?.data?.updateDropzone?.errors[0],\n            variant: \"error\"\n          }));\n        } else if (!result?.data?.updateDropzone?.fieldErrors?.length) {\n          // No errors:\n          if (result.data?.updateDropzone?.dropzone) {\n            dispatch(\n              globalActions.setDropzone({\n                ...(globalState.currentDropzone || {}),\n                ...result?.data?.updateDropzone?.dropzone,\n              })\n            );\n            dispatch(\n              snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n            );\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateDropzone]);\n\n  return (\n    <>\n    <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      <DropzoneForm />\n      <View style={styles.fields}>\n        <Button mode=\"contained\" disabled={mutation.loading} onPress={onSave} loading={mutation.loading}>\n          Save\n        </Button>\n      </View>\n    </ScrollableScreen>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n    display: \"flex\",\n  },\n  content: {\n    display: \"flex\",\n    flexGrow: 1,\n    alignItems: 'center',\n    padding: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}