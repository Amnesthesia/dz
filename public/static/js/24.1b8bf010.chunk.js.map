{"version":3,"sources":["components/notifications/index.ts","components/LicenseSelect.tsx","components/FederationSelect.tsx","components/forms/user/UserForm.tsx","screens/authenticated/profile/UpdateUserScreen.tsx"],"names":["actions","slice","Notifications","QUERY_LICENSES","gql","LicenseSelect","props","useState","isMenuOpen","setMenuOpen","useAppSelector","state","global","useQuery","variables","federationId","data","loading","refetch","Subheader","Menu","onDismiss","visible","anchor","Item","onPress","title","value","name","description","required","licenses","map","license","key","id","onSelect","QUERY_FEDERATIONS","FederationSelect","useEffect","federations","length","JSON","stringify","federation","SlotForm","userForm","dispatch","useAppDispatch","globalState","React","original","fields","exitWeight","setField","rigs","currentUser","TextInput","style","styles","field","mode","label","error","toString","onChangeText","newValue","HelperText","type","email","phone","keyboardType","right","Affix","text","Divider","View","width","setFederation","Number","StyleSheet","create","flex","paddingTop","marginBottom","ticketAddons","MUTATION_CREATE_USER","globalSlice","UpdateUserScreen","navigation","useNavigation","user","useRoute","params","setOriginal","useMutation","mutationUpdateUser","validate","hasError","emailRegex","RegExp","setFieldError","test","onSave","a","async","licenseId","parseFloat","result","updateUser","fieldErrors","errors","message","snackbar","showSnackbar","variant","goBack","reset","ScrollableScreen","contentContainerStyle","paddingHorizontal","Button","disabled","container","alignItems","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/24.1b8bf010.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { License, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseSelect(props: ILicenseSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      License\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select a license\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.licenses?.map((license) => \n          <Menu.Item\n            key={`license-select-${license.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(license);\n            }}\n            title={\n              license.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Federation, Query } from \"../graphql/schema\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select federation\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.federations?.map((federation) => \n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n            key={`federation-select-${federation.id}`}\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport LicenseSelect from '../../LicenseSelect';\nimport FederationSelect from '../../FederationSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.userForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.original?.id === globalState.currentUser?.id;  \n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      <View style={{ width: \"100%\"}}>\n        <FederationSelect\n          value={state?.fields?.license?.value?.federation || state.federation.value}\n          onSelect={(value) => dispatch(actions.setFederation(value))}\n          required\n        />\n\n        <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n          { state.federation.error || \"\" }\n        </HelperText>\n\n        { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n          <>\n            <LicenseSelect\n              value={state.fields.license.value}\n              federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n              onSelect={(value) => dispatch(actions.setField([\"license\", value]))}\n              required\n            />\n            <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n              { state.fields.license.error || \"\" }\n            </HelperText>\n          </>\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, userForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/user/slice\";\nimport { Mutation, User } from '../../../graphql/schema';\nimport UserForm from '../../../components/forms/user/UserForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        phone: $phone,\n        email: $email,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateUserScreen() {\n  const { userForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { user: User }}>();\n  const user = route.params!.user;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(user));\n  }, [user?.id]);\n\n  const [mutationUpdateUser, data] = useMutation<Mutation>(MUTATION_CREATE_USER);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            licenseId: !license.value?.id ? null : Number(license.value!.id),\n            phone: phone.value,\n            exitWeight: parseFloat(exitWeight.value!),\n            email: email.value,\n          }\n        });\n        \n        if (result.data?.updateUser?.user) {\n          const { fieldErrors, errors } = result.data.updateUser;\n\n          if (fieldErrors) {\n            fieldErrors?.map(({ field, message }) => {\n              switch (field) {\n                case \"name\":\n                  return dispatch(userForm.setFieldError([\"name\", message]));\n                case \"exit_weight\":\n                  return dispatch(userForm.setFieldError([\"exitWeight\", message]));\n                case \"license_id\":\n                  return dispatch(userForm.setFieldError([\"license\", message]));\n                case \"phone\":\n                  return dispatch(userForm.setFieldError([\"phone\", message]));\n                case \"email\":\n                  return dispatch(userForm.setFieldError([\"email\", message]));\n              }\n            });\n          } else if (errors?.length) {\n            errors.map((message) =>\n              dispatch(\n                snackbar.showSnackbar({ message: message, variant: \"error\" })\n              )\n            );\n          } else {\n            dispatch(\n              snackbar.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n            );\n            navigation.goBack();\n            dispatch(userForm.reset());\n          }\n\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <UserForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}