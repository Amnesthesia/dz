{"version":3,"sources":["components/DatePicker.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/RigDialog.tsx","components/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","components/forms/credits/CreditsForm.tsx","components/dialogs/CreditsDialog.tsx","screens/authenticated/profile/UserInfo/TableCard.tsx","screens/authenticated/profile/UserInfo/Header.tsx","screens/authenticated/profile/UserInfo/InfoGrid.tsx","screens/authenticated/profile/ProfileScreen.tsx"],"names":["DatePicker","props","React","open","setOpen","date","onChange","getTime","onDismiss","visible","anchor","Item","onPress","disabled","title","label","description","timestamp","format","left","Icon","icon","selectedDays","Date","onDayClick","actions","slice","RigForm","state","useAppSelector","rigForm","dispatch","useAppDispatch","View","TextInput","style","styles","field","mode","error","fields","make","value","onChangeText","newValue","setField","HelperText","type","model","serial","canopySize","toString","keyboardType","Number","repackExpiresAt","time","StyleSheet","create","flex","marginBottom","MUTATION_CREATE_RIG","gql","MUTATION_UPDATE_RIG","RigDialog","globalState","global","useMutation","mutationCreateRig","createData","mutationUpdateRig","updateData","validate","useCallback","hasErrors","setFieldError","JSON","stringify","onSave","a","async","mutation","original","id","variables","userId","dropzoneId","response","result","data","updateRig","createRig","fieldErrors","map","message","errors","length","snackbarActions","showSnackbar","variant","onSuccess","Portal","Dialog","dismissable","ProgressBar","indeterminate","loading","color","theme","colors","accent","Title","Content","pointerEvents","Actions","justifyContent","Button","reset","onClose","QUERY_ROLES","RoleSelect","useState","isMenuOpen","setMenuOpen","useQuery","currentDropzone","refetch","Subheader","paddingLeft","Menu","undefined","name","required","dropzone","roles","role","onSelect","DropzoneUserForm","dropzoneUserForm","canUpdateRole","useRestriction","newRole","expiresAt","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","dropzoneUserId","updateDropzoneUser","CreditsForm","creditsForm","currentCredits","credits","amount","subtotal","status","defaultIndex","onChangeIndex","newIndex","paddingTop","Divider","DataTable","Row","Cell","numeric","Text","fontWeight","MUTATION_CREATE_TRANSACTION","mutationCreateTransaction","TableCard","children","buttonIcon","onPressButton","card","container","IconButton","primary","flexDirection","flexGrow","marginVertical","width","UserHeader","dropzoneUser","onEdit","canEdit","onPressAvatar","backgroundColor","size","surface","avatarContainer","TouchableRipple","user","image","Image","source","uri","titleContainer","Paragraph","paragraph","alignItems","paddingHorizontal","InfoGrid","items","divider","item","i","key","titleStyle","bold","descriptionStyle","verticalDivider","height","hairlineWidth","textAlign","QUERY_DROPZONE_USER","MUTATION_UPDATE_IMAGE","ProfileScreen","navigation","useNavigation","creditsDialogOpen","setCreditsDialogOpen","rigDialogOpen","setRigDialogOpen","dropzoneUserDialogOpen","setDropzoneUserDialogOpen","route","useRoute","isSelf","currentUser","params","isFocused","useIsFocused","mutationUpdateUser","Platform","OS","ImagePicker","alert","onPickImage","mediaTypes","Images","allowsEditing","aspect","quality","base64","console","log","ScrollableScreen","contentContainerStyle","content","refreshControl","RefreshControl","refreshing","onRefresh","navigate","horizontal","Chip","MaterialCommunityIcons","chip","textStyle","chipTitle","email","phone","setOriginal","license","Math","round","exitWeight","Header","rigs","rig","onLongPress","join","rigInspections","some","insp","isOk","successColor","warningColor","transactions","edges","edge","node","fontSize","fontStyle","createdAt","paddingBottom","margin","minHeight","borderWidth","display","lineHeight","textAlignVertical"],"mappings":"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","file":"static/js/4.9a025fb0.chunk.js","sourcesContent":["import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\n\nconst { actions } = slice;\n\nexport default function RigForm() {\n  const state = useAppSelector(state => state.rigForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <View>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n      <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.repackExpiresAt.error || \"\" }\n      </HelperText>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport { result } from \"lodash\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { rigForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.rigForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"repackExpiresAt\", \"You must select a repack date in the future\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: Number(state.original?.id) } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(rigForm.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(rigForm.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(rigForm.setFieldError([\"serial\", message]));\n          case \"canopy_size\":\n            return dispatch(rigForm.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(rigForm.setFieldError([\"repackExpiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, mutationUpdateRig, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false}>\n        <ProgressBar indeterminate visible={createData.loading || updateData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <RigForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(rigForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Query, UserRole } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\nimport RoleSelect from '../../RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport ScrollableScreen from '../../ScrollableScreen';\n\nconst { actions } = slice;\n\nexport default function DropzoneUserForm() {\n  const { dropzoneUserForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermission\");\n\n  return ( \n    <>\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { dropzoneUserForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.dropzoneUserForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    \n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        dropzoneUserForm.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = response.data?.updateDropzoneUser;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(dropzoneUserForm.setFieldError([\"role\", message]));\n          case \"expires_at\":\n            return dispatch(dropzoneUserForm.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} dropzone user`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(dropzoneUserForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TextInput, HelperText, List, Divider, Dialog, DataTable } from 'react-native-paper';\nimport { Tabs, TabScreen } from \"react-native-paper-tabs\";\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport useRestriction from '../../../hooks/useRestriction';\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\nexport default function CreditsForm() {\n  const { creditsForm: state, global: globalState} = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(\"updatePermission\");\n\n  const currentCredits = (state.original?.credits || 0)\n  const amount = (state.fields.amount.value || 0);\n\n  const subtotal = state.fields.status.value === \"deposit\"\n    ? amount + currentCredits\n    : amount - currentCredits;\n  return ( \n    <>\n      <Tabs\n        defaultIndex={0} // default = 0\n        onChangeIndex={(newIndex) => {\n          dispatch(actions.setField([\"status\", newIndex === 1 ? \"withdrawal\" : \"deposit\"]));\n        }}\n        mode=\"fixed\"\n      >\n        <TabScreen label=\"Deposit\" icon=\"arrow-up\"><View /></TabScreen>\n        <TabScreen label=\"Withdraw\" icon=\"arrow-down\"><View /></TabScreen>\n      </Tabs>\n      <Dialog.Content style={{ paddingTop: 16 }}>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Message\"\n            error={!!state.fields.message.error}\n            value={state.fields.message.value?.toString() || \"\"}\n            onChangeText={(newValue: string) => dispatch(actions.setField([\"message\", newValue]))}\n          />\n          <HelperText type={!!state.fields.message.error ? \"error\" : \"info\"}>\n            { state.fields.message.error || \"\" }\n          </HelperText>\n          { state.fields.status.value === \"deposit\" \n            ? (\n                <View>\n                  \n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Add amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue: string) => dispatch(actions.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original?.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Deposit</DataTable.Title>\n                      <DataTable.Cell numeric>{`+$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            ) : (\n                <View>\n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Withdraw amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue: string) => dispatch(actions.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original!.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Withdraw</DataTable.Title>\n                      <DataTable.Cell numeric>{`-$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            )}\n      </Dialog.Content>\n      </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../graphql/schema\";\nimport { creditsForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport CreditsForm from \"../forms/credits/CreditsForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_TRANSACTION = gql`\n  mutation CreatrTransaction(\n    $message: String,\n    $status: String,\n    $amount: Float,\n    $dropzoneUserId: Int,\n  ) {\n    createTransaction(\n      input: {\n        attributes: {\n          amount: $amount,\n          dropzoneUserId: $dropzoneUserId,\n          message: $message,\n          status: $status,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      transaction {\n        id\n        amount\n        message\n\n        dropzoneUser {\n          id\n          credits\n\n          transactions {\n            edges {\n              node {\n                id\n                status\n                amount\n                createdAt\n                message\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.creditsForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateTransaction, createData] = useMutation<Mutation>(MUTATION_CREATE_TRANSACTION);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.amount.value) {\n      hasErrors = true;\n      dispatch(\n        creditsForm.setFieldError([\"amount\", \"You must specify an amount\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationCreateTransaction({\n        variables: {\n          amount: state.fields.amount.value,\n          message: state.fields.message.value,\n          status: state.fields.status.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"amount\":\n            return dispatch(creditsForm.setFieldError([\"amount\", message]));\n          case \"message\":\n            return dispatch(creditsForm.setFieldError([\"message\", message]));\n          case \"status\":\n            return dispatch(creditsForm.setFieldError([\"status\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        dispatch(creditsForm.reset());\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateTransaction, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <CreditsForm />\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(creditsForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { IconButton, List} from 'react-native-paper';\n\n\nimport { useAppSelector } from '../../../../redux';\n\ninterface ITableCard {\n  children: React.ReactNode;\n  title: string;\n  buttonIcon?: string;\n  onPressButton?(): void;\n}\nexport default function TableCard(props: ITableCard) {\n  const state = useAppSelector(state => state.global);\n  const { title, children, buttonIcon, onPressButton } = props;\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.container}>\n        <List.Subheader style={styles.title}>{title}</List.Subheader>\n        {\n          buttonIcon && (\n            <IconButton\n              icon={buttonIcon}\n              onPress={() => !onPressButton ? null : onPressButton()}\n              color={state.theme.colors.primary}\n            />\n        )}\n      </View>\n      {children}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  title: { flexGrow: 1 },\n  card: {\n    marginVertical: 8,\n    width: \"100%\",\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, IconButton, Paragraph, Title, TouchableRipple } from 'react-native-paper';\n\nimport { useAppSelector } from '../../../../redux';\nimport { DropzoneUser } from '../../../../graphql/schema';\n\n\ninterface IUserHeader {\n  dropzoneUser?: DropzoneUser;\n  canEdit?: boolean;\n  children?: React.ReactNode;\n  onPressAvatar?(): void;\n  onEdit?(): void;\n}\nexport default function UserHeader(props: IUserHeader) {\n  const { dropzoneUser, onEdit, canEdit, children, onPressAvatar } = props;\n  const { theme } = useAppSelector(state => state.global);\n  return (\n      <View style={[styles.container, { backgroundColor: theme.colors.primary }]}>\n        <View style={styles.actions}>\n        {\n          !canEdit ? null : (\n            <IconButton\n              icon=\"pencil\"\n              size={20}\n              color={theme.colors.surface}\n              onPress={() => onEdit ? onEdit() : null}\n            />\n          )}\n        </View>\n        <View style={styles.avatarContainer}>\n          <View style={{ flex: 1/3 }}>\n            <TouchableRipple onPress={onPressAvatar}>\n              {\n                !dropzoneUser?.user?.image\n                ? <Avatar.Icon\n                    size={80}\n                    icon=\"account\"\n                    color={theme.colors.primary}\n                    style={{ backgroundColor: theme.colors.surface }}\n                  />\n                : <Avatar.Image\n                    size={80}\n                    source={{ uri: dropzoneUser?.user.image }}\n                    color={theme.colors.primary}\n                    style={{ backgroundColor: theme.colors.surface }}\n                  />\n              }\n            </TouchableRipple>\n          </View>\n          <View style={styles.titleContainer}>\n            <Title style={styles.title}>{dropzoneUser?.user?.name}</Title>\n            <Paragraph style={styles.paragraph}>{dropzoneUser?.role?.name}</Paragraph>\n          </View>\n        </View>\n\n        {children}\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    paddingTop: 16\n  },\n  actions: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\"\n  },\n  avatarContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  titleContainer: {\n    paddingLeft: 48,\n    flex: 2/3,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  title: {\n    color: \"white\"\n  },\n  paragraph: {\n    color: \"white\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Divider, List } from 'react-native-paper';\n\ninterface IInfoGrid {\n  items: Array<{ title: string, value: string, onPress?(): void; bold?: boolean }>;\n}\nexport default function InfoGrid(props: IInfoGrid) {\n  const { items } = props;\n  const flex = 1 / items.length;\n\n  return (\n    <>\n      <Divider style={styles.divider} />\n      <View style={styles.container}>\n        {\n          items.map((item, i) =>\n          <>\n            <View style={{ flex }} key={`info-grid-${i}`}>\n              <List.Item\n                titleStyle={[styles.title, {\n                  fontWeight: item.bold !== false ? \"bold\" : undefined\n                }]}\n                title={item.value}\n                descriptionStyle={styles.description}\n                description={item.title}\n                onPress={item.onPress}\n              />\n            </View>\n            {i === items.length - 1 ? null : <Divider key={`info-grid-divider-${i}`} style={styles.verticalDivider} />}\n          </>\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n container: { width: \"100%\", flexDirection: \"row\" },\n  divider: {\n    height: StyleSheet.hairlineWidth,\n    width: '100%',\n    backgroundColor: \"white\",\n  },\n  verticalDivider: {\n    width: StyleSheet.hairlineWidth,\n    height: '100%',\n    backgroundColor: \"white\",\n  },\n  title: {\n    textAlign: \"center\",\n    color: \"white\",\n  },\n  description: {\n    textAlign: \"center\",\n    color: \"white\",\n  }\n});\n","import { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { useMutation, useQuery } from '@apollo/client';\nimport * as React from 'react';\nimport { Platform, RefreshControl, StyleSheet, Text } from 'react-native';\nimport { Chip, DataTable, Divider, IconButton, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport gql from 'graphql-tag';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { IconProps } from 'react-native-paper/lib/typescript/components/MaterialCommunityIcon';\nimport * as ImagePicker from 'expo-image-picker';\n\n\nimport { successColor, warningColor } from \"../../../constants/Colors\";\nimport RigDialog from '../../../components/dialogs/RigDialog';\nimport { creditsForm, dropzoneUserForm, rigForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Mutation, Query } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\nimport CreditsDialog from '../../../components/dialogs/CreditsDialog';\n\nimport TableCard from \"./UserInfo/TableCard\";\nimport Header from \"./UserInfo/Header\";\nimport InfoGrid from './UserInfo/InfoGrid';\n\n\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n        rigInspections {\n          id\n          isOk\n          rig {\n            id\n          }\n        }\n\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              message\n              amount\n              createdAt\n            }\n          }\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          image\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_IMAGE = gql`\n  mutation UpdateUserImage(\n    $id: Int,\n    $image: String\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        image: $image,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        image\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const [creditsDialogOpen, setCreditsDialogOpen] = React.useState(false);\n  const [rigDialogOpen, setRigDialogOpen] = React.useState(false);\n  const [dropzoneUserDialogOpen, setDropzoneUserDialogOpen] = React.useState(false);\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = state.currentDropzone?.currentUser?.id === route.params.userId;\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n      dropzoneUserId: Number(route.params.userId)\n    }\n  });\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused])\n\n  const [mutationUpdateUser, mutation] = useMutation<Mutation>(MUTATION_UPDATE_IMAGE);\n\n  React.useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  \n  const onPickImage = React.useCallback(\n    async () => {\n      try {\n        const result = await ImagePicker.launchImageLibraryAsync({\n          mediaTypes: ImagePicker.MediaTypeOptions.Images,\n          allowsEditing: true,\n          aspect: [4, 3],\n          quality: 0.1,\n          base64: true,\n        }) as { base64: string };\n    \n\n        // Upload image\n        await mutationUpdateUser({\n          variables: {\n            id: Number(data?.dropzone?.dropzoneUser?.user?.id),\n            image: `data:image/jpeg;base64,${result.base64}`,\n          }\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n    {loading && <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />}\n    <ScrollableScreen contentContainerStyle={styles.content} refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <Header\n        dropzoneUser={data?.dropzone?.dropzoneUser!}\n        canEdit={isSelf}\n        onEdit={() =>\n          navigation.navigate(\"UpdateUserScreen\", { user: state.currentDropzone?.currentUser?.user })\n        }\n        onPressAvatar={onPickImage}\n      >\n\n        <ScrollView horizontal style={{ marginVertical: 8 }}>\n          <Chip\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"email\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n          >\n            {data?.dropzone?.dropzoneUser?.user?.email  || \"-\"}\n          </Chip>\n\n          <Chip\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"phone\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n          >\n            {data?.dropzone?.dropzoneUser?.user?.phone  || \"-\"}\n          </Chip>\n\n          <Chip\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"card-account-details-star-outline\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n            onPress={() => {\n              dispatch(dropzoneUserForm.setOriginal(data?.dropzone?.dropzoneUser!));\n              setDropzoneUserDialogOpen(true);\n            }}\n          >\n            {!data?.dropzone?.dropzoneUser?.expiresAt\n                  ? \"Not a member\"\n                  : format((data?.dropzone?.dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")}\n          </Chip>\n        </ScrollView>\n        <Divider style={styles.divider} />\n        <InfoGrid\n          items={[\n            { title: \"Funds\", value: `$${data?.dropzone?.dropzoneUser?.credits || 0}`},\n            { title: \"License\", value: `${data?.dropzone?.dropzoneUser?.user?.license?.name || \"-\"}`},\n            { title: \"Exit weight\", value: Math.round(Number(data?.dropzone?.dropzoneUser?.user?.exitWeight)).toString() || \"-\" }\n          ]}\n        />\n        <Divider style={[styles.divider, { backgroundColor: \"white\" }]} />\n      </Header>\n      \n      <TableCard title=\"Rigs\" buttonIcon=\"plus\" onPressButton={() => setRigDialogOpen(true)}>\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>\n              Container\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Repack due\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Canopy size\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Inspected\n            </DataTable.Title>\n          </DataTable.Header>\n\n          {\n            data?.dropzone?.dropzoneUser?.user?.rigs?.map((rig) =>\n              <DataTable.Row\n                key={`rig-${rig!.id}`}\n                onPress={() => {\n                  dispatch(rigForm.setOriginal(rig));\n                  setRigDialogOpen(true);\n                }}\n                onLongPress={() =>\n                  navigation.navigate(\"RigInspectionScreen\", {\n                    dropzoneUserId: Number(route.params.userId),\n                    rig\n                  })\n                }\n                pointerEvents=\"none\"\n              >\n                <DataTable.Cell>\n                  {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {`${rig?.canopySize}`}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  <IconButton\n                    icon={\n                      data?.dropzone?.dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                      ? \"eye-check\"\n                      : \"eye-minus\"\n                    }\n                    color={\n                      data?.dropzone?.dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                      ? successColor\n                      : warningColor\n                    }\n                    onPress={() =>\n                      navigation.navigate(\"RigInspectionScreen\", {\n                        dropzoneUserId: Number(route.params.userId),\n                        rig\n                      })\n                    }\n                  />\n                </DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n        </DataTable>\n      </TableCard>\n        \n      <TableCard\n        title=\"Transactions\"\n        buttonIcon=\"plus\"\n        onPressButton={() => {\n          if (data?.dropzone?.dropzoneUser) {\n            dispatch(creditsForm.setOriginal(data!.dropzone!.dropzoneUser!));\n            setCreditsDialogOpen(true);\n          }\n        }}\n      >\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Time</DataTable.Title>\n            <DataTable.Title>Type</DataTable.Title>\n            <DataTable.Title>Message</DataTable.Title>\n            <DataTable.Title numeric>Amount</DataTable.Title>\n          </DataTable.Header>\n          {\n            data?.dropzone?.dropzoneUser?.transactions?.edges?.map((edge) => (\n              <DataTable.Row key={`transaction-${edge?.node?.id}`}>\n                <DataTable.Cell>\n                  <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{!edge?.node?.createdAt ? null : format(edge?.node?.createdAt * 1000, \"yyyy/MM/dd hh:mm\")}</Text>\n                </DataTable.Cell>\n                <DataTable.Cell>\n                  <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{edge?.node?.status}</Text>\n                </DataTable.Cell>\n                <DataTable.Cell>\n                  {edge?.node?.message}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {edge?.node?.amount}\n                </DataTable.Cell>\n              </DataTable.Row>\n            ))\n          }\n        </DataTable>\n\n      </TableCard>\n    </ScrollableScreen>\n        \n    <RigDialog\n      onClose={() => setRigDialogOpen(false)}\n      onSuccess={() => setRigDialogOpen(false)}\n      userId={Number(data?.dropzone?.dropzoneUser?.user?.id)}\n      open={rigDialogOpen}\n    />\n    \n    <DropzoneUserDialog\n      onClose={() => setDropzoneUserDialogOpen(false)}\n      onSuccess={() => setDropzoneUserDialogOpen(false)}\n      open={dropzoneUserDialogOpen}\n    />\n\n    <CreditsDialog\n      onClose={() => setCreditsDialogOpen(false)}\n      onSuccess={() => setCreditsDialogOpen(false)}\n      open={creditsDialogOpen}\n    />\n  </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    paddingBottom: 56,\n    paddingHorizontal: 0,\n  },\n  divider: {\n    height: 1,\n    width: '100%',\n  },\n  chip: {\n    margin: 1,\n    backgroundColor: \"transparent\",\n    minHeight: 23,\n    borderWidth: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    display: \"flex\",\n  },\n  chipTitle: {\n    color: \"white\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 12,\n    lineHeight: 24,\n    textAlignVertical: \"center\"\n  }\n});\n"],"sourceRoot":""}