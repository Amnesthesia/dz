{"version":3,"sources":["components/Themed.tsx","node_modules/@babel/runtime/helpers/taggedTemplateLiteralLoose.js","IconButton.tsx","components/ScrollableScreen.tsx","node_modules/react-native-web/dist/exports/useWindowDimensions/index.js","HelperText.tsx","CrossFadeIcon.tsx","graphql/createMutation.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","module","exports","strings","raw","slice","__esModule","styles","container","alignItems","justifyContent","overflow","margin","disabled","opacity","withTheme","size","animated","rest","iconColor","customColor","rippleColor","IconComponent","buttonSize","borderless","centered","onPress","width","height","borderRadius","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","top","left","bottom","right","source","ScrollableScreen","useWindowDimensions","useAppSelector","state","global","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","flexGrow","paddingBottom","_useState","useState","Dimensions","get","dims","setDims","useEffect","handleChange","_ref","window","addEventListener","removeEventListener","text","fontSize","paddingVertical","padding","type","visible","shown","React","Animated","current","textHeight","scale","toValue","duration","useNativeDriver","textColor","onLayout","e","transform","translateY","inputRange","outputRange","fade","currentIcon","setPreviousIcon","setCurrentIcon","isValidIcon","isEqualIcon","previousIcon","opacityPrev","opacityNext","rotatePrev","rotateNext","rotate","icon","position","isRequired","message","pattern","isEmail","RegExp","validates","callback","createMutation","mutation","options","getPayload","fieldErrorMap","opts","onFieldError","onSuccess","onError","useMutation","mutate","data","loading","error","useCallback","variables","a","async","hasErrors","Object","keys","forEach","x","variable","validator","test","validate","result","payload","fieldErrors","map","field","fieldName","errors","length","JSON","stringify","actions","MUTATION_LOG_IN","gql","LoginScreen","login","dispatch","useAppDispatch","navigation","useNavigation","mutationLogin","onLogin","emailRegex","hasError","fields","email","value","setEmailError","password","setPasswordError","console","log","userLogin","authenticatable","credentials","globalActions","setCredentials","setUser","snackbarActions","showSnackbar","variant","title","TextInput","label","mode","onChangeText","newValue","setEmail","HelperText","secureTextEntry","setPassword","Button","button","navigate","fontWeight","separator","marginVertical","marginBottom","marginTop","MUTATION_USER_SIGNUP","userSignUp","license","name","passwordConfirmation","globalSlice","SignupScreen","signup","useMutationSignUp","setFieldError","onSignUp","setField","exitWeight","toString","keyboardType","Affix","parseFloat","phone","Boolean","textContentType","passwordRules","licenseId","Number","id","maxWidth","Stack","createStackNavigator","Unauthenticated","Navigator","screenOptions","headerShown","cardStyle","initialRouteName","Screen","component","SignUpScreen"],"mappings":"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","file":"static/js/16.01d00556.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}\n\nmodule.exports = _taggedTemplateLiteralLoose;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      // $FlowFixMe\n      setDims(window);\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n","import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport Icon, { isValidIcon, IconSource, isEqualIcon } from './Icon';\n\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Icon to display for the `CrossFadeIcon`.\n   */\n  source: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color: string;\n  /**\n   * Size of the icon.\n   */\n  size: number;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst CrossFadeIcon = ({ color, size, source, theme }: Props) => {\n  const [currentIcon, setCurrentIcon] = React.useState<IconSource>(\n    () => source\n  );\n  const [previousIcon, setPreviousIcon] = React.useState<IconSource | null>(\n    null\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(1));\n\n  const { scale } = theme.animation;\n\n  if (currentIcon !== source) {\n    setPreviousIcon(() => currentIcon);\n    setCurrentIcon(() => source);\n  }\n\n  React.useEffect(() => {\n    if (isValidIcon(previousIcon) && !isEqualIcon(previousIcon, currentIcon)) {\n      fade.setValue(1);\n\n      Animated.timing(fade, {\n        duration: scale * 200,\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [currentIcon, previousIcon, fade, scale]);\n\n  const opacityPrev = fade;\n  const opacityNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      })\n    : 1;\n\n  const rotatePrev = fade.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['-90deg', '0deg'],\n  });\n\n  const rotateNext = previousIcon\n    ? fade.interpolate({\n        inputRange: [0, 1],\n        outputRange: ['0deg', '-180deg'],\n      })\n    : '0deg';\n\n  return (\n    <View\n      style={[\n        styles.content,\n        {\n          height: size,\n          width: size,\n        },\n      ]}\n    >\n      {previousIcon ? (\n        <Animated.View\n          style={[\n            styles.icon,\n            {\n              opacity: opacityPrev,\n              transform: [{ rotate: rotatePrev }],\n            },\n          ]}\n        >\n          <Icon source={previousIcon} size={size} color={color} />\n        </Animated.View>\n      ) : null}\n      <Animated.View\n        style={[\n          styles.icon,\n          {\n            opacity: opacityNext,\n            transform: [{ rotate: rotateNext }],\n          },\n        ]}\n      >\n        <Icon source={currentIcon} size={size} color={color} />\n      </Animated.View>\n    </View>\n  );\n};\n\nexport default withTheme(CrossFadeIcon);\n\nconst styles = StyleSheet.create({\n  content: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from '../../../components/notifications';\nimport { useAppSelector, useAppDispatch, globalActions, snackbarActions } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Mutation } from '../../../graphql/schema';\n\nconst { actions } = slice;\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              globalActions.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              globalActions.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(snackbarActions.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign in</Text>\n\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button style={styles.button} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 10,\n  },\n  button: {\n    marginTop: 10,\n    width: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"./slice\";\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.signup);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          globalActions.setCredentials(payload.credentials)\n        );\n        dispatch(\n          globalActions.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen contentContainerStyle={{ padding: 48, alignItems: \"center\" }}>\n      <Text style={styles.title}>Sign up</Text>\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", parseFloat(newValue)]))}\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          onPress={() =>\n            onSignUp({\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    maxWidth: 400,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n"],"sourceRoot":""}