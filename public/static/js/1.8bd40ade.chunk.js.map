{"version":3,"sources":["ListAccordionGroup.tsx","ListAccordion.tsx","ListIcon.tsx","ListItem.tsx","ListSubheader.tsx","ListSection.tsx","Title.tsx","Caption.tsx","CardContent.tsx","CardActions.tsx","CardCover.tsx","CardTitle.tsx","Card.tsx","HelperText.tsx","Modal.tsx","DialogContent.tsx","DialogActions.tsx","DialogTitle.tsx","DialogScrollArea.tsx","Dialog.tsx"],"names":["ListAccordionGroupContext","React","ListAccordionGroup","expandedId","children","value","expandedIdProp","onAccordionPress","newExpandedId","setExpandedId","currentExpandedId","ListAccordion","titleNumberOfLines","descriptionNumberOfLines","expandedProp","expanded","titleColor","color","theme","descriptionColor","expandedInternal","groupContext","isExpanded","handlePress","id","onPress","setExpanded","style","styles","onLongPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","testID","borderless","pointerEvents","left","selectable","numberOfLines","description","right","name","size","direction","I18nManager","child","StyleSheet","container","padding","row","flexDirection","alignItems","multiline","height","justifyContent","title","fontSize","item","margin","paddingLeft","content","flex","withTheme","ListIcon","source","iconColor","width","ListItem","rest","marginVerticalNone","ellipsizeMode","renderDescription","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","ListSubheader","font","fonts","textColor","colors","paddingHorizontal","paddingVertical","ListSection","titleStyle","props","alpha","family","text","lineHeight","letterSpacing","CardContent","cover","index","prev","siblings","next","total","contentStyle","first","paddingTop","last","paddingBottom","only","CardActions","compact","CardCover","roundness","coverStyle","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","backgroundColor","overflow","image","CardTitle","subtitleNumberOfLines","minHeight","subtitle","marginBottom","rightStyle","titles","Card","elevation","cardElevation","Animated","current","delayPressIn","disabled","onPressIn","scale","animation","toValue","duration","useNativeDriver","dark","mode","onPressOut","accessible","innerContainer","flexGrow","flexShrink","type","visible","shown","textHeight","onLayout","e","opacity","transform","translateY","inputRange","outputRange","TOP_INSET","getStatusBarHeight","BOTTOM_INSET","getBottomSpace","rendered","BackHandler","easing","Easing","finished","componentDidUpdate","prevProps","this","showModal","hideModal","componentWillUnmount","render","overlayAccessibilityLabel","accessibilityViewIsModal","accessibilityLiveRegion","onAccessibilityEscape","accessibilityLabel","dismissable","undefined","marginTop","nextProps","prevState","Modal","backdrop","wrapper","DialogContent","DialogActions","DialogTitle","marginHorizontal","DialogScrollArea","borderColor","borderTopWidth","borderBottomWidth","Dialog","onDismiss","contentContainerStyle","overlay","surface","i","Platform"],"mappings":"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","file":"static/js/1.8bd40ade.chunk.js","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onAccordionPress?: (expandedId: string | number) => void;\n  /**\n   * Id of the currently expanded list accordion\n   */\n  expandedId?: string | number;\n  /**\n   * React elements containing list accordions\n   */\n  children: React.ReactNode;\n};\n\nexport type ListAccordionGroupContextType = {\n  expandedId: string | number | undefined;\n  onAccordionPress: (expandedId: string | number) => void;\n} | null;\n\nexport const ListAccordionGroupContext = React.createContext<\n  ListAccordionGroupContextType\n>(null);\n\n/**\n * List.AccordionGroup allows to control a group of List Accordions. `id` prop for List.Accordion is required in order for group to work.\n * List.AccordionGroup can be a controlled or uncontrolled component. The example shows the uncontrolled version.\n * At most one Accordion can be expanded at a given time.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, Text } from 'react-native';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.AccordionGroup>\n *     <List.Accordion title=\"Accordion 1\" id=\"1\">\n *       <List.Item title=\"Item 1\" />\n *     </List.Accordion>\n *     <List.Accordion title=\"Accordion 2\" id=\"2\">\n *       <List.Item title=\"Item 2\" />\n *     </List.Accordion>\n *     <View>\n *       <Text>\n *         List.Accordion can be wrapped because implementation uses React.Context.\n *       </Text>\n *       <List.Accordion title=\"Accordion 3\" id=\"3\">\n *         <List.Item title=\"Item 3\" />\n *       </List.Accordion>\n *     </View>\n *   </List.AccordionGroup>\n * );\n *\n * export default MyComponent;\n *```\n */\nconst ListAccordionGroup = ({\n  expandedId: expandedIdProp,\n  onAccordionPress,\n  children,\n}: Props) => {\n  const [expandedId, setExpandedId] = React.useState<\n    string | number | undefined\n  >(undefined);\n\n  const onAccordionPressDefault = (newExpandedId: string | number) => {\n    setExpandedId((currentExpandedId) =>\n      currentExpandedId === newExpandedId ? undefined : newExpandedId\n    );\n  };\n\n  return (\n    <ListAccordionGroupContext.Provider\n      value={{\n        expandedId: expandedIdProp || expandedId, // component can be controlled or uncontrolled\n        onAccordionPress: onAccordionPress || onAccordionPressDefault,\n      }}\n    >\n      {children}\n    </ListAccordionGroupContext.Provider>\n  );\n};\n\nListAccordionGroup.displayName = 'List.AccordionGroup';\n\nexport default ListAccordionGroup;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={handlePress}\n        onLongPress={onLongPress}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        testID={testID}\n        borderless\n      >\n        <View style={styles.row} pointerEvents=\"none\">\n          {left\n            ? left({\n                color: isExpanded ? theme.colors.primary : descriptionColor,\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              selectable={false}\n              numberOfLines={titleNumberOfLines}\n              style={[\n                styles.title,\n                {\n                  color: isExpanded ? theme.colors.primary : titleColor,\n                },\n                titleStyle,\n              ]}\n            >\n              {title}\n            </Text>\n            {description && (\n              <Text\n                selectable={false}\n                numberOfLines={descriptionNumberOfLines}\n                style={[\n                  styles.description,\n                  {\n                    color: descriptionColor,\n                  },\n                  descriptionStyle,\n                ]}\n              >\n                {description}\n              </Text>\n            )}\n          </View>\n          <View\n            style={[styles.item, description ? styles.multiline : undefined]}\n          >\n            {right ? (\n              right({\n                isExpanded: isExpanded,\n              })\n            ) : (\n              <MaterialCommunityIcon\n                name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                color={titleColor}\n                size={24}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            )}\n          </View>\n        </View>\n      </TouchableRipple>\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n","import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Icon, { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Color for the icon.\n   */\n  color?: string;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst ICON_SIZE = 24;\n\n/**\n * A component to show an icon in a list item.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/list-icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <>\n *     <List.Icon color={Colors.blue500} icon=\"folder\" />\n *     <List.Icon color={Colors.blue500} icon=\"equal\" />\n *     <List.Icon color={Colors.blue500} icon=\"calendar\" />\n *   </>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListIcon = ({ icon, color: iconColor, style }: Props) => (\n  <View style={[styles.item, style]} pointerEvents=\"box-none\">\n    <Icon source={icon} size={ICON_SIZE} color={iconColor} />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  item: {\n    margin: 8,\n    height: 40,\n    width: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nListIcon.displayName = 'List.Icon';\n\nexport default ListIcon;\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          <Text\n            selectable={false}\n            ellipsizeMode={titleEllipsizeMode}\n            numberOfLines={titleNumberOfLines}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Text element.\n   */\n  style?: StyleProp<TextStyle>;\n};\n\n/**\n * A component used to display a header in lists.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => <List.Subheader>My List Title</List.Subheader>;\n *\n * export default MyComponent;\n * ```\n */\nconst ListSubheader = ({ style, theme, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const font = fonts.medium;\n  const textColor = color(colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <Text\n      numberOfLines={1}\n      {...rest}\n      style={[styles.container, { color: textColor, ...font }, style]}\n    />\n  );\n};\n\nListSubheader.displayName = 'List.Subheader';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n    paddingVertical: 13,\n  },\n});\n\nexport default withTheme(ListSubheader);\n","import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport ListSubheader from './ListSubheader';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title text for the section.\n   */\n  title?: string;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component used to group list items.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/list-section.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Section>\n *     <List.Subheader>Some title</List.Subheader>\n *     <List.Item title=\"First Item\" left={() => <List.Icon icon=\"folder\" />} />\n *     <List.Item\n *       title=\"Second Item\"\n *       left={() => <List.Icon color=\"#000\" icon=\"folder\" />}\n *     />\n *   </List.Section>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ListSection = ({\n  children,\n  title,\n  titleStyle,\n  style,\n  ...rest\n}: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {title ? <ListSubheader style={titleStyle}>{title}</ListSubheader> : null}\n    {children}\n  </View>\n);\n\nListSection.displayName = 'List.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginVertical: 8,\n  },\n});\n\nexport default withTheme(ListSection);\n","import * as React from 'react';\nimport { Text, StyleSheet } from 'react-native';\nimport StyledText from './StyledText';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  children: React.ReactNode;\n};\n\n// @component-group Typography\n\n/**\n * Typography component for showing a title.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/title.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Title } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Title>Title</Title>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Title = (props: Props) => (\n  <StyledText\n    {...props}\n    alpha={0.87}\n    family=\"medium\"\n    style={[styles.text, props.style]}\n  />\n);\n\nexport default Title;\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    marginVertical: 2,\n    letterSpacing: 0.15,\n  },\n});\n","import * as React from 'react';\nimport { Text, TextStyle, StyleSheet, StyleProp } from 'react-native';\nimport StyledText from './StyledText';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  style?: StyleProp<TextStyle>;\n  children: React.ReactNode;\n};\n\n// @component-group Typography\n\n/**\n * Typography component for showing a caption.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/caption.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Caption } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Caption>Caption</Caption>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Caption = (props: Props) => (\n  <StyledText\n    {...props}\n    alpha={0.54}\n    family=\"regular\"\n    style={[styles.text, props.style]}\n  />\n);\n\nexport default Caption;\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    lineHeight: 20,\n    marginVertical: 2,\n    letterSpacing: 0.4,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `Card.Content`.\n   */\n  children: React.ReactNode;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  /**\n   * @internal\n   */\n  siblings?: Array<string>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show content inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-content-example.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardContent = ({ index, total, siblings, style, ...rest }: Props) => {\n  const cover = 'withTheme(CardCover)';\n  const title = 'withTheme(CardTitle)';\n\n  let contentStyle, prev, next;\n\n  if (typeof index === 'number' && siblings) {\n    prev = siblings[index - 1];\n    next = siblings[index + 1];\n  }\n\n  if (\n    (prev === cover && next === cover) ||\n    (prev === title && next === title) ||\n    total === 1\n  ) {\n    contentStyle = styles.only;\n  } else if (index === 0) {\n    if (next === cover || next === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.first;\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    if (prev === cover || prev === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.last;\n    }\n  } else if (prev === cover || prev === title) {\n    contentStyle = styles.first;\n  } else if (next === cover || next === title) {\n    contentStyle = styles.last;\n  }\n\n  return <View {...rest} style={[styles.container, contentStyle, style]} />;\n};\n\nCardContent.displayName = 'Card.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  first: {\n    paddingTop: 16,\n  },\n  last: {\n    paddingBottom: 16,\n  },\n  only: {\n    paddingVertical: 16,\n  },\n});\n\nexport default CardContent;\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `CardActions`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a list of actions inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-actions.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardActions = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {React.Children.map(props.children, (child) =>\n      React.isValidElement(child)\n        ? React.cloneElement(child, {\n            compact: child.props.compact !== false,\n          })\n        : child\n    )}\n  </View>\n);\n\nCardActions.displayName = 'Card.Actions';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    padding: 8,\n  },\n});\n\nexport default CardActions;\n","import * as React from 'react';\nimport { StyleSheet, View, ViewStyle, Image, StyleProp } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { grey200 } from '../../styles/colors';\n\ntype Props = React.ComponentPropsWithRef<typeof Image> & {\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show a cover image inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-cover.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Image props https://reactnative.dev/docs/image#props\n */\nconst CardCover = ({ index, total, style, theme, ...rest }: Props) => {\n  const { roundness } = theme;\n\n  let coverStyle;\n\n  if (index === 0) {\n    if (total === 1) {\n      coverStyle = {\n        borderRadius: roundness,\n      };\n    } else {\n      coverStyle = {\n        borderTopLeftRadius: roundness,\n        borderTopRightRadius: roundness,\n      };\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    coverStyle = {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return (\n    <View style={[styles.container, coverStyle, style]}>\n      <Image {...rest} style={[styles.image, coverStyle]} />\n    </View>\n  );\n};\n\nCardCover.displayName = 'Card.Cover';\nconst styles = StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: grey200,\n    overflow: 'hidden',\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default withTheme(CardCover);\n\n// @component-docs ignore-next-line\nexport { CardCover };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport Caption from './../Typography/Caption';\nimport Title from './../Typography/Title';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Text for the title. Note that this will only accept a string or `<Text>`-based node.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the title.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Text for the subtitle. Note that this will only accept a string or `<Text>`-based node.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the subtitle.\n   */\n  subtitleNumberOfLines?: number;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the left element wrapper.\n   */\n  leftStyle?: StyleProp<ViewStyle>;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the right element wrapper.\n   */\n  rightStyle?: StyleProp<ViewStyle>;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst LEFT_SIZE = 40;\n\n/**\n * A component to show a title, subtitle and an avatar inside a Card.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-title-1.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Card, IconButton } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card.Title\n *     title=\"Card Title\"\n *     subtitle=\"Card Subtitle\"\n *     left={(props) => <Avatar.Icon {...props} icon=\"folder\" />}\n *     right={(props) => <IconButton {...props} icon=\"more-vert\" onPress={() => {}} />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardTitle = ({\n  title,\n  titleStyle,\n  titleNumberOfLines = 1,\n  subtitle,\n  subtitleStyle,\n  subtitleNumberOfLines = 1,\n  left,\n  leftStyle,\n  right,\n  rightStyle,\n  style,\n}: Props) => {\n  return (\n    <View\n      style={[\n        styles.container,\n        { minHeight: subtitle || left || right ? 72 : 50 },\n        style,\n      ]}\n    >\n      {left ? (\n        <View style={[styles.left, leftStyle]}>\n          {left({\n            size: LEFT_SIZE,\n          })}\n        </View>\n      ) : null}\n\n      <View style={[styles.titles]}>\n        {title ? (\n          <Title\n            style={[\n              styles.title,\n              { marginBottom: subtitle ? 0 : 2 },\n              titleStyle,\n            ]}\n            numberOfLines={titleNumberOfLines}\n          >\n            {title}\n          </Title>\n        ) : null}\n\n        {subtitle ? (\n          <Caption\n            style={[styles.subtitle, subtitleStyle]}\n            numberOfLines={subtitleNumberOfLines}\n          >\n            {subtitle}\n          </Caption>\n        ) : null}\n      </View>\n\n      <View style={rightStyle}>{right ? right({ size: 24 }) : null}</View>\n    </View>\n  );\n};\n\nCardTitle.displayName = 'Card.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 16,\n  },\n\n  left: {\n    justifyContent: 'center',\n    marginRight: 16,\n    height: LEFT_SIZE,\n    width: LEFT_SIZE,\n  },\n\n  titles: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  title: {\n    minHeight: 30,\n  },\n\n  subtitle: {\n    minHeight: 20,\n    marginVertical: 0,\n  },\n});\n\nexport default withTheme(CardTitle);\n\n// @component-docs ignore-next-line\nexport { CardTitle };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const { roundness } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  return (\n    <Surface style={[{ borderRadius: roundness, elevation }, style]} {...rest}>\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress ? handlePressIn : undefined}\n        onPressOut={onPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n","import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n    overlayAccessibilityLabel: 'Close modal',\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.hideModal();\n      }\n    }\n  }\n\n  private handleBack = () => {\n    if (this.props.dismissable) {\n      this.hideModal();\n    }\n    return true;\n  };\n\n  private showModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n  }\n\n  render() {\n    const { rendered, opacity } = this.state;\n\n    if (!rendered) return null;\n\n    const {\n      children,\n      dismissable,\n      style,\n      theme,\n      contentContainerStyle,\n      overlayAccessibilityLabel,\n    } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n        onAccessibilityEscape={this.hideModal}\n      >\n        <TouchableWithoutFeedback\n          accessibilityLabel={overlayAccessibilityLabel}\n          accessibilityRole=\"button\"\n          disabled={!dismissable}\n          onPress={dismissable ? this.hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <View\n          style={[\n            styles.wrapper,\n            { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n            style,\n          ]}\n          pointerEvents=\"box-none\"\n        >\n          <Surface\n            style={\n              [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n                ViewStyle\n              >\n            }\n          >\n            {children}\n          </Surface>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n","import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogContent`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show content in a Dialog.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/dialog-content.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.Content>\n *           <Paragraph>This is simple dialog</Paragraph>\n *         </Dialog.Content>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogContent = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {props.children}\n  </View>\n);\n\nDialogContent.displayName = 'Dialog.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingBottom: 24,\n    paddingHorizontal: 24,\n  },\n});\n\nexport default DialogContent;\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogActions`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a list of actions in a Dialog.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/dialog-actions.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.Actions>\n *           <Button onPress={() => console.log('Cancel')}>Cancel</Button>\n *           <Button onPress={() => console.log('Ok')}>Ok</Button>\n *         </Dialog.Actions>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogActions = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {React.Children.map(props.children, (child) =>\n      React.isValidElement(child)\n        ? React.cloneElement(child, {\n            compact: true,\n          })\n        : child\n    )}\n  </View>\n);\n\nDialogActions.displayName = 'Dialog.Actions';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: 8,\n  },\n});\n\nexport default DialogActions;\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport Title from '../Typography/Title';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof Title> & {\n  /**\n   * Title text for the `DialogTitle`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show a title in a Dialog.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/dialog-title.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.Title>This is a title</Dialog.Title>\n *         <Dialog.Content>\n *           <Paragraph>This is simple dialog</Paragraph>\n *         </Dialog.Content>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogTitle = ({ children, theme, style, ...rest }: Props) => (\n  <Title\n    // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    accessibilityTraits=\"header\"\n    accessibilityRole=\"header\"\n    style={[styles.text, { color: theme.colors.text }, style]}\n    {...rest}\n  >\n    {children}\n  </Title>\n);\n\nDialogTitle.displayName = 'Dialog.Title';\n\nconst styles = StyleSheet.create({\n  text: {\n    marginTop: 22,\n    marginBottom: 18,\n    marginHorizontal: 24,\n  },\n});\n\nexport default withTheme(DialogTitle);\n\n// @component-docs ignore-next-line\nexport { DialogTitle };\n","import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogScrollArea`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.\n * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/dialog-scroll-area.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ScrollView } from 'react-native';\n * import { Dialog, Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.ScrollArea>\n *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>\n *             <Text>This is a scrollable area</Text>\n *           </ScrollView>\n *         </Dialog.ScrollArea>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogScrollArea = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {props.children}\n  </View>\n);\n\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderColor: 'rgba(0, 0, 0, .12)',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default DialogScrollArea;\n","import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <View>\n *       <Button onPress={showDialog}>Show Dialog</Button>\n *       <Portal>\n *         <Dialog visible={visible} onDismiss={hideDialog}>\n *           <Dialog.Title>Alert</Dialog.Title>\n *           <Dialog.Content>\n *             <Paragraph>This is simple dialog</Paragraph>\n *           </Dialog.Content>\n *           <Dialog.Actions>\n *             <Button onPress={hideDialog}>Done</Button>\n *           </Dialog.Actions>\n *         </Dialog>\n *       </Portal>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"],"sourceRoot":""}