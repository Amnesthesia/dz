{"version":3,"sources":["components/notifications/slice.ts","redux/global.ts","components/forms/dropzone/slice.tsx","components/forms/plane/slice.tsx","components/forms/extra/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/load/slice.tsx","components/forms/user/slice.tsx","screens/unauthenticated/login/slice.ts","screens/unauthenticated/signup/slice.ts","components/forms/slot/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/rig/slice.tsx","constants/Colors.ts","hooks/useColorScheme.web.ts","components/notifications/Notifications.tsx","hooks/usePalette.ts","graphql/Apollo.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf","redux/index.ts","screens/authenticated/users/slice.ts","components/forms/rig_inspection/slice.tsx","redux/store.ts"],"names":["createSlice","name","initialState","queue","reducers","hideSnackbar","state","slice","showSnackbar","action","push","payload","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","colors","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","currentUser","currentDropzone","permissions","credentials","theme","isDarkMode","setCredentials","setUser","setPermissions","setPrimaryColor","primary","setAccentColor","accent","setDropzone","primaryColor","secondaryColor","toggleDarkMode","logout","key","typedKey","original","fields","federation","value","error","banner","isCreditSystemEnabled","isPublic","setField","field","setFieldError","setOriginal","reset","registration","minSlots","maxSlots","hours","nextMaintenanceHours","cost","ticketTypeIds","ticketTypes","map","id","Number","altitude","allowManifestingSelf","isTandem","extras","gca","dispatchAt","isOpen","loadMaster","pilot","plane","exitWeight","email","phone","rigs","license","setFederation","password","setEmail","setPassword","setEmailError","setPasswordError","passwordConfirmation","jumpType","load","rig","ticketType","user","role","credits","expiresAt","make","model","serial","repackExpiresAt","canopySize","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","useColorScheme","actions","StyleSheet","create","container","flex","justifyContent","MyComponent","useAppSelector","notifications","dispatch","useAppDispatch","palette","usePalette","notification","length","variantStyle","backgroundColor","visible","onDismiss","duration","style","variant","message","colorScheme","httpLink","createHttpLink","uri","Constants","manifest","extra","url","Apollo","children","global","errorLink","useMemo","onError","graphQLErrors","networkError","some","err","extensions","code","snackbarActions","globalActions","locations","path","authLink","setContext","_","headers","accessToken","tokenType","JSON","stringify","client","ApolloClient","link","concat","cache","InMemoryCache","prefixes","Linking","config","screens","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","View","styles","Text","title","TouchableOpacity","onPress","replace","linkText","alignItems","padding","fontSize","fontWeight","marginTop","paddingVertical","color","AuthenticatedRoutes","React","LimboRoutes","UnauthenticatedRoutes","Stack","createStackNavigator","RootNavigator","globalState","Navigator","screenOptions","headerShown","cardStyle","Screen","component","options","Content","fallback","flexGrow","ProgressBar","indeterminate","NavigationContainer","linking","LinkingConfiguration","StatusBar","Notifications","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","Ionicons","font","require","useCachedResources","store","persistor","loading","ActivityIndicator","size","navigator","window","addEventListener","serviceWorker","register","scope","then","catch","console","module","exports","isSearchVisible","searchText","setSearchText","setSearchVisible","setItem","filter","item","checklistItem","checklistValues","loginSlice","signUpSlice","globalSlice","usersActions","usersSlice","notificationSlice","slotForm","planeFormSlice","dropzoneFormSlice","ticketTypeFormSlice","extraFormSlice","loadFormSlice","slotFormSlice","userForm","userFormSlice","dropzoneUserForm","dropzoneUserFormSlice","rigForm","rigFormSlice","rigInspectionForm","rigInspectionFormSlice","persistConfig","storage","Platform","OS","default","AsyncStorage","whitelist","reducer","persistCombineReducers","login","signup","dropzoneForm","planeForm","ticketTypeForm","extraForm","loadForm","usersScreen","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistStore","useDispatch","useSelector"],"mappings":"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","file":"static/js/app.b306258c.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport default createSlice({\n  name: 'notifications',\n  initialState: {\n    queue: []\n  } as INotificationState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n\ninterface IGlobalState {\n  currentUser: User | null;\n  credentials: Credential | null;\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nconst initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  permissions: [],\n  credentials: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone>) => {\n      state.currentDropzone = action.payload;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<Dropzone>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nconst initialState: IPlaneEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IPlaneEditState, action: PayloadAction<Plane>) => {\n      state.original = action.payload;\n      state.fields.hours.value = action.payload.hours!;\n      state.fields.minSlots.value = action.payload.minSlots!;\n      state.fields.maxSlots.value = action.payload.maxSlots!;\n      state.fields.name.value = action.payload.name!;\n      state.fields.registration.value = action.payload.registration!;\n      state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nconst initialState: IExtraEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'ExtraForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IExtraEditState, action: PayloadAction<Extra>) => {\n      state.original = action.payload;\n      state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n      state.fields.cost.value = action.payload.cost;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nconst initialState: ITicketTypeEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'ticketTypeForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ITicketTypeEditState, action: PayloadAction<TicketType>) => {\n      state.original = action.payload;\n      state.fields.altitude.value = action.payload.altitude!;\n      state.fields.cost.value = action.payload.cost!;\n      state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ILoadEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'loadForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ILoadEditState, action: PayloadAction<Load>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IUserEditState = {\n  original: null,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'userForm',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IUserEditState, action: PayloadAction<User>) => {\n      state.original = action.payload;\n      state.federation.value = action.payload.license?.federation!;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"user\"\n  | \"exitWeight\"\n  | \"extras\"\n>;\n\ninterface ISlotEditState {\n  original: Slot | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Slot[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    user: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<Slot>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"credits\"\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneUserEditState = {\n  original: null,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    credits: {\n      value: 0,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'dropzoneUserForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IDropzoneUserEditState, action: PayloadAction<DropzoneUser>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IRigEditState = {\n  original: null,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'rigForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IRigEditState, action: PayloadAction<Rig>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\nconst successColor = \"#00C851\";\nconst errorColor = \"#ff4444\";\nconst warningColor = \"#FF8800\";\nconst infoColor = \"#0099CC\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default MyComponent;","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport React, { useCallback, useMemo } from 'react';\nimport Constants from \"expo-constants\";\nimport { globalActions, snackbarActions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `Session expires`, variant: \"error\" })\n        )\n        dispatch(\n          globalActions.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          dispatch(\n            snackbarActions.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n          )\n        );\n      if (networkError) {\n        dispatch(\n          snackbarActions.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"dz://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nconst AuthenticatedRoutes = React.lazy(() => import('./Authenticated'));\nconst LimboRoutes = React.lazy(() => import('./LimboRoutes'));\nconst UnauthenticatedRoutes = React.lazy(() => import('./Unauthenticated'));\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React, { Suspense } from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator, ProgressBar } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Notifications from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\n\n\n\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  return (\n    <Suspense\n      fallback={() =>\n        <View style={{ flex: 1, flexGrow: 1 }}>\n          <ProgressBar indeterminate color={state?.theme?.colors?.accent} visible />\n        </View>\n      }\n    >\n      <Apollo>\n        <MaterialProvider theme={state.theme}>\n          <SafeAreaProvider>\n            <NavigationContainer\n              linking={LinkingConfiguration}\n              theme={state.theme}>\n              <RootNavigator />\n            </NavigationContainer>\n\n            <StatusBar />\n            <Notifications />\n          </SafeAreaProvider>\n        </MaterialProvider>\n      </Apollo>\n    </Suspense>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","export * from \"./store\";","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nconst initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'usersScreen',\n  initialState,\n  reducers: {\n    \n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, ChecklistValue } from \"../../../graphql/schema\";\n\ntype FieldItem = Pick<ChecklistValue, \"checklistItem\" | \"value\"> & { id?: string | null}\n\n\ninterface IRigInspectionEditState {\n  original: RigInspection | null;\n  fields: FieldItem[],\n}\n\nconst initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'rigInspectionForm',\n  initialState,\n  reducers: {\n    setItem: (state: IRigInspectionEditState, action: PayloadAction<FieldItem>) => {\n      state.fields = [\n        ...state.fields.filter((item) => item.checklistItem.id !== action.payload.checklistItem.id),\n        action.payload\n      ]\n    },\n\n    setOriginal: (state: IRigInspectionEditState, action: PayloadAction<RigInspection>) => {\n      state.original = action.payload;\n      state.fields = action.payload.checklistValues;\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport AsyncStorage from '@react-native-community/async-storage';\n\n\n\nimport { persistStore, persistCombineReducers } from \"redux-persist\";\n\n\nimport globalSlice from \"./global\";\nimport notificationSlice from \"../components/notifications/slice\";\n\nimport loginSlice from \"../screens/unauthenticated/login/slice\";\nimport signUpSlice from \"../screens/unauthenticated/signup/slice\";\nimport usersSlice from \"../screens/authenticated/users/slice\";\nimport dropzoneFormSlice from \"../components/forms/dropzone/slice\";\nimport planeFormSlice from \"../components/forms/plane/slice\";\nimport ticketTypeFormSlice from \"../components/forms/ticket_type/slice\";\nimport extraFormSlice from \"../components/forms/extra/slice\";\nimport loadFormSlice from \"../components/forms/load/slice\";\nimport slotFormSlice from \"../components/forms/slot/slice\";\nimport userFormSlice from \"../components/forms/user/slice\";\nimport dropzoneUserFormSlice from \"../components/forms/dropzone_user/slice\";\nimport rigFormSlice from \"../components/forms/rig/slice\";\nimport rigInspectionFormSlice from \"../components/forms/rig_inspection/slice\";\n\n// Re-export actions:\nexport const { actions: loginActions } = loginSlice;\nexport const { actions: signUpActions } = signUpSlice;\nexport const { actions: globalActions } = globalSlice;\nexport const { actions: usersActions } = usersSlice;\nexport const { actions: snackbarActions } = notificationSlice;\nexport const { actions: planeForm } = planeFormSlice;\nexport const { actions: dropzoneForm } = dropzoneFormSlice;\nexport const { actions: ticketTypeForm } = ticketTypeFormSlice;\nexport const { actions: extraForm } = extraFormSlice;\nexport const { actions: loadForm } = loadFormSlice;\nexport const { actions: slotForm } = slotFormSlice;\nexport const { actions: userForm } = userFormSlice;\nexport const { actions: dropzoneUserForm } = dropzoneUserFormSlice;\nexport const { actions: rigForm } = rigFormSlice;\nexport const { actions: rigInspectionForm } = rigInspectionFormSlice;\n\nconst persistConfig = {\n  key: 'root',\n  storage: Platform.OS === \"web\" ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\n\nconst reducer = persistCombineReducers(persistConfig, {\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    login: loginSlice.reducer,\n    signup: signUpSlice.reducer,\n    dropzoneForm: dropzoneFormSlice.reducer,\n    planeForm: planeFormSlice.reducer,\n    ticketTypeForm: ticketTypeFormSlice.reducer,\n    extraForm: extraFormSlice.reducer,\n    loadForm: loadFormSlice.reducer,\n    slotForm: slotFormSlice.reducer,\n    userForm: userFormSlice.reducer,\n    dropzoneUserForm: dropzoneUserFormSlice.reducer,\n    rigForm: rigFormSlice.reducer,\n    rigInspectionForm: rigInspectionFormSlice.reducer,\n    usersScreen: usersSlice.reducer,\n  });\n\nexport const store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n"],"sourceRoot":""}