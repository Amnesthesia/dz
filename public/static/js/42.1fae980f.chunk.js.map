{"version":3,"sources":["navigation/AppBar.tsx","navigation/tabs/manifest.tsx"],"names":["QUERY_DROPZONES","gql","styles","StyleSheet","create","warning","flexDirection","alignItems","height","width","backgroundColor","justifyContent","paddingHorizontal","AppBar","navigation","previous","scene","useState","dropzoneMenuOpen","setDropzoneMenuOpen","data","useQuery","useAppSelector","state","global","currentDropzone","dispatch","theme","useAppDispatch","hasRig","currentUser","user","rigs","length","hasExitWeight","exitWeight","showSetupWarning","Header","BackAction","onPress","goBack","Content","title","descriptor","options","onDismiss","visible","anchor","style","color","marginRight","name","dropzones","edges","map","edge","Item","node","globalActions","setDropzone","mode","navigate","ManifestScreen","React","LoadScreen","CreateLoadScreen","Manifest","createStackNavigator","ManifestTab","globalState","Navigator","screenOptions","headerShown","credentials","header","props","cardStyle","flex","Screen","component"],"mappings":"2NAQMA,EAAkBC,cAAH,mKA0ErB,IAAMC,EAASC,IAAWC,OAAO,CAC/BC,QAAS,CACPC,cAAe,MACfC,WAAY,SACZC,OAAQ,GACRC,MAAO,OACPC,gBAAiB,UACjBC,eAAgB,gBAChBC,kBAAmB,MAIRC,IAlEf,YAAoE,IAAD,cAAjDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,MAA2B,EACjBC,oBAAS,GADQ,WAC1DC,EAD0D,KACxCC,EADwC,KAEzDC,EAASC,mBAAgBrB,GAAzBoB,KAFyD,EAG9BE,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAAzDC,EAHyD,EAGzDA,gBACFC,GAJ2D,EAGxCC,MACRC,eAEXC,IAAU,MAACJ,GAAD,SAACA,EAAiBK,cAAlB,SAAC,EAA8BC,OAA/B,SAAC,EAAoCC,QAApC,EAA0CC,QACrDC,IAAiB,MAACT,GAAD,SAACA,EAAiBK,cAAlB,SAAC,EAA8BC,QAA9B,EAAoCI,YAEtDC,GAAoBP,IAAWK,EAErC,OACE,oCACA,kBAAC,IAAOG,OAAR,KACGtB,EAAW,kBAAC,IAAOuB,WAAR,CAAmBC,QAASzB,EAAW0B,SAAa,KAChE,kBAAC,IAAOC,QAAR,CAAgBC,MAAO1B,EAAM2B,WAAWC,QAAQF,QAChD,kBAAC,IAAD,CACEG,UAAW,kBAAM1B,GAAoB,IACrC2B,QAAS5B,EACT6B,OACE,kBAAC,IAAD,CACER,QAAS,kBAAMpB,GAAoB,IACnC6B,MAAO,CAAEC,MAAO,QAASC,YAAa,IAFxC,MAIGzB,OAJH,EAIGA,EAAiB0B,OARxB,MAYI/B,GAZJ,SAYIA,EAAMgC,YAZV,SAYI,EAAiBC,YAZrB,EAYI,EAAwBC,KAAI,SAACC,GAAD,aAC1B,kBAAC,IAAKC,KAAN,CACEd,MAAK,MAAEa,GAAF,SAAEA,EAAME,WAAR,EAAE,EAAYN,KACnBZ,QAAS,WACPb,EAASgC,IAAcC,YAAd,MAA0BJ,OAA1B,EAA0BA,EAAME,OACzCtC,GAAoB,WAO9BiB,GACA,kBAAC,IAAD,CAAMY,MAAO9C,EAAOG,SAClB,kBAAC,IAAD,0CAGA,kBAAC,IAAD,CAAQ4C,MAAM,QAAQW,KAAK,WAAWrB,QAAS,kBAAMzB,EAAW+C,SAAS,aAAzE,qB,iCCzER,oFAIMC,EAAiBC,QAAW,kBAAM,uEAClCC,EAAaD,QAAW,kBAAM,wDAC9BE,EAAmBF,QAAW,kBAAM,wDAUpCG,EAAWC,cAEF,SAASC,IACtB,IAAMC,EAAc/C,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAClD,OACE,gBAAC0C,EAASI,UAAV,CACEC,cAAe,CACbC,eAAgBH,EAAYI,cAAeJ,EAAY5C,iBACvDiD,OAAQ,SAACC,GAAD,OAAW,gBAAC,IAAWA,IAC/BC,UAAW,CACTC,KAAM,KAIV,gBAACX,EAASY,OAAV,CAAiB3B,KAAK,iBAAiB4B,UAAWjB,EAAgBlB,QAAS,CAAEF,MAAO,cACpF,gBAACwB,EAASY,OAAV,CAAiB3B,KAAK,aAAa4B,UAAWf,EAAYpB,QAAS,CAAEF,MAAO,WAC5E,gBAACwB,EAASY,OAAV,CAAiB3B,KAAK,mBAAmB4B,UAAWd,EAAkBrB,QAAS,CAAEF,MAAO","file":"static/js/42.1fae980f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Appbar, Menu, Paragraph, Text, Button } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Dropzone, Query } from \"../graphql/schema\";\nimport { globalActions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { View, StyleSheet } from \"react-native\";\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzonesCompact {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\ninterface IAppBar extends StackHeaderProps {\n  searchEnabled: boolean;\n  searchVisible: boolean;\n  setSearchVisible(visible: boolean): void;\n}\n\n\nfunction AppBar({ navigation, previous, scene }: StackHeaderProps) {\n  const [dropzoneMenuOpen, setDropzoneMenuOpen] = useState(false);\n  const { data } = useQuery<Query>(QUERY_DROPZONES);\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  const hasRig = !!currentDropzone?.currentUser?.user?.rigs?.length;\n  const hasExitWeight = !!currentDropzone?.currentUser?.user?.exitWeight;\n\n  const showSetupWarning = !hasRig || !hasExitWeight;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} />\n      <Menu\n        onDismiss={() => setDropzoneMenuOpen(false)}\n        visible={dropzoneMenuOpen}\n        anchor={\n          <Text\n            onPress={() => setDropzoneMenuOpen(true)}\n            style={{ color: \"white\", marginRight: 8 }}\n          >\n            {currentDropzone?.name}\n          </Text>\n      }>\n        {\n          data?.dropzones?.edges?.map((edge) =>\n            <Menu.Item\n              title={edge?.node?.name}\n              onPress={() => {\n                dispatch(globalActions.setDropzone(edge?.node as Dropzone));\n                setDropzoneMenuOpen(false);\n              }}\n            />\n          )\n        }\n      </Menu>\n    </Appbar.Header>\n    { showSetupWarning && (\n      <View style={styles.warning}>\n        <Paragraph>\n          You need to complete your profile\n        </Paragraph>\n        <Button color=\"black\" mode=\"outlined\" onPress={() => navigation.navigate(\"Profile\")}>\n          Take me there\n        </Button>\n      </View>\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { useAppSelector } from '../../redux';\n\nconst ManifestScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestScreen'));\nconst LoadScreen = React.lazy(() => import('../../screens/authenticated/load/LoadScreen'));\nconst CreateLoadScreen = React.lazy(() => import('../../screens/authenticated/load/CreateLoadScreen'));\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  LoadScreen: undefined;\n  CreateLoadScreen: undefined;\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Loads\" }}/>\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n    </Manifest.Navigator>\n  );\n}\n"],"sourceRoot":""}