{"version":3,"sources":["redux/global.ts","components/notifications/slice.ts","screens/unauthenticated/login/slice.ts","screens/unauthenticated/signup/slice.ts","components/forms/dropzone/slice.tsx","components/forms/plane/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","components/forms/slot/slice.tsx","components/forms/user/slice.tsx","components/forms/rig/slice.tsx","redux/store.ts","graphql/Apollo.tsx","constants/Colors.ts","hooks/usePalette.ts","components/notifications/Notifications.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","components/JumpTypeSelect.tsx","components/TicketTypeSelect.tsx","hooks/useRestriction.ts","components/RigSelect.tsx","components/forms/slot/SlotForm.tsx","components/dialogs/ManifestUserDialog.tsx","components/Themed.tsx","components/NoResults.tsx","screens/authenticated/manifest/GetStarted.tsx","components/GcaChip.tsx","components/LoadMasterChip.tsx","components/PilotChip.tsx","components/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","screens/authenticated/manifest/ManifestScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/authenticated/load/LoadScreen.tsx","components/notifications/index.ts","components/PlaneSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","graphql/createQuery.tsx","components/DropzoneUserSelect.tsx","components/forms/load/LoadForm.tsx","screens/authenticated/load/CreateLoadScreen.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","screens/authenticated/packing/PackingScreen.tsx","navigation/tabs/packing.tsx","components/DatePicker.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/RigDialog.tsx","components/ScrollableScreen.tsx","screens/authenticated/profile/ProfileScreen.tsx","screens/authenticated/rig/RigScreen.tsx","components/LicenseSelect.tsx","components/FederationSelect.tsx","components/forms/user/UserForm.tsx","screens/authenticated/profile/UpdateUserScreen.tsx","navigation/tabs/profile.tsx","screens/authenticated/settings/SettingsScreen.tsx","screens/authenticated/settings/DropzoneSettingsScreen.tsx","screens/authenticated/ticket_types/TicketTypesScreen.tsx","components/forms/plane/PlaneForm.tsx","screens/authenticated/planes/CreatePlaneScreen.tsx","screens/authenticated/planes/UpdatePlaneScreen.tsx","components/forms/dropzone/DropzoneForm.tsx","screens/authenticated/dropzones/UpdateDropzoneScreen.tsx","screens/authenticated/planes/PlanesScreen.tsx","components/forms/ticket_type/TicketTypeForm.tsx","screens/authenticated/ticket_types/CreateTicketTypeScreen.tsx","screens/authenticated/ticket_types/UpdateTicketTypeScreen.tsx","components/forms/extra/ExtraForm.tsx","screens/authenticated/extras/CreateExtraScreen.tsx","screens/authenticated/extras/UpdateExtraScreen.tsx","screens/authenticated/extras/ExtrasScreen.tsx","navigation/tabs/settings.tsx","screens/authenticated/users/UsersScreen.tsx","screens/authenticated/profile/UserProfileScreen.tsx","screens/authenticated/rig/UserRigScreen.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/createMutation.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","colors","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","initialState","currentUser","currentDropzone","permissions","credentials","theme","isDarkMode","createSlice","name","reducers","setCredentials","state","action","payload","setUser","setPermissions","setPrimaryColor","primary","setAccentColor","accent","setDropzone","primaryColor","secondaryColor","toggleDarkMode","logout","key","typedKey","queue","hideSnackbar","shift","showSnackbar","push","fields","email","value","error","password","setEmail","setPassword","setEmailError","setPasswordError","reset","federation","passwordConfirmation","exitWeight","phone","license","setFederation","setField","field","setFieldError","original","banner","isCreditSystemEnabled","isPublic","setOriginal","registration","minSlots","maxSlots","hours","nextMaintenanceHours","cost","altitude","allowManifestingSelf","extraIds","ticketTypeIds","ticketTypes","map","id","Number","gca","dispatchAt","isOpen","loadMaster","pilot","plane","jumpType","extras","load","rig","ticketType","user","rigs","make","model","serial","repackExpiresAt","canopySize","globalActions","loginSlice","actions","signUpSlice","globalSlice","snackbarActions","notificationSlice","slotForm","planeFormSlice","dropzoneFormSlice","ticketTypeFormSlice","extraFormSlice","loadFormSlice","slotFormSlice","userForm","userFormSlice","rigForm","rigFormSlice","persistConfig","storage","Platform","OS","MMKV","whitelist","console","log","localStorage","reducer","persistCombineReducers","global","notifications","login","signup","dropzoneForm","planeForm","ticketTypeForm","extraForm","loadForm","store","configureStore","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","httpLink","createHttpLink","uri","Apollo","children","dispatch","errorLink","useMemo","onError","graphQLErrors","networkError","message","locations","path","variant","statusCode","authLink","setContext","_","headers","accessToken","tokenType","JSON","stringify","client","ApolloClient","link","concat","cache","InMemoryCache","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","usePalette","slice","MyComponent","StyleSheet","create","container","flex","justifyContent","palette","notification","length","variantStyle","backgroundColor","Snackbar","visible","onDismiss","style","prefixes","Linking","config","screens","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","View","styles","Text","title","TouchableOpacity","onPress","replace","linkText","alignItems","padding","fontSize","fontWeight","marginTop","paddingVertical","color","QUERY_JUMP_TYPES","gql","JumpTypeSelect","props","useState","isMenuOpen","setMenuOpen","useQuery","variables","allowedForUserId","userId","data","loading","refetch","Subheader","Menu","anchor","Item","description","required","jumpTypes","onSelect","QUERY_TICKET_TYPES","TicketTypeSelect","globalState","dropzoneId","QUERY_PERMISSIONS","useRestriction","permission","fetchPolicy","dropzone","includes","QUERY_RIGS","RigSelect","left","Icon","icon","SlotForm","React","isEdit","allowedToManifestOthers","ScrollView","contentContainerStyle","flexGrow","HelperText","type","horizontal","ticketAddons","extra","Chip","selected","some","filter","Divider","TextInput","mode","label","toString","keyboardType","right","Affix","onChangeText","newValue","marginBottom","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","useCallback","hasErrors","onManifest","a","async","jumpTypeId","loadId","rigId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","open","ProgressBar","indeterminate","Title","Content","Actions","Button","onClose","useThemeColor","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","NoResults","subtitle","empty","Paragraph","textAlign","display","fab","position","margin","bottom","width","height","GetStarted","hasPlanes","hasTicketTypes","separator","marginVertical","QUERY_DROPZONE_USERS","GCAChip","marginHorizontal","dropzoneUsers","edges","edge","node","LoadMasterChip","allowed","slots","slot","PilotChip","QUERY_PLANES","PlaneChip","planes","QUERY_LOAD","MUTATION_UPDATE_LOAD","LoadCard","isExpanded","setExpanded","useNavigation","loadNumber","canManifest","mutationUpdateLoad","mutation","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","canEditSelf","canEditOthers","getSlotPressAction","onSlotPress","Card","elevation","undefined","overflow","flexDirection","DataTable","Header","Row","numeric","Cell","Array","from","v","i","disabled","QUERY_DROPZONE","ManifestScreen","isDialogOpen","setDialogOpen","isSetupComplete","canCreateLoad","Dimensions","get","loads","numColumns","refreshing","onRefresh","renderItem","item","index","isFull","FAB","small","navigate","MonoText","fontFamily","EditScreenInfo","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","developmentModeText","lineHeight","contentContainer","paddingTop","welcomeContainer","welcomeImage","resizeMode","marginLeft","codeHighlightText","borderRadius","paddingHorizontal","PlaneSelect","createQuery","query","options","getPayload","opts","previousData","transformedData","useEffect","showSnackbarErrors","DropzoneUserSelect","useQueryDropzoneUsers","requiredPermissions","role","LoadForm","Checkbox","status","dzUser","MUTATION_CREATE_LOAD","CreateLoadScreen","mutationCreateLoad","hasError","onSave","createLoad","snackbar","goBack","QUERY_DROPZONES","AppBar","previous","scene","dropzoneMenuOpen","setDropzoneMenuOpen","hasRig","hasExitWeight","showSetupWarning","Appbar","BackAction","descriptor","marginRight","dropzones","Manifest","createStackNavigator","ManifestTab","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","Packing","PackingTab","DatePicker","setOpen","date","onChange","getTime","timestamp","format","selectedDays","Date","onDayClick","RigForm","time","MUTATION_CREATE_RIG","MUTATION_UPDATE_RIG","RigDialog","mutationCreateRig","createData","mutationUpdateRig","updateData","response","updateRig","createRig","ScrollableScreen","setHeight","addEventListener","window","removeEventListener","content","QUERY_DROPZONE_USER","rigDialogOpen","setRigDialogOpen","getRigPressAction","card","credits","paddingBottom","spacer","RigScreen","QUERY_LICENSES","LicenseSelect","federationId","licenses","QUERY_FEDERATIONS","FederationSelect","federations","MUTATION_CREATE_USER","UpdateUserScreen","useRoute","params","mutationUpdateUser","emailRegex","RegExp","test","licenseId","parseFloat","updateUser","Profile","ProfileTab","SettingsScreen","Section","DropzoneSettingsScreen","QUERY_TICKET_TYPE","MUTATION_UPDATE_TICKET_TYPE","TicketTypesScreen","route","mutationUpdateTicketType","refreshControl","RefreshControl","Switch","onValueChange","DropzoneForm","placeholder","MUTATION_CREATE_PLANE","CreatePlaneScreen","mutationCreatePlane","createPlane","UpdatePlaneScreen","mutationUpdatePlane","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","onPickImage","getDocumentAsync","multiple","onColorSelected","sliderComponent","SliderComponent","defaultColor","hideSliders","current","next","maxHeight","Cover","source","subheader","paddingLeft","MUTATION_UPDATE_DROPZONE","UpdateDropzoneScreen","mutationUpdateDropzone","updateDropzone","PlanesScreen","FlatList","ListEmptyComponent","QUERY_EXTRAS","TicketTypeForm","altitudeMenuOpen","setAltitudeMenuOpen","xor","MUTATION_CREATE_TICKET_TYPE","CreateTicketTypeScreen","mutationCreateTicketType","createTicketType","UpdateTicketTypeScreen","updateTicketType","ExtraForm","ticket","MUTATION_CREATE_extra","CreateExtraScreen","mutationCreateExtra","createExtra","MUTATION_UPDATE_EXTRA","UpdateExtraScreen","mutationUpdateExtra","updateExtra","ExtrasScreen","Settings","SettingsTab","TicketTypeSettingsScreen","UsersScreen","UserProfileScreen","UserRigScreen","BottomTab","createMaterialBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","canCreatePacks","canManageDropzone","initialRouteName","tabBarIcon","UsersTab","isRequired","pattern","validates","callback","createMutation","fieldErrorMap","onFieldError","mutate","Object","keys","forEach","x","variable","validator","fieldName","createDropzone","SignupScreen","useMutationCreateDropzone","e","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","userLogin","authenticatable","secureTextEntry","button","userSignUp","useMutationSignUp","onSignUp","Boolean","textContentType","passwordRules","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","NavigationContainer","linking","LinkingConfiguration","StatusBar","Notifications","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","require","warn","useCachedResources","ActivityIndicator","size","module","exports"],"mappings":"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","file":"static/js/app.7fab1410.chunk.js","sourcesContent":["import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n\ninterface IGlobalState {\n  currentUser: User | null;\n  credentials: Credential | null;\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nconst initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  permissions: [],\n  credentials: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone>) => {\n      state.currentDropzone = action.payload;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport default createSlice({\n  name: 'notifications',\n  initialState: {\n    queue: []\n  } as INotificationState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue.shift();\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nconst initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IDropzoneEditState = {\n  original: null,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOriginal: (state: IDropzoneEditState, action: PayloadAction<Dropzone>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nconst initialState: IPlaneEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IPlaneEditState, action: PayloadAction<Plane>) => {\n      state.original = action.payload;\n      state.fields.hours.value = action.payload.hours!;\n      state.fields.minSlots.value = action.payload.minSlots!;\n      state.fields.maxSlots.value = action.payload.maxSlots!;\n      state.fields.name.value = action.payload.name!;\n      state.fields.registration.value = action.payload.registration!;\n      state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema\";\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    altitude: {\n      value: number;\n      error: string | null;\n    },\n    allowManifestingSelf: {\n      value: boolean;\n      error: string | null;\n    },\n    extraIds: {\n      value: number[];\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ITicketTypeEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    extraIds: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'ticketTypeForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ITicketTypeEditState, action: PayloadAction<TicketType>) => {\n      state.original = action.payload;\n      state.fields.altitude.value = action.payload.altitude!;\n      state.fields.cost.value = action.payload.cost!;\n      state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nconst initialState: IExtraEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'ExtraForm',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IExtraEditState, action: PayloadAction<Extra>) => {\n      state.original = action.payload;\n      state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n      state.fields.cost.value = action.payload.cost;\n      state.fields.name.value = action.payload.name!;\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ILoadEditState = {\n  original: null,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'loadForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ILoadEditState, action: PayloadAction<Load>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"user\"\n  | \"exitWeight\"\n  | \"extras\"\n>;\n\ninterface ISlotEditState {\n  original: Slot | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Slot[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: ISlotEditState = {\n  original: null,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    user: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'slotForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: ISlotEditState, action: PayloadAction<Slot>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IUserEditState = {\n  original: null,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'userForm',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IUserEditState, action: PayloadAction<User>) => {\n      state.original = action.payload;\n      state.federation.value = action.payload.license?.federation!;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nconst initialState: IRigEditState = {\n  original: null,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'rigForm',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOriginal: (state: IRigEditState, action: PayloadAction<Rig>) => {\n      state.original = action.payload;\n      for (const key in action.payload) {\n        if (key in state.fields) {\n          const typedKey = key as keyof typeof initialState[\"fields\"];\n          state.fields[typedKey].value = action.payload[typedKey];\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport MMKV from \"react-native-mmkv-storage\";\nimport { persistStore, persistCombineReducers } from \"redux-persist\";\n\nimport globalSlice from \"./global\";\nimport storage from 'redux-persist/lib/storage'\nimport { Platform } from \"react-native\";\nimport notificationSlice from \"../components/notifications/slice\";\n\nimport loginSlice from \"../screens/unauthenticated/login/slice\";\nimport signUpSlice from \"../screens/unauthenticated/signup/slice\";\nimport dropzoneFormSlice from \"../components/forms/dropzone/slice\";\nimport planeFormSlice from \"../components/forms/plane/slice\";\nimport ticketTypeFormSlice from \"../components/forms/ticket_type/slice\";\nimport extraFormSlice from \"../components/forms/extra/slice\";\nimport loadFormSlice from \"../components/forms/load/slice\";\nimport slotFormSlice from \"../components/forms/slot/slice\";\nimport userFormSlice from \"../components/forms/user/slice\";\nimport rigFormSlice from \"../components/forms/rig/slice\";\n\n// Re-export actions:\nexport const { actions: loginActions } = loginSlice;\nexport const { actions: signUpActions } = signUpSlice;\nexport const { actions: globalActions } = globalSlice;\nexport const { actions: snackbarActions } = notificationSlice;\nexport const { actions: planeForm } = planeFormSlice;\nexport const { actions: dropzoneForm } = dropzoneFormSlice;\nexport const { actions: ticketTypeForm } = ticketTypeFormSlice;\nexport const { actions: extraForm } = extraFormSlice;\nexport const { actions: loadForm } = loadFormSlice;\nexport const { actions: slotForm } = slotFormSlice;\nexport const { actions: userForm } = userFormSlice;\nexport const { actions: rigForm } = rigFormSlice;\n\nconst persistConfig = {\n  key: 'root',\n  storage: Platform.OS === \"web\" ? storage : MMKV(),\n  whitelist: [\"global\", \"notifications\"],\n};\n\nconsole.log({ localStorage, MMKV });\n\nconst reducer = persistCombineReducers(persistConfig, {\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    login: loginSlice.reducer,\n    signup: signUpSlice.reducer,\n    dropzoneForm: dropzoneFormSlice.reducer,\n    planeForm: planeFormSlice.reducer,\n    ticketTypeForm: ticketTypeFormSlice.reducer,\n    extraForm: extraFormSlice.reducer,\n    loadForm: loadFormSlice.reducer,\n    slotForm: slotFormSlice.reducer,\n    userForm: userFormSlice.reducer,\n    rigForm: rigFormSlice.reducer,\n  });\n\nexport const store = configureStore({\n  reducer\n});\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport React, { useCallback, useMemo } from 'react';\nimport { globalActions, snackbarActions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: 'http://127.0.0.1:3000/graphql',\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.map(({ message, locations, path }) =>\n        dispatch(\n          snackbarActions.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n        )\n      );\n    if (networkError) {\n      dispatch(\n        snackbarActions.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n      )\n    }\n\n    if (\n      networkError &&\n      networkError.name ==='ServerError' &&\n      (networkError as ServerError).statusCode === 401\n    ) {\n      dispatch(\n        globalActions.logout()\n      );\n    }\n  }),\n  [dispatch]);\n\n  const authLink = useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\nconst successColor = \"#00C851\";\nconst errorColor = \"#ff4444\";\nconst warningColor = \"#FF8800\";\nconst infoColor = \"#0099CC\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n  },\n});\n\nexport default MyComponent;","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"dz://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { JumpType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nconst QUERY_JUMP_TYPES = gql`\n  query JumpTypes($allowedForUserId: Int) {\n    jumpTypes(allowedForUserId: $allowedForUserId) {\n      id\n      name\n    }\n  }\n`;\n\nexport default function JumpTypeSelect(props: IJumpTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_JUMP_TYPES, {\n    variables: {\n      allowedForUserId: props.userId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      Jump type\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select jump type\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.jumpTypes?.map((jumpType) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(jumpType);\n            }}\n            title={\n              jumpType.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { TicketType, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  allowManifestingSelf?: boolean | null;\n  onSelect(jt: TicketType): void;\n}\n\nconst QUERY_TICKET_TYPES = gql`\n  query TicketTypes($allowManifestingSelf: Boolean, $dropzoneId: Int!) {\n    ticketTypes(allowManifestingSelf: $allowManifestingSelf, dropzoneId: $dropzoneId) {\n      id\n      name\n\n      extras {\n        id\n        name\n        cost\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeSelect(props: ITicketTypeSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      allowManifestingSelf: props.allowManifestingSelf,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.name || \"Please select ticket type\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.ticketTypes?.map((ticketType) => \n            <List.Item\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(ticketType);\n              }}\n              title={\n                ticketType.name || \"-\"\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { useAppSelector } from \"../redux\";\n\nconst QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: string): boolean {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  return data?.dropzone?.currentUser?.permissions?.includes(permission as any) || false;\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Rig, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryRigs(\n    $dropzoneId: Int\n    $userId: Int\n  ) {\n    rigs(dropzoneId: $dropzoneId, userId: $userId) {\n      id\n      make\n      model\n      canopySize\n      serial\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_RIGS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.rigs?.map((rig) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            title={\n              `${props.value?.make} ${props.value?.model}`\n            }\n            description={\n              `${props.value?.canopySize} sqft`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport JumpTypeSelect from '../../JumpTypeSelect';\nimport TicketTypeSelect from '../../TicketTypeSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../RigSelect';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.slotForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.fields.user?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", Number(state.fields.user.value.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.user.value.rigs?.length) {\n        dispatch(\n          actions.setField([\"rig\", state.fields.user.value.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.user?.value?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.fields?.user?.value?.id === globalState.currentUser?.id;\n\n  \n  const allowedToManifestSelf = useRestriction(\n    isEdit ? \"updateSlot\" : \"createSlot\"\n  );\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? \"updateUserSlot\" : \"createUserSlot\"\n  )\n  console.log(\"Fields\", state.fields);\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ flexGrow: 1}}>\n      \n      <JumpTypeSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.user?.value?.id) || null}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeSelect\n        value={state.fields.ticketType.value}\n        required\n        allowManifestingSelf={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        state?.fields?.ticketType?.value?.extras?.length && (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <Divider />\n      <RigSelect\n        value={state.fields.rig.value}\n        userId={Number(state.fields.user?.value?.id)}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        onSelect={(value) => dispatch(actions.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { slotForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport SlotForm from \"../forms/slot/SlotForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $userId: Int\n    $exitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          userId: $userId\n          exitWeight: $exitWeight\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            ticketType {\n              id\n              name\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.slotForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        slotForm.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          userId: Number(state.fields.user?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(slotForm.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(slotForm.setFieldError([\"load\", message]));\n          case \"ticket_type\":\n            return dispatch(slotForm.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(slotForm.setFieldError([\"rig\", message]));\n          case \"user\":\n            return dispatch(slotForm.setFieldError([\"user\", message]));\n          case \"exit_weight\":\n            return dispatch(slotForm.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.user?.value?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <SlotForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(slotForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { Slot, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  slots: Slot[];\n  onSelect(user: User): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"parachute\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.user as User);\n            }}\n            title={\n              slot?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { values } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query, User } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: User | null;\n  onSelect(user: User): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane-takeoff\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node?.user as User);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { Chip, List, Menu } from \"react-native-paper\";\nimport { DropzoneUser, Plane, Query } from \"../graphql/schema\";\nimport useRestriction from \"../hooks/useRestriction\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneChipSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  const allowed = useRestriction(\"updateLoad\");\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { ScrollView } from 'react-native';\nimport { Button, Card, Chip, DataTable, ProgressBar, TouchableRipple } from 'react-native-paper';\nimport GCAChip from '../../../components/GcaChip';\nimport LoadMasterChip from '../../../components/LoadMasterChip';\nimport PilotChip from '../../../components/PilotChip';\nimport PlaneChip from '../../../components/PlaneChip';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Plane, Slot } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { useAppSelector } from '../../../redux';\n\ninterface ILoadCard {\n  load: Load;\n  loadNumber: number;\n  canManifest: boolean;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nconst QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        user {\n          id\n          name\n        }\n        ticketType {\n          id\n          name\n          altitude\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const [isExpanded, setExpanded] = React.useState(false);\n\n  const navigation = useNavigation();\n  const { load, loadNumber, onManifest, canManifest } = props;\n  const { data, loading } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const updatePilot = React.useCallback(async (pilot: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: User) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const canEditSelf = useRestriction(\"updateSlot\");\n  const canEditOthers = useRestriction(\"updateUserSlot\");\n\n  const getSlotPressAction = React.useCallback((slot: Slot) => {\n\n    if (slot?.user?.id !== state.currentUser?.id && !canEditOthers) {\n      return;\n    }\n    return () => {\n      if (slot.user?.id === state.currentUser?.id) {\n        if (canEditSelf) {\n          props.onSlotPress(slot);\n        }\n      } else if (canEditOthers) {\n        props.onSlotPress(slot);\n      }\n    }\n  }, [JSON.stringify(load), canEditOthers, props.onSlotPress]);\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  \n\n  return (\n  <Card style={{ marginVertical: 16 }} elevation={3}>\n    <Card.Title\n      title={`Load ${loadNumber}`}\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal>\n          <PlaneChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.plane}\n            onSelect={updatePlane}\n          />\n          <GCAChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.gca?.user}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.pilot?.user}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            dropzoneId={Number(state.currentDropzone?.id)}\n            value={data?.load?.loadMaster?.user}\n            slots={load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Row style={{ width: \"100%\"}}>\n            <DataTable.Title>Name</DataTable.Title>\n            <DataTable.Title numeric>Exit weight</DataTable.Title>\n            <DataTable.Title numeric>Jump type</DataTable.Title>\n            <DataTable.Title numeric>Altitude</DataTable.Title>\n          </DataTable.Row>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              \n              return (\n                <DataTable.Row onPress={getSlotPressAction(slot)}>\n                  <DataTable.Cell onPress={getSlotPressAction(slot)}>{slot?.user?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric onPress={getSlotPressAction(slot)}>{slot?.exitWeight}</DataTable.Cell>\n                  <DataTable.Cell numeric onPress={getSlotPressAction(slot)}>{slot?.jumpType?.name}</DataTable.Cell>\n                  <DataTable.Cell numeric onPress={getSlotPressAction(slot)}>{slot?.ticketType?.altitude}</DataTable.Cell>\n                </DataTable.Row>\n              )\n            })\n          }\n          {\n            Array.from({length: (load?.maxSlots || 0) - (load?.slots?.length || 0)}, (v, i) => i).map(() =>\n            <DataTable.Row>\n              <DataTable.Cell>- Available -</DataTable.Cell>\n              <DataTable.Cell numeric>-</DataTable.Cell>\n              <DataTable.Cell numeric>-</DataTable.Cell>\n              <DataTable.Cell numeric>-</DataTable.Cell>\n            </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n      { data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n        <Button onPress={() => setExpanded(!isExpanded)}>\n          { isExpanded ? \"Show less\" : \"Show more\" }\n        </Button>\n      }\n      <Button mode=\"contained\" onPress={() => onManifest()} disabled={!canManifest}>\n        Manifest\n      </Button>\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import { useQuery } from '@apollo/client';\nimport { useNavigation } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserDialog from '../../../components/dialogs/ManifestUserDialog';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { globalActions, slotForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\n\nconst QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const slotState = useAppSelector(state => state.slotForm);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    },\n    fetchPolicy: \"no-cache\"\n  });\n\n  \n\n  const navigation = useNavigation();\n\n  const hasPlanes = !!data?.dropzone?.planes?.length;\n  const hasTicketTypes = !!data?.dropzone?.ticketTypes?.length;\n  const isPublic = !!data?.dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (data?.dropzone?.id) {\n      dispatch(globalActions.setDropzone(data.dropzone));\n    \n      dispatch(\n        globalActions.setUser({\n          ...state?.currentUser,\n          ...(data?.dropzone?.currentUser.user || {})\n        })\n      );\n    }\n  }, [JSON.stringify(data?.dropzone)]);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.primaryColor && data?.dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.primaryColor));\n    }\n\n    if (data?.dropzone?.secondaryColor && data?.dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(globalActions.setPrimaryColor(data.dropzone.secondaryColor));\n    }\n  }, [\n    data?.dropzone?.primaryColor,\n    data?.dropzone?.secondaryColor\n  ])\n\n  const allowed = useRestriction(\"createSlot\");\n  const canCreateLoad = useRestriction(\"createLoad\");\n\n  return (\n    <>\n    \n    <ManifestUserDialog\n      open={isDialogOpen}\n      onClose={() => setDialogOpen(false)}\n      onSuccess={() => setDialogOpen(false)}\n    />\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (data?.dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={1}\n                        data={data?.dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              canManifest={allowed && edge?.node?.isOpen && !edge?.node?.isFull}\n                              loadNumber={(data?.dropzone?.loads?.edges?.length || 0) - index}\n                              onSlotPress={(slot) => {\n                                dispatch(slotForm.setOriginal(slot));\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                              onManifest={() => {\n                                dispatch(\n                                  slotForm.setField([\"user\", state.currentUser])\n                                );\n                                dispatch(\n                                  slotForm.setField([\"load\", edge.node!])\n                                );\n                                setDialogOpen(true);\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => navigation.navigate(\"CreateLoadScreen\")}\n            label=\"New load\"\n          />\n        )}\n      </View>\n      {/* <BottomSheet\n        ref={bottomSheetRef}\n        snapPoints={[300, 0]}\n        borderRadius={10}\n        renderContent={() =>\n          !slotState?.original ? null : (\n            <View\n              style={{\n                backgroundColor: 'white',\n                padding: 16,\n                height: 300\n              }}\n            >\n              <Button>\n                Edit slot\n              </Button>\n              <Button>\n                Delete slot\n              </Button>\n            </View>\n          )\n        }\n      /> */}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function LoadScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/LoadScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Plane, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IPlaneSelect {\n  dropzoneId: number;\n  value?: Plane | null;\n  required?: boolean;\n  onSelect(plane: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneSelect(props: IPlaneSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n    }\n  });\n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"No plane selected\"\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"airplane\" />}\n        />\n      }>\n      {\n        data?.planes?.map((plane) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane);\n            }}\n            title={\n              plane.name || \"-\"\n            }\n            description={\n              plane.registration\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { FieldError, Query } from \"../graphql/schema\";\nimport { snackbarActions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends {}, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            snackbarActions.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        onError!(error.message);\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import React, { useState } from \"react\";\nimport { List, Menu, Title } from \"react-native-paper\";\nimport useQueryDropzoneUsers from \"../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\ninterface IDropzoneUserSelect {\n  dropzoneId: number;\n  requiredPermissions: string[];\n  value: DropzoneUser | null;\n  required?: boolean;\n  label: string;\n  onSelect(dzUser: DropzoneUser): void;\n}\n\n\n\n\nexport default function DropzoneUserSelect(props: IDropzoneUserSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id),\n      permissions: props.requiredPermissions\n    }\n  });\n\n  return (\n    <>\n      <Title>{props.label}</Title>\n      <Menu\n        onDismiss={() => setMenuOpen(false)}\n        visible={isMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setMenuOpen(true);\n            }}\n            title={\n              props.value?.user?.id ? props.value?.user.name : \"No user selected\"\n            }\n            description={!props.required ? \"Optional\" : null}\n          />\n        }>\n        {\n          data?.edges?.map((edge) => \n            <List.Item\n              onPress={() => {\n                setMenuOpen(false);\n                props.onSelect(edge?.node as DropzoneUser);\n              }}\n              title={\n                edge?.node?.user?.name || \"-\"\n              }\n              description={\n                edge?.node?.role?.name || null\n              }\n            />\n          )\n        }\n      </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport PlaneSelect from '../../PlaneSelect';\nimport DropzoneUserSelect from '../../DropzoneUserSelect';\n\nconst { actions } = slice;\n\n\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.loadForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingTop: 200 }}>\n      \n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <PlaneSelect\n        value={state.fields.plane.value}\n        onSelect={(value) => {\n          dispatch(actions.setField([\"plane\", value]));\n          dispatch(actions.setField([\"maxSlots\", value.maxSlots]));\n        }}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n      />\n      <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n        { state.fields.plane.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.value}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n\n      \n      <Checkbox.Item\n        label=\"Allow public manifesting\"\n        status={!!state.fields.isOpen.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"isOpen\", !state.fields.isOpen.value]))\n        }\n      />\n\n      <Divider />\n      <DropzoneUserSelect\n        label=\"GCA\"\n        onSelect={dzUser => dispatch(actions.setField([\"gca\", dzUser]))}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        value={state.fields.gca.value || null}\n        requiredPermissions={[\"actAsGCA\"]}\n        required\n      />\n      <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n        { state.fields.gca.error || \"\" }\n      </HelperText>\n      \n      <DropzoneUserSelect\n        label=\"Pilot\"\n        onSelect={dzUser => dispatch(actions.setField([\"pilot\", dzUser]))}\n        dropzoneId={Number(globalState.currentDropzone?.id)}\n        value={state.fields.pilot.value || null}\n        requiredPermissions={[\"actAsPilot\"]}\n      />\n      <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n        { state.fields.pilot.error || \"\" }\n      </HelperText>\n\n      \n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\nimport { useNavigation } from '@react-navigation/core';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/load/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport LoadForm from '../../../components/forms/load/LoadForm';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n    }\n  }\n`;\n\nexport default function CreateLoadScreen() {\n  const { loadForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateLoad, data] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(plane.value?.id) : null,\n            gcaId: gca.value?.id ? Number(gca.value?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <View style={styles.container}>\n        <LoadForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useState } from \"react\";\nimport { Appbar, Menu, Paragraph, Text, Button } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Dropzone, Query } from \"../graphql/schema\";\nimport { globalActions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { View, StyleSheet } from \"react-native\";\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzonesCompact {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\n\nfunction AppBar({ navigation, previous, scene }: StackHeaderProps) {\n  const [dropzoneMenuOpen, setDropzoneMenuOpen] = useState(false);\n  const { data } = useQuery<Query>(QUERY_DROPZONES);\n  const { currentDropzone, theme } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  \n  const hasRig = !!currentDropzone?.currentUser?.user?.rigs?.length;\n  const hasExitWeight = !!currentDropzone?.currentUser?.user?.exitWeight;\n\n  const showSetupWarning = !hasRig || !hasExitWeight;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} />\n      <Menu\n        onDismiss={() => setDropzoneMenuOpen(false)}\n        visible={dropzoneMenuOpen}\n        anchor={\n          <Text\n            onPress={() => setDropzoneMenuOpen(true)}\n            style={{ color: \"white\", marginRight: 8 }}\n          >\n            {currentDropzone?.name}\n          </Text>\n      }>\n        {\n          data?.dropzones?.edges?.map((edge) =>\n            <Menu.Item\n              title={edge?.node?.name}\n              onPress={() => {\n                dispatch(globalActions.setDropzone(edge?.node as Dropzone));\n                setDropzoneMenuOpen(false);\n              }}\n            />\n          )\n        }\n      </Menu>\n    </Appbar.Header>\n    { showSetupWarning && (\n      <View style={styles.warning}>\n        <Paragraph>\n          You need to complete your profile\n        </Paragraph>\n        <Button color=\"black\" mode=\"outlined\" onPress={() => navigation.navigate(\"Profile\")}>\n          Take me there\n        </Button>\n      </View>\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { useAppSelector } from '../../redux';\n\nimport ManifestScreen from '../../screens/authenticated/manifest/ManifestScreen';\nimport LoadScreen from '../../screens/authenticated/load/LoadScreen';\nimport CreateLoadScreen from '../../screens/authenticated/load/CreateLoadScreen';\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  LoadScreen: undefined;\n  CreateLoadScreen: undefined;\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Loads\" }}/>\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function PackingScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/PackingScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport PackingScreen from '../../screens/authenticated/packing/PackingScreen';\n\nexport type IPackingTabParams = {\n  PackingScreen: undefined;\n}\n\nconst Packing = createStackNavigator<IPackingTabParams>();\n\nexport default function PackingTab() {\n  return (\n    <Packing.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Packing.Screen name=\"PackingScreen\" component={PackingScreen} />\n    </Packing.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          title=\"Reserve repack due date\"\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, List } from 'react-native-paper';\n\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport slice from \"./slice\";\nimport DatePicker from '../../DatePicker';\n\nconst { actions } = slice;\n\nexport default function RigForm() {\n  const state = useAppSelector(state => state.rigForm);\n  const dispatch = useAppDispatch();\n  const [isDatePickerOpen, setDatePickerOpen] = React.useState(false);\n\n  return ( \n    <ScrollView style={styles.fields}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport { result } from \"lodash\";\nimport React, { useCallback, useEffect } from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Load, Mutation, User } from \"../../graphql/schema\";\nimport usePalette from \"../../hooks/usePalette\";\nimport { rigForm, snackbarActions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.rigForm);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const validate = useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        rigForm.setFieldError([\"repackExpiresAt\", \"Required\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(rigForm.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(rigForm.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(rigForm.setFieldError([\"serial\", message]));\n          case \"canopySize\":\n            return dispatch(rigForm.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(rigForm.setFieldError([\"repackExpiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(snackbarActions.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(snackbarActions.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading || updateData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} rig`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <RigForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(rigForm.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps } from \"react-native\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const [height, setHeight] = useState(Dimensions.get('window').height)\n\n  useEffect(() => {\n    Dimensions.addEventListener('change', ({ window }) => setHeight(window.height))\n    return () => {\n      Dimensions.removeEventListener('change', ({ window }) => setHeight(window.height))\n    }\n  }, []);\n\n  return (\n    <ScrollView style={[styles.container, { height }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    alignItems: \"center\"\n  }\n})","import { useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, FAB, List, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport { View } from '../../../components/Themed';\nimport RigDialog from '../../../components/dialogs/RigDialog';\nimport { globalActions, rigForm, useAppDispatch, useAppSelector } from '../../../redux';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      currentUser {\n        id\n        credits\n        role {\n          id\n          name\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const [rigDialogOpen, setRigDialogOpen] = React.useState(false);\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id),\n    }\n  });\n\n  const getRigPressAction = React.useCallback((rig) => {\n    return () => {\n      dispatch(rigForm.setOriginal(rig));\n      setRigDialogOpen(true);\n    }\n  }, [dispatch, setRigDialogOpen]);\n\n  return (\n    <>\n    <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />\n    <ScrollableScreen contentContainerStyle={styles.content}>\n      \n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Basic information\" />\n          <Card.Content>\n            <List.Item\n              title=\"Name\"\n              left={() => <List.Icon icon=\"account-outline\" />}\n              description={data?.dropzone?.currentUser?.user?.name  || \"-\"}\n            />\n            <List.Item\n              title=\"Email\"\n              left={() => <List.Icon icon=\"at\" />}\n              description={data?.dropzone?.currentUser?.user?.email  || \"-\"}\n            />\n\n            <List.Item\n              title=\"Phone\"\n              left={() => <List.Icon icon=\"phone\" />}\n              description={data?.dropzone?.currentUser?.user?.phone  || \"-\"}\n            />\n\n            <List.Item\n              title=\"License\"\n              left={() => <List.Icon icon=\"ticket-account\" />}\n              description={data?.dropzone?.currentUser?.user?.license?.name || \"-\"}\n            />\n\n            <List.Item\n              title=\"Exit weight\"\n              left={() => <List.Icon icon=\"scale\" />}\n              description={data?.dropzone?.currentUser?.user?.exitWeight  || \"-\"}\n            />\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n            <Button icon=\"pencil\" onPress={() => navigation.navigate(\"UpdateUserScreen\", { user: state.currentUser })}>\n              Edit\n            </Button>\n          </Card.Actions>\n        </Card>\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title={state.currentDropzone?.name} />\n          <Card.Content>\n            <List.Item\n              title=\"Role\"\n              description={data?.dropzone?.currentUser?.role?.name}\n              left={() => <List.Icon icon=\"lock\" />}\n            />\n            <List.Item\n              title=\"Credits\"\n              description={data?.dropzone?.currentUser?.credits}\n              left={() => <List.Icon icon=\"cash-multiple\" />}\n            />\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\"}}>\n            <Button icon=\"pencil\">\n              Edit\n            </Button>\n          </Card.Actions>\n        </Card>\n\n        <Card elevation={3} style={styles.card}>\n          <Card.Title title=\"Rigs\" />\n          <Card.Content>\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Row>\n                  <DataTable.Title>\n                    Make\n                  </DataTable.Title>\n                  <DataTable.Title>\n                    Model\n                  </DataTable.Title>\n                  <DataTable.Title>\n                    Serial\n                  </DataTable.Title>\n                  <DataTable.Title numeric>\n                    Repack expires\n                  </DataTable.Title>\n                  <DataTable.Title numeric>\n                    Canopy size\n                  </DataTable.Title>\n                </DataTable.Row>\n              </DataTable.Header>\n\n              {\n                data?.dropzone?.currentUser?.user?.rigs?.map((rig) =>\n                  <DataTable.Row onPress={getRigPressAction(rig)}>\n                    <DataTable.Cell onPress={getRigPressAction(rig)}>\n                      {rig?.make}\n                    </DataTable.Cell>\n                    <DataTable.Cell onPress={getRigPressAction(rig)}>\n                      {rig?.model}\n                    </DataTable.Cell>\n                    <DataTable.Cell onPress={getRigPressAction(rig)}>\n                      {rig?.serial}\n                    </DataTable.Cell>\n                    <DataTable.Cell onPress={getRigPressAction(rig)}>\n                      {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                    </DataTable.Cell>\n                    <DataTable.Cell onPress={getRigPressAction(rig)}>\n                      {`${rig?.canopySize}sqft`}\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                )\n              }\n            </DataTable>\n          </Card.Content>\n          <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n            <Button onPress={() => setRigDialogOpen(true)}>\n              Add rig\n            </Button>\n          </Card.Actions>\n        </Card>\n\n        <Button color=\"#B00020\" onPress={() => dispatch(globalActions.logout())}>\n          Log out\n        </Button>\n      \n      </ScrollableScreen>\n      \n      <RigDialog\n        onClose={() => setRigDialogOpen(false)}\n        onSuccess={() => setRigDialogOpen(true)}\n        userId={Number(data?.dropzone?.currentUser?.user?.id)}\n        open={rigDialogOpen}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    alignItems: 'center',\n    flexGrow: 1,\n    paddingBottom: 56\n  },\n  card: {\n    marginVertical: 8,\n    width: \"80%\"\n  },\n  fields: {\n    width: \"80%\",\n    display: \"flex\",\n  },\n  spacer: {\n    width: \"100%\",\n    height: 32,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function RigScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/RigScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { License, Query } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseSelect(props: ILicenseSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const globalState = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n    <List.Subheader>\n      License\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select a license\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.licenses?.map((license) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(license);\n            }}\n            title={\n              license.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React, { useEffect, useState } from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Federation, Query } from \"../graphql/schema\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select federation\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.federations?.map((federation) => \n          <List.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\nimport LicenseSelect from '../../LicenseSelect';\nimport FederationSelect from '../../FederationSelect';\nimport useRestriction from '../../../hooks/useRestriction';\n\nconst { actions } = slice;\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.userForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  const isEdit = state?.original?.id;\n  const isSelf = state?.original?.id === globalState.currentUser?.id;  \n\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ flexGrow: 1}}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      \n      <FederationSelect\n        value={state?.fields?.license?.value?.federation || state.federation.value}\n        onSelect={(value) => dispatch(actions.setFederation(value))}\n        required\n      />\n\n      <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n        { state.federation.error || \"\" }\n      </HelperText>\n\n      { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n        <>\n          <LicenseSelect\n            value={state.fields.license.value}\n            federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n            onSelect={(value) => dispatch(actions.setField([\"license\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n            { state.fields.license.error || \"\" }\n          </HelperText>\n        </>\n      )}\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"70%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, userForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/user/slice\";\nimport { Mutation, User } from '../../../graphql/schema';\nimport UserForm from '../../../components/forms/user/UserForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        phone: $phone,\n        email: $email,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateUserScreen() {\n  const { userForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { user: User }}>();\n  const user = route.params!.user;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(user));\n  }, [user?.id]);\n\n  const [mutationUpdateUser, data] = useMutation<Mutation>(MUTATION_CREATE_USER);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            licenseId: !license.value?.id ? null : Number(license.value!.id),\n            phone: phone.value,\n            exitWeight: parseFloat(exitWeight.value!),\n            email: email.value,\n          }\n        });\n        \n        if (result.data?.updateUser?.user) {\n          const { fieldErrors, errors } = result.data.updateUser;\n\n          if (fieldErrors) {\n            fieldErrors?.map(({ field, message }) => {\n              switch (field) {\n                case \"name\":\n                  return dispatch(userForm.setFieldError([\"name\", message]));\n                case \"exit_weight\":\n                  return dispatch(userForm.setFieldError([\"exitWeight\", message]));\n                case \"license_id\":\n                  return dispatch(userForm.setFieldError([\"license\", message]));\n                case \"phone\":\n                  return dispatch(userForm.setFieldError([\"phone\", message]));\n                case \"email\":\n                  return dispatch(userForm.setFieldError([\"email\", message]));\n              }\n            });\n          } else if (errors?.length) {\n            errors.map((message) =>\n              dispatch(\n                snackbar.showSnackbar({ message: message, variant: \"error\" })\n              )\n            );\n          } else {\n            dispatch(\n              snackbar.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n            );\n            navigation.goBack();\n            dispatch(userForm.reset());\n          }\n\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n  return (\n    <View style={styles.container}>\n        <UserForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport ProfileScreen from '../../screens/authenticated/profile/ProfileScreen';\nimport RigScreen from '../../screens/authenticated/rig/RigScreen';\nimport UpdateUserScreen from '../../screens/authenticated/profile/UpdateUserScreen';\nimport AppBar from '../AppBar';\n\n\nexport type IProfileTabParams = {\n  ProfileScreen: undefined;\n  RigScreen: undefined;\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen name=\"ProfileScreen\" component={ProfileScreen} options={{ title: \"Profile\"}} />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n      <Profile.Screen name=\"RigScreen\" component={RigScreen} options={{ title: \"Rig\" }} />\n    </Profile.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { View } from '../../../components/Themed';\nimport { useAppSelector } from '../../../redux';\n\n\n\n\nexport default function SettingsScreen() {\n  \n  const navigation = useNavigation();\n  const state = useAppSelector(state => state.global);\n \n\n  return (\n    <View style={styles.container}>\n      <List.Section title=\"Dropzone\">\n        <List.Item\n          title=\"Basic settings\"\n          onPress={() => navigation.navigate(\"UpdateDropzoneScreen\", { dropzone: state.currentDropzone })}\n          left={() => <List.Icon color=\"#000\" icon=\"information-outline\" />}\n        />\n        <List.Item\n          title=\"Planes\"\n          onPress={() => navigation.navigate(\"PlanesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"airplane\" />}\n        />\n        <List.Item\n          title=\"Rigs\"\n          left={() => <List.Icon color=\"#000\" icon=\"parachute\" />}\n        />\n        <List.Item\n          title=\"Users\"\n          left={() => <List.Icon color=\"#000\" icon=\"account-cog\" />}\n        />\n      </List.Section>\n\n      <List.Section title=\"Tickets\">\n        <List.Item\n          title=\"Ticket types\"\n          onPress={() => navigation.navigate(\"TicketTypesScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"ticket\" />}\n          />\n        <List.Item\n          title=\"Ticket add-ons\"\n          onPress={() => navigation.navigate(\"ExtrasScreen\")}\n          left={() => <List.Icon color=\"#000\" icon=\"plus\" />}\n        />\n      </List.Section>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function DropzoneSettingsScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/DropzoneSettingsScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, RefreshControl } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar, Switch } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Mutation, Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport { ScrollView,  } from 'react-native-gesture-handler';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      altitude\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketTypePublic(\n    $id: Int!,\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function TicketTypesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n  const [mutationUpdateTicketType, mutation] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n  \n  React.useEffect(() => {\n    if (route.name === \"TicketTypesScreen\") {\n      refetch();\n    }\n  }, [route.name])\n  return (\n      <ScrollView style={styles.container} contentContainerStyle={[styles.content, {  backgroundColor: \"white\" }]} refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Name</DataTable.Title>\n            <DataTable.Title numeric>Cost</DataTable.Title>\n            <DataTable.Title numeric>Altitude</DataTable.Title>\n            <DataTable.Title numeric>Public</DataTable.Title>\n          </DataTable.Header>\n\n          { data?.ticketTypes?.map((ticketType) =>\n            <DataTable.Row onPress={() => navigation.navigate(\"UpdateTicketTypeScreen\", { ticketType })}>\n              <DataTable.Cell>{ticketType.name}</DataTable.Cell>\n              <DataTable.Cell numeric>${ticketType.cost}</DataTable.Cell>\n              <DataTable.Cell numeric>\n                {ticketType.altitude}\n              </DataTable.Cell>\n              <DataTable.Cell numeric>\n                <Switch\n                  onValueChange={() => {\n                    mutationUpdateTicketType({\n                      variables: {\n                        id: Number(ticketType.id),\n                        allowManifestingSelf: !ticketType.allowManifestingSelf\n                      }\n                    })\n                  }}\n                  value={!!ticketType.allowManifestingSelf}\n                />\n              </DataTable.Cell>\n            </DataTable.Row>\n            )}\n        </DataTable>\n        \n        <FAB\n          style={styles.fab}\n          small\n          icon=\"plus\"\n          onPress={() => navigation.navigate(\"CreateTicketTypeScreen\")}\n          label=\"New ticket type\"\n        />\n      </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.planeForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingTop: 200 }}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useNavigation } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreatePlane({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.createPlane?.plane) {\n          const { plane } = result.data.createPlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreatePlane]);\n\n  return (\n    <View style={styles.container}>\n        <PlaneForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation, Plane } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { plane: Plane }}>();\n  const plane = route.params!.plane;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(plane));\n  }, [plane?.id]);\n\n  const [mutationUpdatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdatePlane({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.updatePlane?.plane) {\n          const { plane } = result.data.updatePlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdatePlane]);\n\n  return (\n    <View style={styles.container}>\n        <PlaneForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300}}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <View style={styles.fields}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"70%\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Dropzone, Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n  ){\n    updateDropzone(input: {\n    id: $id\n    attributes: {\n      name: $name,\n      banner: $banner,\n      federationId: $federationId\n      primaryColor: $primaryColor\n      secondaryColor: $secondaryColor\n    }\n  }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateDropzoneScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { dropzone: Dropzone }}>();\n  const dropzone = route.params!.dropzone;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(dropzone));\n  }, [dropzone?.id]);\n  \n\n  const [mutationUpdateDropzone, data] = useMutation<Mutation>(MUTATION_UPDATE_DROPZONE);\n\n  const onSave = React.useCallback(async () => {\n    let hasError = false;\n    const { name, banner, federation, primaryColor, secondaryColor } = state.fields;\n\n    if (!name.value?.length || name.value?.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (!hasError) {\n      try {\n        const result = await mutationUpdateDropzone({\n          variables: {\n            id: Number(dropzone?.id),\n            name: name.value,\n            banner: banner.value || null,\n            primaryColor: primaryColor.value,\n            secondaryColor: secondaryColor.value,\n            federationId: Number(federation?.value?.id),\n          }\n        });\n        \n        if (result.data?.updateDropzone?.dropzone) {\n          const { dropzone } = result.data.updateDropzone;\n          dispatch(\n            globalActions.setDropzone(dropzone)\n          );\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateDropzone]);\n\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.content}>\n      <DropzoneForm />\n      <View style={styles.fields}>\n        <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n          Save\n        </Button>\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"white\",\n    display: \"flex\",\n  },\n  content: {\n    display: \"flex\",\n    flexGrow: 1,\n    alignItems: 'center',\n    paddingBottom: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlanesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // React.useEffect(() => {\n  //   if (route.name === \"PlanesScreen\") {\n  //     refetch();\n  //   }\n  // }, [route.name])\n \n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data?.planes || []}\n        numColumns={1}\n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <NoResults\n            title=\"No planes?\"\n            subtitle=\"You need to have at least one plane to manifest loads\"\n          />\n        }\n        renderItem={({ item }) =>\n          <List.Item\n            title={item.name}\n            onPress={() => navigation.navigate(\"UpdatePlaneScreen\", { plane: item })}\n            left={() => <List.Icon color=\"#000\" icon=\"airplane\" />}\n            right={() => <List.Icon color=\"#000\" icon=\"pencil\" />}\n          />\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreatePlaneScreen\")}\n        label=\"New plane\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_EXTRAS = gql`\n  query QueryExtras(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeForm() {\n  const state = useAppSelector(state => state.ticketTypeForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_EXTRAS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingTop: 200 }}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.value}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <Menu\n        onDismiss={() => setAltitudeMenuOpen(false)}\n        visible={altitudeMenuOpen}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setAltitudeMenuOpen(true);\n            }}\n            title={\n              [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"Height\",\n                  \"4000\": \"Hop n Pop\",\n                }[state.fields.altitude.value.toString()] :\n                \"Custom\"\n            }\n            right={ () =>\n              <List.Icon icon={[4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"airplane\",\n                  \"4000\": \"parachute\",\n                }[state.fields.altitude.value.toString()] as string :\n                \"pencil-plus\" \n              } />\n            }\n          />\n        }>\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 4000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Hop n Pop\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 14000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Height\"\n            right={() => <List.Icon icon=\"airplane-takeoff\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 7000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Other\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n      </Menu>\n\n      {\n        ![4000, 14000].includes(state.fields.altitude.value) && (\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Custom altitude\"\n            error={!!state.fields.altitude.value}\n            value={state.fields.altitude?.value?.toString()}\n            onChangeText={(newValue) => dispatch(actions.setField([\"altitude\", Number(newValue)]))}\n          />\n        )\n      }\n      <Checkbox.Item\n        label=\"Public manifesting\"\n        status={!!state.fields.allowManifestingSelf.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"allowManifestingSelf\", !state.fields.allowManifestingSelf.value]))\n        }\n      />\n\n      <Divider />\n      <List.Subheader>Enabled ticket add-ons</List.Subheader>\n      {\n        data?.extras.map((extra) =>\n          <Checkbox.Item\n            label={extra.name!}\n            status={state.fields.extraIds.value.includes(Number(extra.id))\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(actions.setField([\"extraIds\", xor(state.fields.extraIds.value, [Number(extra.id)])]))\n            }\n          />\n        )\n      }\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateTicketType, data] = useMutation<Mutation>(MUTATION_CREATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extraIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateTicketType({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extraIds.value,\n          }\n        });\n        \n        if (result.data?.createTicketType?.ticketType) {\n          const { ticketType } = result.data.createTicketType;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added ticket ${ticketType.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateTicketType]);\n\n  return (\n    <View style={styles.container}>\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation, TicketType } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { ticketType: TicketType }}>();\n  const ticketType = route.params!.ticketType;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(ticketType));\n  }, [ticketType?.id]);\n\n  const [mutationUpdateTicketType, data] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extraIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateTicketType({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extraIds.value,\n          }\n        });\n        \n        if (result.data?.updateTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateTicketType]);\n\n  return (\n    <View style={styles.container}>\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.extraForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <ScrollView style={styles.fields} contentContainerStyle={{ paddingTop: 200 }}>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.value}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <List.Subheader>\n        Compatible tickets\n      </List.Subheader>\n      {\n        data?.ticketTypes.map((ticket) =>\n          <Checkbox.Item\n            label={ticket.name!}\n            status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(actions.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n            }\n          />\n        )\n      }\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"70%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useNavigation } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_extra = gql`\n  mutation CreateExtra(\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    createExtra(input: {\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateExtra, data] = useMutation<Mutation>(MUTATION_CREATE_extra);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateExtra({\n          variables: {\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.createExtra?.extra) {\n          const { extra } = result.data.createExtra;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added extra ${extra.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateExtra]);\n\n  return (\n    <View style={styles.container}>\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation, Extra } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_EXTRA = gql`\n  mutation UpdateExtra(\n    $id: Int!,\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    updateExtra(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateExtraScreen() {\n  const { extraForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { extra: Extra }}>();\n  const extra = route.params!.extra;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(extra));\n  }, [extra?.id]);\n\n  const [mutationUpdateExtra, data] = useMutation<Mutation>(MUTATION_UPDATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateExtra({\n          variables: {\n            id: Number(state.original!.id!),\n            dropzoneId: Number(globalState.currentDropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.updateExtra?.extra) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateExtra]);\n\n  return (\n    <View style={styles.container}>\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport usePalette from '../../../hooks/usePalette';\nimport global from '../../../redux/global';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryExtra(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        altitude\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtrasScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // React.useEffect(() => {\n  //   if (route.name === \"PlanesScreen\") {\n  //     refetch();\n  //   }\n  // }, [route.name])\n \n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n    <View style={styles.container}>\n      <DataTable>\n        <DataTable.Header>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Cost</DataTable.Title>\n        </DataTable.Header>\n\n        { data?.extras?.map((extra) =>\n          <DataTable.Row>\n            <DataTable.Cell onPress={() => navigation.navigate(\"UpdateExtraScreen\", { extra })}>{extra.name}</DataTable.Cell>\n            <DataTable.Cell numeric>{extra.cost}</DataTable.Cell>\n          </DataTable.Row>\n        )}\n      </DataTable>\n      { !loading && !data?.extras?.length && (\n          <NoResults\n            title=\"No ticket addons\"\n            subtitle=\"You can add multiple addons to assign to tickets, e.g outside camera, or coach\"\n          />\n      )}\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateExtraScreen\")}\n        label=\"New ticket addon\"\n      />\n    </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport SettingsScreen from '../../screens/authenticated/settings/SettingsScreen';\nimport DropzoneSettingsScreen from '../../screens/authenticated/settings/DropzoneSettingsScreen';\nimport TicketTypeSettingsScreen from '../../screens/authenticated/ticket_types/TicketTypesScreen';\nimport CreatePlaneScreen from '../../screens/authenticated/planes/CreatePlaneScreen';\nimport UpdatePlaneScreen from '../../screens/authenticated/planes/UpdatePlaneScreen';\nimport UpdateDropzoneScreen from '../../screens/authenticated/dropzones/UpdateDropzoneScreen';\nimport PlanesScreen from '../../screens/authenticated/planes/PlanesScreen';\n\nimport CreateTicketTypeScreen from '../../screens/authenticated/ticket_types/CreateTicketTypeScreen';\nimport UpdateTicketTypeScreen from '../../screens/authenticated/ticket_types/UpdateTicketTypeScreen';\n\nimport CreateExtraScreen from '../../screens/authenticated/extras/CreateExtraScreen';\nimport UpdateExtraScreen from '../../screens/authenticated/extras/UpdateExtraScreen';\nimport ExtrasScreen from '../../screens/authenticated/extras/ExtrasScreen';\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  DropzoneSettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  CreateTicketTypeScreen: undefined;\n  UpdateTicketTypeScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"DropzoneSettingsScreen\" component={DropzoneSettingsScreen} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateTicketTypeScreen\" component={CreateTicketTypeScreen} options={{ title: \"New ticket type\" }} />\n      <Settings.Screen name=\"UpdateTicketTypeScreen\" component={UpdateTicketTypeScreen} options={{ title: \"Edit ticket type\" }}/>\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n    </Settings.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function UsersScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/UsersScreen.tsx\" />\n    </View>\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function UserProfileScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/UserProfileScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function UserRigScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/UserRigScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport UsersScreen from '../../screens/authenticated/users/UsersScreen';\nimport UserProfileScreen from '../../screens/authenticated/profile/UserProfileScreen';\nimport UserRigScreen from '../../screens/authenticated/rig/UserRigScreen';\n\nexport type ISettingsTabParams = {\n  UsersScreen: undefined;\n  UserRigScreen: undefined;\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} />\n      <Settings.Screen name=\"UserRigScreen\" component={UserRigScreen} />\n      <Settings.Screen name=\"UserProfileScreen\" component={UserProfileScreen} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';\nimport * as React from 'react';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport PackingTab from \"./tabs/packing\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport useRestriction from '../hooks/useRestriction';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Settings: undefined;\n}\n\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\nconst BottomTab = createMaterialBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(\"readUser\");\n  const canCreatePacks = useRestriction(\"createPackjob\");\n  const canManageDropzone = useRestriction(\"updateDropzone\");\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: \"airplane\"\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: \"account-circle\"\n        }}\n      />\n      { canCreatePacks && (\n        <BottomTab.Screen\n          name=\"Packing\"\n          component={PackingTab}\n          options={{\n            tabBarIcon: \"parachute\"\n          }}\n        />\n      )}\n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: \"account-group\"\n          }}\n        />\n      )}\n      \n      { canManageDropzone && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: \"account-cog\"\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { globalActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation } from '@react-navigation/core';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) =>\n          <Card\n            style={{\n              width: (Dimensions.get(\"window\").width / 2) - 32,\n              margin: 8\n            }}\n            onPress={async ()=> {\n              if (item?.node) {\n                dispatch(\n                  globalActions.setDropzone(item.node)\n                );\n              }\n            }}\n          >\n            <Card.Cover source={{ uri: item?.node?.banner as string }} />\n            <Card.Content>\n              <Title>{item?.node?.name}</Title>\n            </Card.Content>\n          </Card>\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport { useNavigation } from '@react-navigation/core';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(snackbarActions.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(globalActions.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <View style={styles.container}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from '../../../components/notifications';\nimport { useAppSelector, useAppDispatch, globalActions, snackbarActions } from '../../../redux';\n\nimport slice from \"./slice\";\nimport { Mutation } from '../../../graphql/schema';\n\nconst { actions } = slice;\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              globalActions.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              globalActions.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(snackbarActions.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign in</Text>\n\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button style={styles.button} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginBottom: 10,\n  },\n  button: {\n    marginTop: 10,\n    width: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"./slice\";\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.signup);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          globalActions.setCredentials(payload.credentials)\n        );\n        dispatch(\n          globalActions.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign up</Text>\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) => dispatch(actions.setField([\"exitWeight\", parseFloat(newValue)]))}\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"newPassword\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          onPress={() =>\n            onSignUp({\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"70%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Notifications from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\n\n\n\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  return (\n    <Apollo>\n      <MaterialProvider theme={state.theme}>\n        <SafeAreaProvider>\n          <NavigationContainer\n            linking={LinkingConfiguration}\n            theme={state.theme}>\n            <RootNavigator />\n          </NavigationContainer>\n\n          <StatusBar />\n          <Notifications />\n        </SafeAreaProvider>\n    </MaterialProvider>\n    </Apollo>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}