{"version":3,"sources":["components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/authenticated/packing/PackingScreen.tsx","navigation/tabs/packing.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","MonoText","fontFamily","EditScreenInfo","path","styles","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","tint","WebBrowser","StyleSheet","create","container","flex","developmentModeText","marginBottom","fontSize","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","alignItems","marginTop","welcomeImage","width","height","resizeMode","marginLeft","marginHorizontal","marginVertical","codeHighlightText","borderRadius","paddingHorizontal","paddingVertical","PackingScreen","title","separator","justifyContent","fontWeight","Packing","createStackNavigator","PackingTab","Navigator","screenOptions","headerShown","cardStyle","Screen","name","component"],"mappings":"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","file":"static/js/33.6e14dee5.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../../../components/EditScreenInfo';\nimport { Text, View } from '../../../components/Themed';\n\nexport default function PackingScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab One</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/PackingScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport PackingScreen from '../../screens/authenticated/packing/PackingScreen';\n\nexport type IPackingTabParams = {\n  PackingScreen: undefined;\n}\n\nconst Packing = createStackNavigator<IPackingTabParams>();\n\nexport default function PackingTab() {\n  return (\n    <Packing.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Packing.Screen name=\"PackingScreen\" component={PackingScreen} />\n    </Packing.Navigator>\n  );\n}\n"],"sourceRoot":""}