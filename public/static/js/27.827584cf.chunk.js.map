{"version":3,"sources":["components/Themed.tsx","components/ScrollableScreen.tsx","components/forms/dropzone/DropzoneForm.tsx","graphql/createMutation.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","ScrollableScreen","height","useWindowDimensions","useAppSelector","state","global","styles","container","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","actions","slice","QUERY_FEDERATIONS","gql","DropzoneForm","dropzoneForm","dispatch","useAppDispatch","useQuery","data","loading","useState","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","useEffect","federations","length","fields","federation","value","setField","JSON","stringify","onPickImage","useCallback","a","async","getDocumentAsync","multiple","type","result","uri","console","log","visible","onDismiss","Title","Content","padding","onColorSelected","sliderComponent","SliderComponent","defaultColor","primaryColor","secondaryColor","undefined","hideSliders","Actions","onPress","disabled","current","accent","next","globalActions","setPrimaryColor","setAccentColor","width","maxHeight","marginVertical","Cover","source","banner","resizeMode","justifyContent","Subheader","subheader","field","mode","label","error","name","onChangeText","newValue","anchor","Item","title","icon","map","left","primary","description","isCreditSystemEnabled","status","isPublic","display","marginBottom","paddingLeft","isRequired","message","pattern","isEmail","RegExp","validates","callback","createMutation","mutation","options","getPayload","fieldErrorMap","opts","onFieldError","onSuccess","onError","useMutation","mutate","variables","hasErrors","Object","keys","forEach","x","variable","validator","test","validate","payload","fieldErrors","fieldName","errors","QUERY_DROPZONES","DropzonesScreen","refetch","navigation","useNavigation","FlatList","dropzones","edges","numColumns","refreshing","onRefresh","ListEmptyComponent","empty","Paragraph","renderItem","item","Card","Dimensions","get","margin","node","setDropzone","FAB","fab","small","navigate","position","right","bottom","MUTATION_CREATE_DROPZONE","createDropzone","globalSlice","SignupScreen","useMutationCreateDropzone","e","snackbarActions","showSnackbar","variant","setFieldError","dropzone","Button","federationId","Number","id","fontSize","fontWeight","separator","Stack","createStackNavigator","Limbo","Navigator","screenOptions","headerShown","cardStyle","initialRouteName","Screen","component","CreateDropzoneScreen"],"mappings":"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","file":"static/js/27.827584cf.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import React, { useCallback, useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { useAppSelector, useAppDispatch, globalActions } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { ScrollView } from 'react-native';\n\nconst { actions } = slice;\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const { dropzoneForm: state, global } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = useState(false);\n  const [colorPicker, setColorPicker] = useState<\"primary\" | \"secondary\" | null>(null);\n\n  useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.setField([\"primaryColor\", color])\n                    : actions.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      globalActions.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      globalActions.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={{ width: \"100%\", marginVertical: 16, paddingHorizontal: 16 }}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport { useCallback } from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { globalActions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation } from '@react-navigation/core';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) =>\n          <Card\n            style={{\n              width: (Dimensions.get(\"window\").width / 2) - 32,\n              margin: 8\n            }}\n            onPress={async ()=> {\n              if (item?.node) {\n                dispatch(\n                  globalActions.setDropzone(item.node)\n                );\n              }\n            }}\n          >\n            <Card.Cover source={{ uri: item?.node?.banner as string }} />\n            <Card.Content>\n              <Title>{item?.node?.name}</Title>\n            </Card.Content>\n          </Card>\n        }\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/core';\nimport { useAppSelector, useAppDispatch, snackbarActions } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/dropzone/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\n\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.dropzoneForm);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(snackbarActions.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(globalActions.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n"],"sourceRoot":""}