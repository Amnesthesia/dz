{"version":3,"sources":["components/ScrollableScreen.tsx","screens/authenticated/ticket_types/TicketTypesScreen.tsx"],"names":["ScrollableScreen","props","height","useWindowDimensions","theme","useAppSelector","state","global","style","styles","container","backgroundColor","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","QUERY_TICKET_TYPE","gql","MUTATION_UPDATE_TICKET_TYPE","TicketTypesScreen","useQuery","variables","dropzoneId","Number","currentDropzone","id","data","loading","refetch","navigation","useNavigation","route","useRoute","isFocused","useIsFocused","React","useMutation","mutationUpdateTicketType","name","refreshControl","refreshing","onRefresh","visible","color","accent","Header","Title","numeric","ticketTypes","map","ticketType","Row","onPress","navigate","pointerEvents","Cell","cost","altitude","onValueChange","allowManifestingSelf","value","fab","small","icon","label","display","position","margin","right","bottom","empty","justifyContent","width"],"mappings":"uFAAA,sFAQe,SAASA,EAAiBC,GAA2B,IAE1DC,EAAWC,cAAXD,OACAE,EAAUC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAAxCH,MAGR,OACE,kBAAC,IAAD,CAAYI,MAAO,CAACC,EAAOC,UAAW,CAAEC,gBAAiBP,EAAMQ,OAAOC,QAASX,OAAQA,EAAU,KAAWD,EAAMO,OAAQM,sBAAuB,CAACL,EAAOM,QAASd,EAAMa,wBACrKb,EAAMe,UAKb,IAAMP,EAASQ,IAAWC,OAAO,CAC/BR,UAAW,CACTS,KAAM,GAERJ,QAAS,CACPK,kBAAmB,GACnBC,WAAY,aACZC,SAAU,EACVC,cAAe,O,+NCjBbC,EAAoBC,YAAH,uRAoBjBC,EAA8BD,YAAH,ycA2BlB,SAASE,IAAqB,IAAD,IACpCrB,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UADF,EAEPqB,mBAAgBJ,EAAmB,CACpEK,UAAW,CACTC,WAAYC,OAAM,SAACzB,EAAM0B,sBAAP,EAAC,EAAuBC,OAFtCC,EAFkC,EAElCA,KAAMC,EAF4B,EAE5BA,QAASC,EAFmB,EAEnBA,QAKjBC,EAAaC,0BACbC,EAAQC,qBACRC,EAAYC,yBAElBC,aAAgB,WACVF,GACFL,MAED,CAACK,IAfsC,MAgBGG,sBAAsBlB,GAhBzB,WAgBnCmB,EAhBmC,UAuB1C,OALAF,aAAgB,WACK,sBAAfJ,EAAMO,MACRV,MAED,CAACG,EAAMO,OAEN,gBAAC,IAAD,CAAkBtC,MAAOC,EAAOC,UAAWI,sBAAuB,CAACL,EAAOM,QAAS,CAAGJ,gBAAiB,UAAYoC,eAAgB,gBAAC,IAAD,CAAgBC,WAAYb,EAASc,UAAWb,KACnL,gBAAC,IAAD,CAAac,QAASf,EAASgB,MAAO7C,EAAMF,MAAMQ,OAAOwC,SACvD,gBAAC,IAAD,KACE,gBAAC,IAAUC,OAAX,KACE,gBAAC,IAAUC,MAAX,aACA,gBAAC,IAAUA,MAAX,CAAiBC,SAAO,GAAxB,QACA,gBAAC,IAAUD,MAAX,CAAiBC,SAAO,GAAxB,YACA,gBAAC,IAAUD,MAAX,CAAiBC,SAAO,GAAxB,WALJ,MAQIrB,GARJ,SAQIA,EAAMsB,kBARV,EAQI,EAAmBC,KAAI,SAACC,GAAD,OACvB,gBAAC,IAAUC,IAAX,CAAeC,QAAS,kBAAMvB,EAAWwB,SAAS,yBAA0B,CAAEH,gBAAeI,cAAc,QACzG,gBAAC,IAAUC,KAAX,KAAiBL,EAAWZ,MAC5B,gBAAC,IAAUiB,KAAX,CAAgBR,SAAO,GAAvB,IAA0BG,EAAWM,MACrC,gBAAC,IAAUD,KAAX,CAAgBR,SAAO,GACpBG,EAAWO,UAEd,gBAAC,IAAUF,KAAX,CAAgBR,SAAO,GACrB,gBAAC,IAAD,CACEW,cAAe,WACbrB,EAAyB,CACvBhB,UAAW,CACTI,GAAIF,OAAO2B,EAAWzB,IACtBkC,sBAAuBT,EAAWS,yBAIxCC,QAASV,EAAWS,6BAO9B,gBAAC,IAAD,CACE3D,MAAOC,EAAO4D,IACdC,OAAK,EACLC,KAAK,OACLX,QAAS,kBAAMvB,EAAWwB,SAAS,2BACnCW,MAAM,qBAMhB,IAAM/D,EAASQ,IAAWC,OAAO,CAC/BR,UAAW,CACTS,KAAM,EACNsD,QAAS,QAEX1D,QAAS,CACPO,SAAU,GAEZ+C,IAAK,CACHK,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ,GAEVC,MAAO,CACL3D,KAAM,EACNE,WAAY,SACZ0D,eAAgB,SAChBC,MAAO,OACP9E,OAAQ","file":"static/js/40.7eee802e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import { useMutation, useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, RefreshControl } from 'react-native';\nimport { FAB, DataTable, ProgressBar, Switch } from 'react-native-paper';\nimport { Mutation, Query } from \"../../../graphql/schema\";\n\nimport { useAppSelector } from '../../../redux';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      altitude\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketTypePublic(\n    $id: Int!,\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function TicketTypesScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n  const [mutationUpdateTicketType, mutation] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n  \n  React.useEffect(() => {\n    if (route.name === \"TicketTypesScreen\") {\n      refetch();\n    }\n  }, [route.name])\n  return (\n      <ScrollableScreen style={styles.container} contentContainerStyle={[styles.content, {  backgroundColor: \"white\" }]} refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Name</DataTable.Title>\n            <DataTable.Title numeric>Cost</DataTable.Title>\n            <DataTable.Title numeric>Altitude</DataTable.Title>\n            <DataTable.Title numeric>Public</DataTable.Title>\n          </DataTable.Header>\n\n          { data?.ticketTypes?.map((ticketType) =>\n            <DataTable.Row onPress={() => navigation.navigate(\"UpdateTicketTypeScreen\", { ticketType })} pointerEvents=\"none\">\n              <DataTable.Cell>{ticketType.name}</DataTable.Cell>\n              <DataTable.Cell numeric>${ticketType.cost}</DataTable.Cell>\n              <DataTable.Cell numeric>\n                {ticketType.altitude}\n              </DataTable.Cell>\n              <DataTable.Cell numeric>\n                <Switch\n                  onValueChange={() => {\n                    mutationUpdateTicketType({\n                      variables: {\n                        id: Number(ticketType.id),\n                        allowManifestingSelf: !ticketType.allowManifestingSelf\n                      }\n                    })\n                  }}\n                  value={!!ticketType.allowManifestingSelf}\n                />\n              </DataTable.Cell>\n            </DataTable.Row>\n            )}\n        </DataTable>\n        \n        <FAB\n          style={styles.fab}\n          small\n          icon=\"plus\"\n          onPress={() => navigation.navigate(\"CreateTicketTypeScreen\")}\n          label=\"New ticket type\"\n        />\n      </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}