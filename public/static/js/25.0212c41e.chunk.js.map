{"version":3,"sources":["Title.tsx","node_modules/react-native-web/dist/exports/useWindowDimensions/index.js","Caption.tsx","CardContent.tsx","CardActions.tsx","CardCover.tsx","CardTitle.tsx","Card.tsx","DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","getContrastingColor.tsx","FAB.tsx","FABGroup.tsx","index.ts"],"names":["props","alpha","family","style","styles","text","fontSize","lineHeight","marginVertical","letterSpacing","useWindowDimensions","_useState","useState","Dimensions","get","dims","setDims","useEffect","handleChange","_ref","window","addEventListener","removeEventListener","CardContent","rest","cover","title","index","prev","siblings","next","total","contentStyle","StyleSheet","container","paddingHorizontal","first","paddingTop","last","paddingBottom","only","paddingVertical","CardActions","React","child","compact","flexDirection","alignItems","justifyContent","padding","CardCover","roundness","coverStyle","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","height","backgroundColor","overflow","image","flex","width","withTheme","CardTitle","titleNumberOfLines","subtitleNumberOfLines","minHeight","subtitle","left","size","marginBottom","numberOfLines","rightStyle","right","paddingLeft","marginRight","titles","Card","elevation","cardElevation","Animated","current","delayPressIn","disabled","onPress","onLongPress","onPressIn","scale","animation","toValue","duration","useNativeDriver","dark","mode","onPressOut","testID","accessible","innerContainer","flexGrow","flexShrink","DataTableCell","numeric","DataTableHeader","borderBottomColor","color","theme","header","borderBottomWidth","DataTableTitle","spinAnim","sortDirection","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","direction","I18nManager","alignContent","cell","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","label","borderStyle","content","pointerEvents","DataTable","getContrastingColor","input","light","FAB","accessibilityLabel","animated","visible","uppercase","visibility","IconComponent","disabledColor","accent","foregroundColor","customColor","rippleColor","opacity","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","small","loading","source","selectable","medium","touchable","standard","extended","marginHorizontal","uppercaseLabel","textTransform","FABGroup","colorProp","backdrop","animations","actions","open","close","onStateChange","colors","backdropOpacity","opacities","scales","prevActions","setPrevActions","safeArea","key","it","i","surface","expanded","fab","marginTop","absoluteFillObject","item","Group"],"mappings":"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","file":"static/js/25.0212c41e.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text, StyleSheet } from 'react-native';\nimport StyledText from './StyledText';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  children: React.ReactNode;\n};\n\n// @component-group Typography\n\n/**\n * Typography component for showing a title.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/title.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Title } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Title>Title</Title>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Title = (props: Props) => (\n  <StyledText\n    {...props}\n    alpha={0.87}\n    family=\"medium\"\n    style={[styles.text, props.style]}\n  />\n);\n\nexport default Title;\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 20,\n    lineHeight: 30,\n    marginVertical: 2,\n    letterSpacing: 0.15,\n  },\n});\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      // $FlowFixMe\n      setDims(window);\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","import * as React from 'react';\nimport { Text, TextStyle, StyleSheet, StyleProp } from 'react-native';\nimport StyledText from './StyledText';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  style?: StyleProp<TextStyle>;\n  children: React.ReactNode;\n};\n\n// @component-group Typography\n\n/**\n * Typography component for showing a caption.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/caption.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Caption } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Caption>Caption</Caption>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Caption = (props: Props) => (\n  <StyledText\n    {...props}\n    alpha={0.54}\n    family=\"regular\"\n    style={[styles.text, props.style]}\n  />\n);\n\nexport default Caption;\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    lineHeight: 20,\n    marginVertical: 2,\n    letterSpacing: 0.4,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `Card.Content`.\n   */\n  children: React.ReactNode;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  /**\n   * @internal\n   */\n  siblings?: Array<string>;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show content inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-content-example.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Title, Paragraph } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardContent = ({ index, total, siblings, style, ...rest }: Props) => {\n  const cover = 'withTheme(CardCover)';\n  const title = 'withTheme(CardTitle)';\n\n  let contentStyle, prev, next;\n\n  if (typeof index === 'number' && siblings) {\n    prev = siblings[index - 1];\n    next = siblings[index + 1];\n  }\n\n  if (\n    (prev === cover && next === cover) ||\n    (prev === title && next === title) ||\n    total === 1\n  ) {\n    contentStyle = styles.only;\n  } else if (index === 0) {\n    if (next === cover || next === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.first;\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    if (prev === cover || prev === title) {\n      contentStyle = styles.only;\n    } else {\n      contentStyle = styles.last;\n    }\n  } else if (prev === cover || prev === title) {\n    contentStyle = styles.first;\n  } else if (next === cover || next === title) {\n    contentStyle = styles.last;\n  }\n\n  return <View {...rest} style={[styles.container, contentStyle, style]} />;\n};\n\nCardContent.displayName = 'Card.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 16,\n  },\n  first: {\n    paddingTop: 16,\n  },\n  last: {\n    paddingBottom: 16,\n  },\n  only: {\n    paddingVertical: 16,\n  },\n});\n\nexport default CardContent;\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Items inside the `CardActions`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a list of actions inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-actions.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card, Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardActions = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {React.Children.map(props.children, (child) =>\n      React.isValidElement(child)\n        ? React.cloneElement(child, {\n            compact: child.props.compact !== false,\n          })\n        : child\n    )}\n  </View>\n);\n\nCardActions.displayName = 'Card.Actions';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    padding: 8,\n  },\n});\n\nexport default CardActions;\n","import * as React from 'react';\nimport { StyleSheet, View, ViewStyle, Image, StyleProp } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { grey200 } from '../../styles/colors';\n\ntype Props = React.ComponentPropsWithRef<typeof Image> & {\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show a cover image inside a Card.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/card-cover.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Card } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends Image props https://reactnative.dev/docs/image#props\n */\nconst CardCover = ({ index, total, style, theme, ...rest }: Props) => {\n  const { roundness } = theme;\n\n  let coverStyle;\n\n  if (index === 0) {\n    if (total === 1) {\n      coverStyle = {\n        borderRadius: roundness,\n      };\n    } else {\n      coverStyle = {\n        borderTopLeftRadius: roundness,\n        borderTopRightRadius: roundness,\n      };\n    }\n  } else if (typeof total === 'number' && index === total - 1) {\n    coverStyle = {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return (\n    <View style={[styles.container, coverStyle, style]}>\n      <Image {...rest} style={[styles.image, coverStyle]} />\n    </View>\n  );\n};\n\nCardCover.displayName = 'Card.Cover';\nconst styles = StyleSheet.create({\n  container: {\n    height: 195,\n    backgroundColor: grey200,\n    overflow: 'hidden',\n  },\n  image: {\n    flex: 1,\n    height: undefined,\n    width: undefined,\n    padding: 16,\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default withTheme(CardCover);\n\n// @component-docs ignore-next-line\nexport { CardCover };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport Caption from './../Typography/Caption';\nimport Title from './../Typography/Title';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Text for the title. Note that this will only accept a string or `<Text>`-based node.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the title.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Text for the subtitle. Note that this will only accept a string or `<Text>`-based node.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Number of lines for the subtitle.\n   */\n  subtitleNumberOfLines?: number;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the left element wrapper.\n   */\n  leftStyle?: StyleProp<ViewStyle>;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { size: number }) => React.ReactNode;\n  /**\n   * Style for the right element wrapper.\n   */\n  rightStyle?: StyleProp<ViewStyle>;\n  /**\n   * @internal\n   */\n  index?: number;\n  /**\n   * @internal\n   */\n  total?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst LEFT_SIZE = 40;\n\n/**\n * A component to show a title, subtitle and an avatar inside a Card.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-title-1.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Card, IconButton } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Card.Title\n *     title=\"Card Title\"\n *     subtitle=\"Card Subtitle\"\n *     left={(props) => <Avatar.Icon {...props} icon=\"folder\" />}\n *     right={(props) => <IconButton {...props} icon=\"more-vert\" onPress={() => {}} />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst CardTitle = ({\n  title,\n  titleStyle,\n  titleNumberOfLines = 1,\n  subtitle,\n  subtitleStyle,\n  subtitleNumberOfLines = 1,\n  left,\n  leftStyle,\n  right,\n  rightStyle,\n  style,\n}: Props) => {\n  return (\n    <View\n      style={[\n        styles.container,\n        { minHeight: subtitle || left || right ? 72 : 50 },\n        style,\n      ]}\n    >\n      {left ? (\n        <View style={[styles.left, leftStyle]}>\n          {left({\n            size: LEFT_SIZE,\n          })}\n        </View>\n      ) : null}\n\n      <View style={[styles.titles]}>\n        {title ? (\n          <Title\n            style={[\n              styles.title,\n              { marginBottom: subtitle ? 0 : 2 },\n              titleStyle,\n            ]}\n            numberOfLines={titleNumberOfLines}\n          >\n            {title}\n          </Title>\n        ) : null}\n\n        {subtitle ? (\n          <Caption\n            style={[styles.subtitle, subtitleStyle]}\n            numberOfLines={subtitleNumberOfLines}\n          >\n            {subtitle}\n          </Caption>\n        ) : null}\n      </View>\n\n      <View style={rightStyle}>{right ? right({ size: 24 }) : null}</View>\n    </View>\n  );\n};\n\nCardTitle.displayName = 'Card.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingLeft: 16,\n  },\n\n  left: {\n    justifyContent: 'center',\n    marginRight: 16,\n    height: LEFT_SIZE,\n    width: LEFT_SIZE,\n  },\n\n  titles: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  title: {\n    minHeight: 30,\n  },\n\n  subtitle: {\n    minHeight: 20,\n    marginVertical: 0,\n  },\n});\n\nexport default withTheme(CardTitle);\n\n// @component-docs ignore-next-line\nexport { CardTitle };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const { roundness } = theme;\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  return (\n    <Surface style={[{ borderRadius: roundness, elevation }, style]} {...rest}>\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress ? handlePressIn : undefined}\n        onPressOut={onPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default withTheme(Card);\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import type { ColorValue } from 'react-native';\nimport color from 'color';\n\nexport default function getContrastingColor(\n  input: ColorValue,\n  light: string,\n  dark: string\n): string {\n  if (typeof input === 'string') {\n    return color(input).isLight() ? dark : light;\n  }\n\n  return light;\n}\n","import color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport type { $RemoveChildren } from '../../types';\n\ngetContrastingColor;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  small,\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  loading,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const {\n    backgroundColor = disabled ? disabledColor : theme.colors.accent,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = getContrastingColor(\n      backgroundColor,\n      white,\n      'rgba(0, 0, 0, .54)'\n    );\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        style={styles.touchable}\n        testID={testID}\n      >\n        <View\n          style={[\n            styles.content,\n            label ? styles.extended : small ? styles.small : styles.standard,\n          ]}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent source={icon} size={24} color={foregroundColor} />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator size={18} color={foregroundColor} />\n          ) : null}\n          {label ? (\n            <Text\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                { color: foregroundColor, ...theme.fonts.medium },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n","import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  SafeAreaView,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport FAB from './FAB';\nimport Text from '../Typography/Text';\nimport Card from '../Card/Card';\nimport { withTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Action items to display in the form of a speed dial.\n   * An action item should contain the following properties:\n   * - `icon`: icon to display (required)\n   * - `label`: optional label text\n   * - `accessibilityLabel`: accessibility label for the action, uses label by default if specified\n   * - `color`: custom icon color of the action item\n   * - `style`: pass additional styles for the fab item, for example, `backgroundColor`\n   * - `small`: boolean describing whether small or normal sized FAB is rendered. Defaults to `true`\n   * - `onPress`: callback that is called when `FAB` is pressed (required)\n   */\n  actions: Array<{\n    icon: IconSource;\n    label?: string;\n    color?: string;\n    accessibilityLabel?: string;\n    style?: StyleProp<ViewStyle>;\n    small?: boolean;\n    onPress: () => void;\n    testID?: string;\n  }>;\n  /**\n   * Icon to display for the `FAB`.\n   * You can toggle it based on whether the speed dial is open to display a different icon.\n   */\n  icon: IconSource;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for the `FAB`.\n   */\n  color?: string;\n  /**\n   * Function to execute on pressing the `FAB`.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the speed dial is open.\n   */\n  open: boolean;\n  /**\n   * Callback which is called on opening and closing the speed dial.\n   * The open state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onStateChange: (state: { open: boolean }) => void;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Style for the group. You can use it to pass additional styles if you need.\n   * For example, you can set an additional padding if you have a tab bar at the bottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the FAB. It allows to pass the FAB button styles, such as backgroundColor.\n   */\n  fabStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from Group props to FAB.\n   */\n  testID?: string;\n};\n\n/**\n * A component to display a stack of FABs with related actions in a speed dial.\n * To render the group above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-group.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { FAB, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [state, setState] = React.useState({ open: false });\n *\n *   const onStateChange = ({ open }) => setState({ open });\n *\n *   const { open } = state;\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <FAB.Group\n *           open={open}\n *           icon={open ? 'calendar-today' : 'plus'}\n *           actions={[\n *             { icon: 'plus', onPress: () => console.log('Pressed add') },\n *             {\n *               icon: 'star',\n *               label: 'Star',\n *               onPress: () => console.log('Pressed star'),\n *             },\n *             {\n *               icon: 'email',\n *               label: 'Email',\n *               onPress: () => console.log('Pressed email'),\n *             },\n *             {\n *               icon: 'bell',\n *               label: 'Remind',\n *               onPress: () => console.log('Pressed notifications'),\n *               small: false,\n *             },\n *           ]}\n *           onStateChange={onStateChange}\n *           onPress={() => {\n *             if (open) {\n *               // do something if the speed dial is open\n *             }\n *           }}\n *         />\n *       </Portal>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst FABGroup = ({\n  actions,\n  icon,\n  open,\n  onPress,\n  accessibilityLabel,\n  theme,\n  style,\n  fabStyle,\n  visible,\n  testID,\n  onStateChange,\n  color: colorProp,\n}: Props) => {\n  const { current: backdrop } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const animations = React.useRef<Animated.Value[]>(\n    actions.map(() => new Animated.Value(open ? 1 : 0))\n  );\n\n  const [prevActions, setPrevActions] = React.useState<\n    | {\n        icon: IconSource;\n        label?: string;\n        color?: string;\n        accessibilityLabel?: string;\n        style?: StyleProp<ViewStyle>;\n        onPress: () => void;\n        testID?: string;\n      }[]\n    | null\n  >(null);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (open) {\n      Animated.parallel([\n        Animated.timing(backdrop, {\n          toValue: 1,\n          duration: 250 * scale,\n          useNativeDriver: true,\n        }),\n        Animated.stagger(\n          50 * scale,\n          animations.current\n            .map((animation) =>\n              Animated.timing(animation, {\n                toValue: 1,\n                duration: 150 * scale,\n                useNativeDriver: true,\n              })\n            )\n            .reverse()\n        ),\n      ]).start();\n    } else {\n      Animated.parallel([\n        Animated.timing(backdrop, {\n          toValue: 0,\n          duration: 200 * scale,\n          useNativeDriver: true,\n        }),\n        ...animations.current.map((animation) =>\n          Animated.timing(animation, {\n            toValue: 0,\n            duration: 150 * scale,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start();\n    }\n  }, [open, actions, backdrop, scale]);\n\n  const close = () => onStateChange({ open: false });\n\n  const toggle = () => onStateChange({ open: !open });\n\n  const { colors } = theme;\n\n  const labelColor = theme.dark\n    ? colors.text\n    : color(colors.text).fade(0.54).rgb().string();\n  const backdropOpacity = open\n    ? backdrop.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, 1, 1],\n      })\n    : backdrop;\n\n  const opacities = animations.current;\n  const scales = opacities.map((opacity) =>\n    open\n      ? opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.8, 1],\n        })\n      : 1\n  );\n\n  if (actions.length !== prevActions?.length) {\n    animations.current = actions.map(\n      (_, i) => animations.current[i] || new Animated.Value(open ? 1 : 0)\n    );\n    setPrevActions(actions);\n  }\n\n  return (\n    <View pointerEvents=\"box-none\" style={[styles.container, style]}>\n      <TouchableWithoutFeedback onPress={close}>\n        <Animated.View\n          pointerEvents={open ? 'auto' : 'none'}\n          style={[\n            styles.backdrop,\n            {\n              opacity: backdropOpacity,\n              backgroundColor: colors.backdrop,\n            },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <SafeAreaView pointerEvents=\"box-none\" style={styles.safeArea}>\n        <View pointerEvents={open ? 'box-none' : 'none'}>\n          {actions.map((it, i) => (\n            <View\n              key={i} // eslint-disable-line react/no-array-index-key\n              style={[\n                styles.item,\n                {\n                  marginHorizontal:\n                    typeof it.small === 'undefined' || it.small ? 24 : 16,\n                },\n              ]}\n              pointerEvents={open ? 'box-none' : 'none'}\n            >\n              {it.label && (\n                <View>\n                  <Card\n                    style={\n                      [\n                        styles.label,\n                        {\n                          transform: [{ scale: scales[i] }],\n                          opacity: opacities[i],\n                        },\n                      ] as StyleProp<ViewStyle>\n                    }\n                    onPress={() => {\n                      it.onPress();\n                      close();\n                    }}\n                    accessibilityLabel={\n                      it.accessibilityLabel !== 'undefined'\n                        ? it.accessibilityLabel\n                        : it.label\n                    }\n                    // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                    accessibilityTraits=\"button\"\n                    accessibilityComponentType=\"button\"\n                    accessibilityRole=\"button\"\n                  >\n                    <Text style={{ color: labelColor }}>{it.label}</Text>\n                  </Card>\n                </View>\n              )}\n              <FAB\n                small={typeof it.small !== 'undefined' ? it.small : true}\n                icon={it.icon}\n                color={it.color}\n                style={\n                  [\n                    {\n                      transform: [{ scale: scales[i] }],\n                      opacity: opacities[i],\n                      backgroundColor: theme.colors.surface,\n                    },\n                    it.style,\n                  ] as StyleProp<ViewStyle>\n                }\n                onPress={() => {\n                  it.onPress();\n                  close();\n                }}\n                accessibilityLabel={\n                  typeof it.accessibilityLabel !== 'undefined'\n                    ? it.accessibilityLabel\n                    : it.label\n                }\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n                accessibilityRole=\"button\"\n                testID={it.testID}\n                visible={open}\n              />\n            </View>\n          ))}\n        </View>\n        <FAB\n          onPress={() => {\n            onPress?.();\n            toggle();\n          }}\n          icon={icon}\n          color={colorProp}\n          accessibilityLabel={accessibilityLabel}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: open }}\n          style={[styles.fab, fabStyle]}\n          visible={visible}\n          testID={testID}\n        />\n      </SafeAreaView>\n    </View>\n  );\n};\n\nFABGroup.displayName = 'FAB.Group';\n\nexport default withTheme(FABGroup);\n\n// @component-docs ignore-next-line\nconst FABGroupWithTheme = withTheme(FABGroup);\n// @component-docs ignore-next-line\nexport { FABGroupWithTheme as FABGroup };\n\nconst styles = StyleSheet.create({\n  safeArea: {\n    alignItems: 'flex-end',\n  },\n  container: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'flex-end',\n  },\n  fab: {\n    marginHorizontal: 16,\n    marginBottom: 16,\n    marginTop: 0,\n  },\n  backdrop: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    borderRadius: 5,\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    marginVertical: 8,\n    marginHorizontal: 16,\n    elevation: 2,\n  },\n  item: {\n    marginBottom: 16,\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n  },\n});\n","import FABComponent from './FAB';\nimport FABGroup from './FABGroup';\n\nconst FAB = Object.assign(\n  // @component ./FAB.tsx\n  FABComponent,\n  {\n    // @component ./FABGroup.tsx\n    Group: FABGroup,\n  }\n);\n\nexport default FAB;\n"],"sourceRoot":""}