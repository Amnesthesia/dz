{"version":3,"sources":["components/notifications/index.ts","components/forms/ticket_type/TicketTypeForm.tsx","screens/authenticated/ticket_types/UpdateTicketTypeScreen.tsx"],"names":["actions","slice","Notifications","QUERY_EXTRAS","gql","TicketTypeForm","state","useAppSelector","ticketTypeForm","dispatch","useAppDispatch","globalState","global","React","altitudeMenuOpen","setAltitudeMenuOpen","useQuery","variables","dropzoneId","Number","currentDropzone","id","data","loading","refetch","style","styles","field","mode","label","error","fields","name","value","onChangeText","newValue","setField","type","cost","toString","width","onDismiss","visible","position","right","left","flex","anchor","Item","onPress","title","altitude","includes","Icon","icon","status","isTandem","allowManifestingSelf","Subheader","extras","map","extra","key","filter","StyleSheet","create","marginBottom","MUTATION_UPDATE_TICKET_TYPE","globalSlice","UpdateTicketTypeScreen","navigation","useNavigation","ticketType","useRoute","params","setOriginal","useMutation","mutationUpdateTicketType","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","original","extraIds","result","updateTicketType","fieldErrors","message","errors","snackbarActions","showSnackbar","variant","snackbar","goBack","contentContainerStyle","paddingHorizontal","size","color","alignSelf","disabled","container","alignItems","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/19.769c8de1.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nconst QUERY_EXTRAS = gql`\n  query QueryExtras(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeForm() {\n  const state = useAppSelector(state => state.ticketTypeForm);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_EXTRAS, {\n    variables: {\n      dropzoneId: Number(globalState.currentDropzone?.id)\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"Name of the ticket users will see\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"Base cost without extra ticket addons\" }\n      </HelperText>\n      <View style={{ width: \"100%\" }}>\n\n      <Menu\n        onDismiss={() => setAltitudeMenuOpen(false)}\n        visible={altitudeMenuOpen}\n\n        style={{position:'absolute',right:'10%',left:'10%', flex: 1 }}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setAltitudeMenuOpen(true);\n            }}\n            title={\n              state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"Height\",\n                  \"4000\": \"Hop n Pop\",\n                }[state.fields.altitude.value.toString()] :\n                \"Custom\"\n            }\n            style={{ width: \"100%\", flex: 1 }}\n            right={ () =>\n              <List.Icon icon={state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"airplane\",\n                  \"4000\": \"parachute\",\n                }[state.fields.altitude.value.toString()] as string :\n                \"pencil-plus\" \n              } />\n            }\n          />\n        }>\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 4000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Hop n Pop\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 14000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Height\"\n            right={() => <List.Icon icon=\"airplane-takeoff\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.setField([\"altitude\", 7000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Other\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n      </Menu>\n\n      {\n        (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Custom altitude\"\n            error={!!state.fields.altitude.error}\n            value={state.fields.altitude?.value?.toString()}\n            onChangeText={(newValue) => dispatch(actions.setField([\"altitude\", Number(newValue)]))}\n          />\n        )\n      }\n\n      <Checkbox.Item\n        label=\"Tandem\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.isTandem.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"isTandem\", !state.fields.isTandem.value]))\n        }\n      />\n      <HelperText type={!!state.fields.isTandem.error ? \"error\" : \"info\"}>\n        { state.fields.isTandem.error || \"Allow also manifesting a passenger when using this ticket type\" }\n      </HelperText>\n\n      <Checkbox.Item\n        label=\"Public manifesting\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.allowManifestingSelf.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.setField([\"allowManifestingSelf\", !state.fields.allowManifestingSelf.value]))\n        }\n      />\n      \n      <HelperText type={!!state.fields.allowManifestingSelf.error ? \"error\" : \"info\"}>\n        { state.fields.allowManifestingSelf.error || \"Allow users to manifest themselves with this ticket\" }\n      </HelperText>\n\n      <Divider />\n      <List.Subheader>Enabled ticket add-ons</List.Subheader>\n      {\n        data?.extras.map((extra) =>\n          <Checkbox.Item\n            key={`extra-${extra.id}`}\n            label={extra.name!}\n            status={state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(\n                actions.setField([\n                  \"extras\",\n                  state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n                  ? state.fields.extras.value?.filter(({ id }) => id !== extra.id)\n                  : [...state.fields.extras.value!, extra]\n                ])\n              )\n            }\n          />\n        )\n      }\n\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm, snackbarActions } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/ticket_type/slice\";\nimport { Mutation, TicketType } from '../../../graphql/schema';\nimport TicketTypeForm from '../../../components/forms/ticket_type/TicketTypeForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateTicketTypeScreen() {\n  const { ticketTypeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { ticketType: TicketType }}>();\n  const ticketType = route.params!.ticketType;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(ticketType));\n  }, [ticketType?.id]);\n\n  const [mutationUpdateTicketType, data] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateTicketType({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n\n\n        result?.data?.updateTicketType?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"altitude\":\n              return dispatch(actions.setFieldError([\"altitude\", message]));\n            case \"cost\":\n              return dispatch(actions.setFieldError([\"cost\", message]));\n            case \"allow_manifesting_self\":\n              return dispatch(actions.setFieldError([\"allowManifestingSelf\", message]));\n            case \"extras\":\n              return dispatch(actions.setFieldError([\"extras\", message]));\n          }\n        });\n\n        if (result?.data?.updateTicketType?.errors?.length) {\n          return dispatch(\n            snackbarActions.showSnackbar({\n              message: result?.data?.updateTicketType?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (result.data?.updateTicketType?.ticketType) {\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateTicketType]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <TicketTypeForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginVertical: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}