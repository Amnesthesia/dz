{"version":3,"sources":["components/Themed.tsx","components/ScrollableScreen.tsx","node_modules/react-native-web/dist/exports/useWindowDimensions/index.js","HelperText.tsx","components/notifications/index.ts","components/forms/plane/PlaneForm.tsx","screens/authenticated/planes/UpdatePlaneScreen.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","ScrollableScreen","height","useWindowDimensions","useAppSelector","state","global","styles","container","colors","surface","contentContainerStyle","content","children","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","_useState","useState","Dimensions","get","dims","setDims","useEffect","handleChange","_ref","window","addEventListener","removeEventListener","text","fontSize","paddingVertical","padding","withTheme","type","visible","rest","shown","React","Animated","current","textHeight","scale","toValue","duration","useNativeDriver","textColor","onLayout","e","opacity","transform","translateY","inputRange","outputRange","actions","slice","Notifications","DropzoneForm","planeForm","dispatch","useAppDispatch","field","mode","label","error","fields","name","value","onChangeText","newValue","setField","registration","hours","toString","placeholder","Number","minSlots","keyboardType","maxSlots","width","marginBottom","MUTATION_CREATE_PLANE","globalSlice","gql","UpdatePlaneScreen","navigation","useNavigation","plane","useRoute","params","setOriginal","id","useMutation","mutationUpdatePlane","data","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","nextMaintenanceHours","variables","original","result","updatePlane","snackbar","showSnackbar","message","variant","goBack","size","alignSelf","disabled","loading","onPress","title","fontWeight","separator","marginVertical"],"mappings":"yOAMO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAQC,cACRC,EAAiBJ,EAAME,GAE7B,OAAIE,GAGKC,IAAOH,GAAOD,GAYlB,SAASK,EAAKN,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/BW,EAAQZ,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,QAEpE,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEI,SAASJ,IAAYG,IAG9C,SAASI,EAAKd,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/Be,EAAkBhB,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,cAE9E,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEQ,mBAAmBR,IAAYG,M,iCCvC/D,sFAQe,SAASM,EAAiBhB,GAA2B,IAE1DiB,EAAWC,cAAXD,OACAf,EAAUiB,aAAe,SAAAC,GAAK,OAAIA,EAAMC,UAAxCnB,MAGR,OACE,kBAAC,IAAD,CAAYK,MAAO,CAACe,EAAOC,UAAW,CAAER,gBAAiBb,EAAMsB,OAAOC,QAASR,OAAQA,EAAU,KAAWjB,EAAMO,OAAQmB,sBAAuB,CAACJ,EAAOK,QAAS3B,EAAM0B,wBACrK1B,EAAM4B,UAKb,IAAMN,EAASO,IAAWC,OAAO,CAC/BP,UAAW,CACTQ,KAAM,GAERJ,QAAS,CACPK,kBAAmB,GACnBC,WAAY,aACZC,SAAU,EACVC,cAAe,O,iCCpBnB,qDAIe,SAASjB,IACtB,IAAIkB,EAAYC,oBAAS,WACvB,OAAOC,IAAWC,IAAI,aAEpBC,EAAOJ,EAAU,GACjBK,EAAUL,EAAU,GAkBxB,OAhBAM,qBAAU,WACR,SAASC,EAAaC,GACpB,IAAIC,EAASD,EAAKC,OAElBJ,EAAQI,GAQV,OALAP,IAAWQ,iBAAiB,SAAUH,GAItCF,EAAQH,IAAWC,IAAI,WAChB,WACLD,IAAWS,oBAAoB,SAAUJ,MAE1C,IACIH,I,4TC2CT,IAgFMlB,EAAS,WAAkB,CAC/B0B,KAAM,CACJC,SADI,GAEJC,gBAAiB,GAEnBC,QAAS,CACPnB,kBAAmB,MAIRoB,iBA1FI,SAAC,GAQN,IARM,EAQP,EARO,MAQP,IANXC,YAMW,MARO,OAQP,MALXC,eAKW,SARO,EAQP,EARO,QAQP,EARO,SAQP,IAFXH,eAEW,MARO,SAQP,EADRI,EACQ,+DACMC,EAAUC,SACzB,IAAIC,IAAJ,MAAmBJ,EAAO,EAD5B,IAAQK,QAIOC,EAAeH,SAA9B,GAAME,QAEEE,EAAU3D,EAAlB,UAAQ2D,MAERJ,aAAgB,WACd,EAEEC,aAAuB,CACrBI,QADqB,EAErBC,SAAU,IAFW,EAGrBC,iBAAiB,IAHnBN,QAOAA,aAAuB,CACrBI,QADqB,EAErBC,SAAU,IAFW,EAGrBC,iBAAiB,IAHnBN,UAMD,CAACJ,EAAQ,EAhBZG,IAkBA,IAKM,EAAN,EAAM,OAAU5C,EAAhB,EAAgBA,KAEVoD,EACJZ,YACI7B,EADJ6B,MAEI1C,IAAMa,EAANb,YACSE,EAAI,GADbF,WAHN,SAQA,OACE,uBACEuD,SAjBsBC,YACxBD,eAAQ,IAARA,QACAN,EAAaO,qBAAbP,QAgBErD,MAAO,CACLe,EADK,KAEL6B,WAAqB7B,EAArB6B,QAFK,GAGL,CACExC,MADF,EAEEyD,QAFF,EAGEC,UACEf,GAAA,UAAWD,EACP,CACE,CACEiB,WAAYd,EAAA,YAAkB,CAC5Be,WAAY,CAAC,EADe,GAE5BC,YAAa,EAAEZ,EAAF,SAInB,IAhBH,IAFT,GAwBGL,EAzBL,c,iCCjIF,wDAGQkB,EAAYC,IAAZD,QAGOE,EAAf,G,iCCNA,8EASQF,EATR,OASoBC,EAAZD,QAGO,SAASG,IAAgB,IAAD,QAC/BxD,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAMyD,aACtCC,EAAWC,cAEjB,OACE,gCACE,gBAAC,IAAD,CACExE,MAAOe,EAAO0D,MACdC,KAAK,WACLC,MAAM,OACNC,QAAS/D,EAAMgE,OAAOC,KAAKF,MAC3BG,MAAOlE,EAAMgE,OAAOC,KAAKC,MACzBC,aAAc,SAACC,GAAD,OAAcV,EAASL,EAAQgB,SAAS,CAAC,OAAQD,QAEjE,gBAAC,IAAD,CAAYnC,KAAQjC,EAAMgE,OAAOC,KAAKF,MAAQ,QAAU,QACpD/D,EAAMgE,OAAOC,KAAKF,OAAS,IAG/B,gBAAC,IAAD,CACE5E,MAAOe,EAAO0D,MACdC,KAAK,WACLC,MAAM,eACNC,QAAS/D,EAAMgE,OAAOM,aAAaP,MACnCG,MAAOlE,EAAMgE,OAAOM,aAAaJ,MACjCC,aAAc,SAACC,GAAD,OAAcV,EAASL,EAAQgB,SAAS,CAAC,eAAgBD,QAEzE,gBAAC,IAAD,CAAYnC,KAAQjC,EAAMgE,OAAOM,aAAaP,MAAQ,QAAU,QAC5D/D,EAAMgE,OAAOM,aAAaP,OAAS,IAGvC,gBAAC,IAAD,CACE5E,MAAOe,EAAO0D,MACdC,KAAK,WACLC,MAAM,QACNC,QAAS/D,EAAMgE,OAAOO,MAAMR,MAC5BG,MAAK,SAAElE,EAAMgE,OAAOO,QAAf,SAAE,EAAoBL,YAAtB,EAAE,EAA2BM,WAClCC,YAAY,WACZN,aAAc,SAACC,GAAD,OAAcV,EAASL,EAAQgB,SAAS,CAAC,QAASK,OAAON,SAEzE,gBAAC,IAAD,CAAYnC,KAAQjC,EAAMgE,OAAOO,MAAMR,MAAQ,QAAU,QACrD/D,EAAMgE,OAAOO,MAAMR,OAAS,IAGhC,gBAAC,IAAD,CACE5E,MAAOe,EAAO0D,MACdC,KAAK,WACLC,MAAM,YACNC,QAAS/D,EAAMgE,OAAOW,SAASZ,MAC/BG,MAAK,SAAElE,EAAMgE,OAAOW,SAAST,YAAxB,EAAE,EAA6BM,WACpCI,aAAa,aACbT,aAAc,SAACC,GAAD,OAAcV,EAASL,EAAQgB,SAAS,CAAC,WAAYK,OAAON,SAE5E,gBAAC,IAAD,CAAYnC,KAAQjC,EAAMgE,OAAOW,SAASZ,MAAQ,QAAU,QACxD/D,EAAMgE,OAAOW,SAASZ,OAAS,uCAGnC,gBAAC,IAAD,CACE5E,MAAOe,EAAO0D,MACdC,KAAK,WACLC,MAAM,YACNC,QAAS/D,EAAMgE,OAAOa,SAASd,MAC/BG,MAAK,SAAElE,EAAMgE,OAAOa,eAAf,EAAE,EAAuBX,MAAMM,WACpCI,aAAa,aACbT,aAAc,SAACC,GAAD,OAAcV,EAASL,EAAQgB,SAAS,CAAC,WAAYK,OAAON,SAE5E,gBAAC,IAAD,CAAYnC,KAAQjC,EAAMgE,OAAOa,SAASd,MAAQ,QAAU,QACxD/D,EAAMgE,OAAOa,SAASd,OAAS,gEAMzC,IAAM7D,EAASO,IAAWC,OAAO,CAC/BsD,OAAQ,CACNc,MAAO,OACPnE,KAAM,GAERiD,MAAO,CACLkB,MAAO,OACPC,aAAc,M,wPC1EV1B,EAAYC,IAAZD,QAIF2B,GAH6BC,IAA3B5B,QAGsB6B,cAAH,s4BAgDZ,SAASC,IAAqB,IAAD,EACQpF,aAAe,SAAAC,GAAK,OAAIA,KAAvDA,EADuB,EAClCyD,UACFC,GAFoC,EAChBzD,OACT0D,eAEXyB,EAAaC,0BAEbC,EADQC,qBACMC,OAAQF,MAE5BjD,aAAgB,WACdqB,EAASL,EAAQoC,YAAYH,MAC5B,OAACA,OAAD,EAACA,EAAOI,KAV+B,MAYNC,sBAAsBX,GAZhB,WAYnCY,EAZmC,KAYdC,EAZc,KAcpCC,EAAWzD,eAAkB,WACjC,IAAI0D,GAAW,EAsBf,OArBI/F,EAAMgE,OAAOC,KAAKC,MAAM8B,OAAS,IACnCD,GAAW,EACXrC,EACEL,EAAQ4C,cAAc,CAAC,OAAQ,wBAI/BjG,EAAMgE,OAAOM,aAAaJ,MAAM8B,OAAS,IAC3CD,GAAW,EACXrC,EACEL,EAAQ4C,cAAc,CAAC,eAAgB,gCAItCjG,EAAMgE,OAAOa,SAASX,QACzB6B,GAAW,EACXrC,EACEL,EAAQ4C,cAAc,CAAC,WAAY,mCAI/BF,IACP,CAACG,KAAKC,UAAUnG,EAAMgE,QAASN,IAE5B0C,EAAS/D,eAAkB,8CAAAgE,EAAAC,OAAA,qDACiDtG,EAAMgE,OAA9EC,EADuB,EACvBA,KAAMK,EADiB,EACjBA,aAAcO,EADG,EACHA,SAAUF,EADP,EACOA,SAAUJ,EADjB,EACiBA,MAAOgC,EADxB,EACwBA,sBAInDT,IAL2B,4CAAAO,EAAA,MAONT,EAAoB,CACvCY,UAAW,CACTd,GAAIhB,OAAO1E,EAAMyG,SAAUf,IAC3BzB,KAAMA,EAAKC,MACXI,aAAcA,EAAaJ,MAC3BS,SAAUA,EAAST,MACnBW,SAAUA,EAASX,MACnBK,MAAOA,EAAML,MACbqC,qBAAsBA,EAAqBrC,UAfpB,OAOrBwC,EAPqB,OAmB3B,SAAIA,EAAOb,OAAX,SAAI,EAAac,cAAb,EAA0BrB,QACpBA,EAAUoB,EAAOb,KAAKc,YAAtBrB,MACR5B,EACEkD,IAASC,aAAa,CAAEC,QAAQ,eAAgBxB,EAAMrB,KAAQ8C,QAAS,aAEzE3B,EAAW4B,UAxBc,gDA2B3BtD,EACEkD,IAASC,aAAa,CAAEC,QAAS,KAAMA,QAASC,QAAS,WA5BhC,kEAiC9B,CAACb,KAAKC,UAAUnG,EAAMgE,QAASN,EAAUkC,IAE5C,OACE,gBAAC,IAAD,CAAkBtF,sBAAuBJ,EAAOK,SAC5C,gBAAC,IAAD,CAAwB0D,KAAK,WAAWgD,KAAM,IAAK1H,MAAM,UAAUJ,MAAO,CAAE+H,UAAW,YACvF,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAM/H,MAAOe,EAAOmD,SAClB,gBAAC,IAAD,CAAQQ,KAAK,YAAYsD,SAAUtB,EAAKuB,QAASC,QAASjB,EAAQgB,QAASvB,EAAKuB,SAAhF,UAQV,IAAMlH,EAASO,IAAWC,OAAO,CAC/BH,QAAS,CACPK,kBAAmB,IAErB0G,MAAO,CACLzF,SAAU,GACV0F,WAAY,QAEdC,UAAW,CACTC,eAAgB,GAChB5H,OAAQ,EACRiF,MAAO,OAETzB,QAAS,CACPyB,MAAO,OACPC,aAAc,IAEhBnB,MAAO,CACLmB,aAAc","file":"static/js/22.c7535562.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, props.style]} contentContainerStyle={[styles.content, props.contentContainerStyle]}>\n      {props.children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport Dimensions from '../Dimensions';\nimport { useEffect, useState } from 'react';\nexport default function useWindowDimensions() {\n  var _useState = useState(function () {\n    return Dimensions.get('window');\n  }),\n      dims = _useState[0],\n      setDims = _useState[1];\n\n  useEffect(function () {\n    function handleChange(_ref) {\n      var window = _ref.window;\n      // $FlowFixMe\n      setDims(window);\n    }\n\n    Dimensions.addEventListener('change', handleChange); // We might have missed an update between calling `get` in render and\n    // `addEventListener` in this handler, so we set it here. If there was\n    // no change, React will filter out this update as a no-op.\n\n    setDims(Dimensions.get('window'));\n    return function () {\n      Dimensions.removeEventListener('change', handleChange);\n    };\n  }, []);\n  return dims;\n}","import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport ScrollableScreen from '../../ScrollableScreen';\n\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.planeForm);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch, dropzoneForm } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/plane/slice\";\nimport { Mutation, Plane } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdatePlaneScreen() {\n  const { planeForm: state, global: globalState } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { plane: Plane }}>();\n  const plane = route.params!.plane;\n\n  React.useEffect(() => {\n    dispatch(actions.setOriginal(plane));\n  }, [plane?.id]);\n\n  const [mutationUpdatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdatePlane({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.updatePlane?.plane) {\n          const { plane } = result.data.updatePlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdatePlane]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <PlaneForm />\n        <View style={styles.actions}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  actions: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}