{"version":3,"sources":["components/Themed.tsx","components/NoResults.tsx","screens/authenticated/extras/ExtrasScreen.tsx"],"names":["useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","NoResults","title","subtitle","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","QUERY_TICKET_TYPE","gql","ExtrasScreen","state","useAppSelector","global","useQuery","variables","dropzoneId","Number","currentDropzone","id","data","loading","navigation","refetch","useNavigation","useRoute","visible","indeterminate","colors","accent","Header","Title","numeric","extras","map","extra","Row","Cell","onPress","navigate","name","cost","length","small","icon","label"],"mappings":"yOAMO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAQC,cACRC,EAAiBJ,EAAME,GAE7B,OAAIE,GAGKC,IAAOH,GAAOD,GAYlB,SAASK,EAAKN,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/BW,EAAQZ,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,QAEpE,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEI,SAASJ,IAAYG,IAG9C,SAASI,EAAKd,GAAmB,IAC9BO,EAAgDP,EAAhDO,MAAOC,EAAyCR,EAAzCQ,WAAYC,EAA6BT,EAA7BS,UAAcC,EADJ,IACmBV,EADnB,oCAE/Be,EAAkBhB,EAAc,CAAEa,MAAOJ,EAAYK,KAAMJ,GAAa,cAE9E,OAAO,gBAAC,IAAD,KAAaF,MAAO,CAAC,CAAEQ,mBAAmBR,IAAYG,M,iCCvC/D,wFAKe,SAASM,EAAT,GAA6E,IAAxDC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,SACzC,OACE,kBAAC,IAAD,CAAMX,MAAOY,EAAOC,OAClB,kBAAC,IAAD,KAAQH,GACR,kBAAC,IAAD,CAAWV,MAAO,CAAEc,UAAW,WAC5BH,IAOT,IAAMC,EAASG,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,QAAS,EACTC,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ,GAEVZ,MAAO,CACLK,KAAM,EACNQ,WAAY,SACZC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,W,oMCnBNC,EAAoBC,YAAH,wOAkBR,SAASC,IAAgB,IAAD,MAC/BC,EAAQC,aAAe,SAAAD,GAAK,OAAIA,EAAME,UADP,EAEFC,mBAAgBN,EAAmB,CACpEO,UAAW,CACTC,WAAYC,OAAM,SAACN,EAAMO,sBAAP,EAAC,EAAuBC,OAFtCC,EAF6B,EAE7BA,KAAMC,EAFuB,EAEvBA,QAKRC,GAP+B,EAEdC,QAKJC,2BACLC,qBASd,OACE,gCACA,gBAAC,IAAD,CAAaC,QAASL,EAASM,eAAa,EAAC7C,MAAO6B,EAAMtC,MAAMuD,OAAOC,SACvE,gBAAC,IAAD,CAAMnD,MAAOY,EAAOK,WAClB,gBAAC,IAAD,KACE,gBAAC,IAAUmC,OAAX,KACE,gBAAC,IAAUC,MAAX,aACA,gBAAC,IAAUA,MAAX,CAAiBC,SAAO,GAAxB,SAHJ,MAMIZ,GANJ,SAMIA,EAAMa,aANV,EAMI,EAAcC,KAAI,SAACC,GAAD,OAClB,gBAAC,IAAUC,IAAX,KACE,gBAAC,IAAUC,KAAX,CAAgBC,QAAS,kBAAMhB,EAAWiB,SAAS,oBAAqB,CAAEJ,YAAWA,EAAMK,MAC3F,gBAAC,IAAUH,KAAX,CAAgBL,SAAO,GAAEG,EAAMM,YAIlCpB,KAAW,MAACD,GAAD,SAACA,EAAMa,SAAN,EAAcS,SACzB,gBAAC,IAAD,CACEtD,MAAM,mBACNC,SAAS,mFAIf,gBAAC,IAAD,CACEX,MAAOY,EAAOS,IACd4C,OAAK,EACLC,KAAK,OACLN,QAAS,kBAAMhB,EAAWiB,SAAS,sBACnCM,MAAM,uBAOd,IAAMvD,EAASG,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,QAAS,EACTC,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ,GAEVZ,MAAO,CACLK,KAAM,EACNQ,WAAY,SACZC,eAAgB,SAChBC,MAAO,OACPC,OAAQ","file":"static/js/37.42c8401a.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList } from 'react-native';\nimport { Card, Title, FAB, Paragraph, List, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Query } from \"../../../graphql/schema\";\n\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport usePalette from '../../../hooks/usePalette';\nimport global from '../../../redux/global';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryExtra(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        altitude\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtrasScreen() {\n  const state = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzone?.id)\n    }\n  });\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // React.useEffect(() => {\n  //   if (route.name === \"PlanesScreen\") {\n  //     refetch();\n  //   }\n  // }, [route.name])\n \n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n    <View style={styles.container}>\n      <DataTable>\n        <DataTable.Header>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Cost</DataTable.Title>\n        </DataTable.Header>\n\n        { data?.extras?.map((extra) =>\n          <DataTable.Row>\n            <DataTable.Cell onPress={() => navigation.navigate(\"UpdateExtraScreen\", { extra })}>{extra.name}</DataTable.Cell>\n            <DataTable.Cell numeric>{extra.cost}</DataTable.Cell>\n          </DataTable.Row>\n        )}\n      </DataTable>\n      { !loading && !data?.extras?.length && (\n          <NoResults\n            title=\"No ticket addons\"\n            subtitle=\"You can add multiple addons to assign to tickets, e.g outside camera, or coach\"\n          />\n      )}\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateExtraScreen\")}\n        label=\"New ticket addon\"\n      />\n    </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}