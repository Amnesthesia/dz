{"version":3,"sources":["components/NoResults.tsx","screens/authenticated/manifest/ManifestGroupUserSelectScreen.tsx"],"names":["NoResults","title","subtitle","style","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","QUERY_DROPZONE_USERS","slice","actions","gql","UsersScreen","useAppSelector","state","global","manifest","dispatch","useAppDispatch","useQuery","variables","dropzoneId","Number","currentDropzone","id","search","searchText","data","loading","navigation","useNavigation","isFocused","useRoute","useIsFocused","React","isSearchVisible","manifestActions","setSearchVisible","indeterminate","color","theme","colors","accent","visible","contentContainerStyle","paddingHorizontal","dropzone","dropzoneUsers","edges","length","map","edge","Item","key","node","user","name","description","role","left","image","Image","source","uri","alignSelf","marginHorizontal","size","Icon","icon","Android","status","selectedUsers","includes","onPress","setSelected","find","filter","small","slotsMultipleForm","setDropzoneUsers","setParams","select","navigate","label","fontSize","fontWeight","separator","marginVertical"],"mappings":"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","file":"static/js/23.b3fb4062.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Avatar, Checkbox, Divider, FAB, List, ProgressBar } from 'react-native-paper';\n\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/ScrollableScreen';\nimport { View } from '../../../components/Themed';\nimport { DropzoneUser, Query } from '../../../graphql/schema';\nimport { manifestActions, slotsMultipleForm, useAppDispatch, useAppSelector, usersActions } from '../../../redux';\n\nimport slice from \"./slice\";\n\nconst { actions } = slice;\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search, licensed: true) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUsersRouteParams{\n  key: string,\n  name: string,\n  params: {\n    select?: boolean;\n    loadId?: number;\n    onSelect?(selectedUsers?: DropzoneUser[]): void;\n  }\n}\nexport default function UsersScreen() {\n  const {global, manifest } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzone?.id),\n      search: manifest.searchText,\n    }\n  });\n\n  const navigation = useNavigation();\n  const route = useRoute<IUsersRouteParams>();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (manifest.isSearchVisible) {\n      dispatch(manifestActions.setSearchVisible(false));\n    }\n  }, [isFocused]);\n\n\n  return (\n    <>\n    <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 0 }}>\n      \n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n        <>\n        <List.Item\n          style={{ width: \"100%\"}}\n          key={`user-${edge?.node?.id}`}\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() =>\n            !edge?.node?.user?.image\n              ? <List.Icon icon=\"account\" />\n              : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n          }\n          right={() => \n            <Checkbox.Android\n              status={\n                manifest.selectedUsers?.map(({ id }) => id).includes(edge!.node!.id)\n                ? \"checked\"\n                : \"unchecked\"\n              }\n            />\n          }\n          onPress={\n              () => dispatch(\n                manifestActions.setSelected(\n                  manifest.selectedUsers?.find(({ id }) => id === `${edge?.node?.id}`)\n                  ? manifest.selectedUsers?.filter(({ id }) => id !== `${edge?.node?.id}`)\n                  : [...manifest.selectedUsers, edge!.node!],\n                )\n              )\n          }\n        />\n        <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n        </>\n      )}\n\n    </ScrollableScreen>\n    <FAB\n      style={styles.fab}\n      small\n      visible={manifest.selectedUsers.length > 0}\n      icon=\"check\"\n      onPress={() => {\n        dispatch(slotsMultipleForm.setDropzoneUsers(manifest.selectedUsers));\n        navigation.setParams({ select: false });\n        dispatch(manifestActions.setSearchVisible(false));\n        dispatch(manifestActions.setSelected([]));\n        navigation.navigate(\"ManifestGroupScreen\");\n      }}\n      label=\"Next\"\n    />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"sourceRoot":""}